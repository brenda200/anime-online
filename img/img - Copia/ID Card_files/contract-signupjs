/* Minification failed. Returning unminified contents.
(2156,24-25): run-time error JS1003: Expected ':': ,
(2157,17-18): run-time error JS1003: Expected ':': ,
(2158,18-19): run-time error JS1003: Expected ':': ,
(2159,19-20): run-time error JS1003: Expected ':': ,
(2160,23-24): run-time error JS1003: Expected ':': ,
(2162,9-10): run-time error JS1003: Expected ':': }
(7549,40-41): run-time error JS1195: Expected expression: >
(7556,6-7): run-time error JS1195: Expected expression: )
(7566,38-39): run-time error JS1195: Expected expression: >
(7568,10-11): run-time error JS1195: Expected expression: ,
(7577,10-11): run-time error JS1195: Expected expression: ,
(7581,10-11): run-time error JS1195: Expected expression: ,
(7586,6-7): run-time error JS1195: Expected expression: )
(7589,63-64): run-time error JS1004: Expected ';': {
(7652,33-34): run-time error JS1195: Expected expression: >
(7665,6-7): run-time error JS1195: Expected expression: )
(8421,19-20): run-time error JS1003: Expected ':': ,
(8423,1-2): run-time error JS1003: Expected ':': }
 */
var BasicInfo = {};
BasicInfo.WelcomeImage = '';
BasicInfo.MembershipType = '';
BasicInfo.Locale = '';
BasicInfo.CountryCode = '';
BasicInfo.HasTextLimits = 'False';
BasicInfo.TextLimits = [];
BasicInfo.DisplayPopUp = 'True';
BasicInfo.SplitBy = "";
BasicInfo.HasTextDirectionRtl = 'False';

var BasicInfoModule = (function () {

    var DOMElements = {};

    function Init() {
        CacheDom();
        BindingEvents();
        SetTextLimits();
        GetDelimiter();
        SetTextDirectionRtl();
    }

    function SetTextDirectionRtl() {
        if (BasicInfo.HasTextDirectionRtl == "True") {
            $('input').each(function () {
                $(this).css({"direction": "rtl", "text-align": "right" });
            });
            $('select').each(function () {
                const IMAGE_URLS = '/Contract/Stuff/Global/Images/dropdown-arrow-hires.png';
                $(this).css({ "background": "#e8e8e8 url('" + IMAGE_URLS + "') no-repeat 10px 10px", "direction": "rtl", "text-align": "right" });
            });
        }
    }

    function GetDelimiter() {
        if (BasicInfo.UseDateFormatHyphen == "True") {
            BasicInfo.SplitBy = "-";
        } else {
            BasicInfo.SplitBy = "/";
        }
    }

    function SetTextLimits() {
        $.each(BasicInfo.TextLimits, function (index, value) {
            return value[0].split(',');
        });
    }

    function CacheDom() {
        DOMElements.$BasicInfoForm = $("#GeneralInfoForm");
        DOMElements.$DateErrorMessage = $("#HasEnoughAgeError");
        DOMElements.$SponsorInfoIsValidSponsorInfo = $("#SponsorInfo_IsValidSponsorInfo");
        DOMElements.$BasicInfoDetailsFirstName = $("#BasicInfoDetails_FirstName");
        DOMElements.$BasicInfoDetailsLastName = $("#BasicInfoDetails_LastName");
        DOMElements.$BasicInfoDetailsYear = $("#BasicInfoDetails_Year")
        DOMElements.$BasicInfoDetailsMonth = $("#BasicInfoDetails_Month")
        DOMElements.$BasicInfoDetailsDay = $("#BasicInfoDetails_Day")
    }

    function BindingEvents() {
        DOMElements.$BasicInfoForm.on('submit', BasicInfoFormOnSubmit);
        if (BasicInfo.HasTextLimits === 'True') {
            DOMElements.$BasicInfoDetailsFirstName.on('blur', HasInvalidTextEvent);
            DOMElements.$BasicInfoDetailsLastName.on('blur', HasInvalidTextEvent);
        }
    }

    function HasInvalidTextEvent() {
        BasicInfoDetails.HasInvalidTexts = CompareTextLimits("BasicInfoDetails", BasicInfo.TextLimits);
    }

    function ValidateDoB() {
        var yearOB = DOMElements.$BasicInfoDetailsYear.find("option:selected").val();
        var monthOB = DOMElements.$BasicInfoDetailsMonth.find("option:selected").val();
        var dayOB = DOMElements.$BasicInfoDetailsDay.find("option:selected").val();
        if (monthOB === "" || dayOB === "" || yearOB === "") {
            $('#dateErrorMsg').css("display", "block");
            return false;
        }
        else {
            return true;
        }
    }

    function BasicInfoFormOnSubmit() {
        var element = $('#BasicInfoDetails_DateSelected');
        var format = $.fn.datepicker.languages[Object.keys($.fn.datepicker.languages)[0]].format;
        var ageErrorMessage = $("#HasEnoughAgeError");
        var invalidDateMessage = $("#AgeInvalidDateRange");

        if (SponsorModule.SponsorInfo.IsLeadFlow === 'True') {
            SponsorModule.SponsorInfo.HasValidSponsor = 'True';
        }

        BasicInfoDetails.HasEnoughAge = BasicInfoDetailsModule.DateValidation(element.val(), format, element, invalidDateMessage, ageErrorMessage, true, true);
        BasicInfoDetails.IsValidDoB = ValidateDoB();

        if (SponsorModule.SponsorInfo.HasValidSponsor === 'False'
            || BasicInfoDetails.HasInvalidTexts
            || !BasicInfoDetails.HasEnoughAge
            || !BasicInfoDetails.HasValidSsn) {
            if (!BasicInfoDetails.HasEnoughAge) {
                if (!BasicInfoDetails.IsValidDoB) {
                    DOMElements.$DateErrorMessage.css("display", "block");
                }
            }
            return false;
        }

        if (!BasicInfoDetails.HasValidSsn) {
            return false;
        }

        if (MultipleTins.HasInvalidTins === "True") {
            return false;
        }

        if (AddressInfo.BlockOnExperianFailed == "True" && AddressInfo.IsInvalidExperian) {
            return false;
        }

        DOMElements.$SponsorInfoIsValidSponsorInfo.val(SponsorModule.SponsorInfo.HasValidSponsor);
        return true;
    }


    return {
        BasicInfoFormOnSubmit: BasicInfoFormOnSubmit,
        HasInvalidTextEvent: HasInvalidTextEvent,
        ValidateDoB: ValidateDoB,
        Init: Init
    }
})();

BasicInfo.Init = function () {
    steps();
    BasicInfoModule.Init();
    var isIE = !!document.documentMode;
    var output = isIE;
    if (output) {
        $("label").css("padding-top", "13px");
    }

    if (BasicInfo.WelcomeImage.length > 0 && BasicInfo.MembershipType === 'Distributor') {
        var modal = $('#welcomeModal');
        var modalHeight = modal.height();
        var neededHeight = window.screen.availHeight * .8;

        if (neededHeight < modalHeight) {
            modal.addClass('small');
        } else {
            $(window).resize(function () {
                if ((window.innerHeight - 200) < modalHeight) {
                    modal.addClass('small');
                } else {
                    modal.removeClass('small');
                }
            });
        }

        modal.reveal();
    }
    $('#modalFbBrowserPopup').reveal();

    if (BasicInfo.DisplayPopUp) {
        $('#modalGeneralInfoPopup').reveal();
    }
};;
var AddressInfo = {};

AddressInfo.Locale = "";
AddressInfo.CountryCode = "";
AddressInfo.ShouldValidateAddress = "False";
AddressInfo.ShouldBlockAddress = "False";
AddressInfo.ShouldValidateAddressOnExperian = "False";
AddressInfo.BlockOnExperianFailed = "False";
AddressInfo.UseShippingHandler = "False";
AddressInfo.UseShippingAlternative = "False";
AddressInfo.UseShippingHandlerForCity = "False";
AddressInfo.MembershipType = "";
AddressInfo.PopulateStates = "";
AddressInfo.PopulateStatesByCity = "";
AddressInfo.PopulateCities = "";
AddressInfo.PopulateDistrict = ""
AddressInfo.PopulateSubdistrict = ""
AddressInfo.PopulateColonies = "";
AddressInfo.PopulateZipCode = "";
AddressInfo.PopulateStreet = "";
AddressInfo.PopulateStreetBySteps = "";
AddressInfo.IsStateEnabled = true;
AddressInfo.PopulateProvinces = "";
AddressInfo.IsCityEnabled = true;
AddressInfo.City = "";
AddressInfo.District = "";
AddressInfo.Subdistrict = "";
AddressInfo.IsDistrictEnabled = false;
AddressInfo.IsSubdistrictEnabled = true;
AddressInfo.State = "";
AddressInfo.Colony = "";
AddressInfo.PostalCode = "";
AddressInfo.PopulateAddressWithZipCode = "";
AddressInfo.GetAddressDetailsFromPostalCode = "False";
AddressInfo.GetCityFromZipCode = "False";
AddressInfo.GetStateAndCityFromZipCode = "False";
AddressInfo.GetStateAndCityFromZipCodeSuccess = true;
AddressInfo.ShouldValidatePostalCode = "False";
AddressInfo.MailingSpecialPostalCodes = "";
AddressInfo.ShowShippingForPostalCode = "";
AddressInfo.HasInvalidTexts = false;
AddressInfo.DisplayLegalAddress = false;
AddressInfo.IsColonyOptional = "False";
AddressInfo.PrevSuccessfulExperianRequest = {};
AddressInfo.IsLoadCityOnly = "";
AddressInfo.Prefixes = ["AddressInfo", "BillingAddress", "ShippingAddress", "LegalAddressInfo"];
AddressInfo.ShowColonyByDefault = true;
AddressInfo.HasCities = false;
AddressInfo.EditableNullPostalCode = false;
AddressInfo.IsPostalCodeReadOnly = false;
AddressInfo.ShouldValidateLocalAddressLength = "False";
AddressInfo.HasSelectOneForPostalCode = "True";
AddressInfo.EnableBeforeSendToPopulateAddress = "True";
AddressInfo.BypassInitialGetShippingMethodsCall = false;
AddressInfo.IsDocExtractEnabledForAddressFields = false;
AddressInfo.IsInvalidExperian = false;
AddressInfo.SetStateDropDownByText = false;
AddressInfo.CleanFieldsOnEmptyZip = true;
AddressInfo.DisplayZipWarningMessage = false;
AddressInfo.DisplayEmptyShippingMethodsMessage = "false";
AddressInfo.EmptyShippingMethods = "false";
AddressInfo.HasDynamicReadOnlyAddressFields = false;
AddressInfo.RegexForDynamicReadOnlyAddressFields = {};
AddressInfo.MailingAddressNotAvailableForShippping = false;

var FeatureFlags;

AddressInfo.RangeZipCodeParse = function () {
    var obj = {}
    if (typeof (RangeZipcode) !== 'undefined') {
        RangeZipcode.split(";").map(function (range) {
            var value = range.split(":")
            obj[value[0]] = value[1]
        })
    }
    return obj;
}

AddressInfo.GetAddressForm = function (prefix) {
    return {
        addressOne: $("#" + prefix + "_AddressLine1").val(),
        addressTwo: $("#" + prefix + "_AddressLine2").val(),
        city: $("#" + prefix + "_City").val(),
        district: $("#" + prefix + "_District").val(),
        subdistrict: $("#" + prefix + "_Subdistrict").val(),
        state: $("#" + prefix + "_State").val(),
        postalCode: $("#" + prefix + "_PostalCode").val(),
        poBoxConfig: $("#" + prefix + "_PoBoxConfiguration").val()
    }
}


AddressInfo.Init = function () {

    /***** Focus Events Handlers *****/
    ValidateStreetEventHandler();

    BindAddressValidationKeyup('AddressInfo_AddressLine1');
    BindAddressValidationKeyup('AddressInfo_AddressLine2');

    BindAddressValidationKeyup('ShippingAddress_AddressLine1');
    BindAddressValidationKeyup('ShippingAddress_AddressLine2');

    /***** Blur Events Register *****/
    AddressInfo.Prefixes.forEach(function (item, index) {

        $("#" + item + "_AddressLine1").blur(addressOnBlurHandler);

        $("#" + item + "_City").blur(cityOnBlurHandler);

        $("#" + item + "_District").blur(districtOnBlurHandler);

        $("#" + item + "_Subdistrict").blur(subdistrictOnBlurHandler);

        $("#" + item + "_State").blur(stateOnBlurHandler);

        $("#" + item + "_Colony").blur(colonyOnBlurHandler);

        $("#" + item + "_PostalCode").blur(postalCodeOnBlurHandler);

        $("#" + item + "_Province").blur(provinceOnBlurHandler);

        if (AddressInfo.ShouldValidatePostalCode === "True" || AddressInfo.PopulateAddressWithZipCode === "True") {
            BindPostalValidationKeyup(item + "_PostalCode", item);
        }
    });

    if ($("#AddressInfo_PostalCode").attr('readonly') === 'readonly') {
        AddressInfo.IsPostalCodeReadOnly = true;
    }

    if (!isEmpty(AddressInfo.Colony)) {
        $("#coloniesDrop").show();
    }

    if (AddressInfo.UseShippingHandler === "True") {
        $("#ShippingAddress_State").change(function () {
            AddressInfo.ShippingMethodsEventHandler();
        });
    }
    
    if (AddressInfo.UseShippingHandler === "True" && AddressInfo.UseShippingHandlerForCity === "True") {
        $("#ShippingAddress_City").change(function () {
            AddressInfo.ShippingMethodsEventHandler();
        });
    }

    if (AddressInfo.UseShippingHandler === "True") {
        $("#ShippingAddress_PostalCode").change(function () {
            AddressInfo.ShippingMethodsEventHandler();
        });
    }

    if (AddressInfo.UseShippingHandler === "True") {
        $("#ShippingAddress_Colony").change(function () {
            AddressInfo.ShippingMethodsEventHandler();
        });
    }

    if (AddressInfo.ShowShippingForPostalCode !== "") {
        $("#ShippingAddress_PostalCode").blur(function () {
            postalCodeDisplayShippingMethod();
        });
    }

    /***** Change Events Handlers *****/
    if (AddressInfo.PopulateCities === "True") {

        $("#ShippingAddress_City").on('blur', function () {
            $(this).valid();
        });

        $("#AddressInfo_State").change(function () {
            return AddressInfo.StateEventHandler("AddressInfo");
        });

        $("#AddressInfo_City").change(function () {
            if (AddressInfo.IsDistrictEnabled === true) {
                return AddressInfo.DistrictEventHandler("AddressInfo");
            }
            else {
                return AddressInfo.CityEventHandler('AddressInfo');
            }

        });

        $("#LegalAddressInfo_City").change(function () {
            if (AddressInfo.IsDistrictEnabled === true) {
                return AddressInfo.DistrictEventHandler("LegalAddressInfo");
            }
            else {
                return AddressInfo.CityEventHandler('LegalAddressInfo');
            }

        });

        $("#ShippingAddress_City").change(function () {
            if (AddressInfo.IsDistrictEnabled === true) {
                return AddressInfo.DistrictEventHandler("ShippingAddress");
            }
            else {
                return AddressInfo.CityEventHandler('ShippingAddress');
            }

        });

        $("#AddressInfo_District").change(function () {
            if (AddressInfo.IsSubdistrictEnabled === true) {
                return AddressInfo.SubdistrictEventHandler("AddressInfo");
            }
        });

        $("#AddressInfo_Subdistrict").change(function () {
            if (AddressInfo.IsSubdistrictEnabled === true) {
                return AddressInfo.ZipCodeBySubdistrictEventHandler("AddressInfo");
            }
        });

        $("#ShippingAddress_District").change(function () {
            if (AddressInfo.IsSubdistrictEnabled === true) {
                return AddressInfo.SubdistrictEventHandler("ShippingAddress");
            }
        });

        $("#ShippingAddress_Subdistrict").change(function () {
            if (AddressInfo.IsSubdistrictEnabled === true) {
                return AddressInfo.ZipCodeBySubdistrictEventHandler("ShippingAddress");
            }
        });

        $("#ShippingAddress_State").change(function () {
            return AddressInfo.StateEventHandler("ShippingAddress");
        });

        $("#BillingAddress_State").change(function () {
            return AddressInfo.StateEventHandler("BillingAddress");
        });

        $("#LegalAddressInfo_State").change(function () {
            return AddressInfo.StateEventHandler("LegalAddressInfo");
        });
    }

    if (AddressInfo.PopulateColonies === "True" || (AddressInfo.PopulateColonies !== "True" && AddressInfo.PopulateZipCode === "True")) {

        $("#AddressInfo_City").change(function () {
            return AddressInfo.CityEventHandler('AddressInfo');
        });

        $("#ShippingAddress_City").change(function () {
            if (AddressInfo.IsDistrictEnabled === true) {
                return AddressInfo.DistrictEventHandler("ShippingAddress");
            }
            else {
                return AddressInfo.CityEventHandler('ShippingAddress');
            }
        });

        $("#BillingAddress_City").change(function () {
            return AddressInfo.CityEventHandler('BillingAddress');
        });

        $("#LegalAddressInfo_City").change(function () {
            return AddressInfo.CityEventHandler('LegalAddressInfo');
        });
    }

    if (AddressInfo.PopulateColonies === "True" && AddressInfo.PopulateZipCode === "True") {

        $("#AddressInfo_Colony").change(function () {
            return AddressInfo.ColonyEventHandler("AddressInfo");
        });

        $("#BillingAddress_Colony").change(function () {
            return AddressInfo.ColonyEventHandler("BillingAddress");
        });

        $("#ShippingAddress_Colony").change(function () {
            return AddressInfo.ColonyEventHandler("ShippingAddress");
        });

        $("#LegalAddressInfo_Colony").change(function () {
            return AddressInfo.ColonyEventHandler("LegalAddressInfo");
        });
    }

    if (AddressInfo.GetAddressDetailsFromPostalCode === "True") {
        $.each(AddressInfo.Prefixes, function (index, prefix) {
            if ($("#" + prefix + "_PostalCode").val()) {

                /* Adding this to handle when user goes back from Payment Page > Shipping Page especially for locale ru-RU. The selected
                   shipping method is initially set in behavior class ShipmentMethods.cs.  Without the below condition, javascript's GetShippingMethods( )
                   wipes it out.  */
                if (prefix === "ShippingAddress") {
                    AddressInfo.BypassInitialGetShippingMethodsCall = true;
                }

                GetAddressDetailsByZipCodeEventHandler(prefix);
                if (AddressInfo.Address) {
                    $("#" + prefix + "_State  option[value=" + AddressInfo.Address.State + "]").prop("selected", true);
                    $("#" + prefix + "_City  option[value=" + AddressInfo.Address.City + "]").prop("selected", true);
                }
            }
        });
    }

    if (AddressInfo.GetStateAndCityByZipCode === 'True') {
        GetStateAndCityByZipCodeEventHandler('AddressInfo');
        var statesSelect = $('#AddressInfo_State');
        var citiesSelect = $('#AddressInfo_City');
        citiesSelect.val(AddressInfo.City);
        statesSelect.val(AddressInfo.State);
    }

    if (AddressInfo.PopulateProvinces === "True" && AddressInfo.PopulateZipCode === "True") {

        $("#AddressInfo_Province").change(function () {
            return AddressInfo.ProvinceEventHandler('AddressInfo');
        });

        $("#ShippingAddress_Province").change(function () {
            return AddressInfo.ProvinceEventHandler('ShippingAddress');
        });

        $("#BillingAddress_Province").change(function () {
            return AddressInfo.ProvinceEventHandler('BillingAddress');
        });

        $("#LegalAddressInfo_Province").change(function () {
            return AddressInfo.ProvinceEventHandler('LegalAddressInfo');
        });
    }

    ApplyBehaviorValidateZipCodeRange($("#AddressInfo_PostalCode"));

    $("#InvalidAddressExperian").css('display', 'none');

    if ($("#isLegalAdressCheckTrue") !== undefined &&
        $("#isLegalAdressCheckTrue").is(":checked")) {
        $("#legalAddressYes").show();
        AddressInfo.DisplayLegalAddress = true;
    }

    $("input[name='LegalAddressInfo.SectionRequired']").click(legalAddressRequiredChanged);

    $("#AddressInfo_City").on('blur', function () {
        PersonalInfo.IsValidLocalAddressCity = 'True';
        if (AddressInfo.ShouldValidateLocalAddressLength === 'True') {
            ValidateLocalAddress($(this));
        }

        $(this).valid();

        return AddressInfo.CityEventHandler('AddressInfo');
    });

    $("#AddressInfo_State").on('blur', function () {
        PersonalInfo.IsValidLocalAddressState = 'True';
        if (AddressInfo.ShouldValidateLocalAddressLength === 'True') {
            ValidateLocalAddress($(this));
        }
    });

    $("#LegalAddressInfo_City").on('blur', function () {
        $(this).valid();

        return AddressInfo.CityEventHandler('LegalAddressInfo');
    });

    $("#AddressInfo_City")
        .keypress(function (ev) {
            if (ev.keyCode === 13) {
                ev.preventDefault();
                $("#AddressInfo_City").closest("section").children(".editDone").children().click();
                $("#AddressInfo_City").blur();
                return false;
            }
        }
        );

    if (AddressInfo.PopulateAddressWithZipCode === "True") {
        $("#AddressInfo_PostalCode").keyup(function () {
            if (isEmpty($("#AddressInfo_PostalCode").val()) && AddressInfo.CleanFieldsOnEmptyZip) {
                cleanAddressValues("AddressInfo_");
            }
        });
    }

    if (AddressInfo.DisplayEmptyShippingMethodsMessage.toLowerCase() === "true" && AddressInfo.EmptyShippingMethods.toLowerCase() === "true") {
        $('#shippingmethodselected-error').css('display', 'block');
    }

    if (AddressInfo.DisplayEmptyShippingMethodsMessage.toLowerCase() === "true" && AddressInfo.MailingAddressNotAvailableForShippping) {
        $('#shippingmethodselected-error').css('display', 'block');
    }

}

AddressInfo.SetAddressFieldsKyc = function (prefix, address) {
    if (!isEmpty(address)) {
        var kycAddress = JSON.parse(address);
        var addressInfo = AddressInfo.GetAddressFieldsKyc(prefix);
        if (!isEmpty(kycAddress["Street1"])) {
            addressInfo.addressOne.val(kycAddress["Street1"])
        }
        if (!isEmpty(kycAddress["Street2"])) {
            addressInfo.addressTwo.val(kycAddress["Street2"]);
        }
        if (!isEmpty(kycAddress["City"])) {
            addressInfo.city.val(kycAddress["City"]);
        }
        if (!isEmpty(kycAddress["District"]) && AddressInfo.IsDistrictEnabled) {
            addressInfo.district.val(kycAddress["District"]);
        }
        if (!isEmpty(kycAddress["Subdistrict"]) && AddressInfo.IsSubdistrictEnabled) {
            addressInfo.subdistrict.val(kycAddress["Subdistrict"]);
        }
        if (!isEmpty(kycAddress["State"])) {
            addressInfo.state.val(kycAddress["State"]);
        }
        if (!isEmpty(kycAddress["Postal Code"])) {
            addressInfo.postalCode.val(kycAddress["Postal Code"]);
        }
    }
}

AddressInfo.ClearAddressFieldsKyc = function (prefix) {
    var addressInfo = AddressInfo.GetAddressFieldsKyc(prefix);
    $.each(addressInfo, function (key, field) {
        field.removeAttr('readonly');
        field.removeClass('input-disabled');
        field.val("");
    });
}

AddressInfo.SetAddressFieldsReadOnlyKycSuccess = function (prefix) {
    var addressInfo = AddressInfo.GetAddressFieldsKyc(prefix);
    $.each(addressInfo, function (key, field) {
        if (!isEmpty(field.val())) {
            field.attr('readonly', 'true');
            field.addClass('input-disabled');
        }
    });
}

AddressInfo.SetAddressFieldsEditableDocUpload = function (prefix) {
    var addressInfo = AddressInfo.GetAddressFieldsKyc(prefix);
    $.each(addressInfo, function (key, field) {
        if (!isEmpty(field.val())) {
            field.removeAttr('readonly');
            field.removeClass('input-disabled');
        }
    });

    // TFSBug 571994 :State field is not auto-populates, even we have Postal Code exists in Voter ID
    AddressInfo.IsDocExtractEnabledForAddressFields = true;
    var addressForm = AddressInfo.GetAddressForm(prefix);
    if (!isEmpty(addressForm.postalCode) && (isEmpty(addressForm.state) || isEmpty(addressForm.city))) {
        $("#" + prefix + "_PostalCode").trigger("blur");
    }
}

AddressInfo.GetAddressFieldsKyc = function (prefix) {
    return {
        addressOne: $("#" + prefix + "_AddressLine1"),
        addressTwo: $("#" + prefix + "_AddressLine2"),
        city: $("#" + prefix + "_City"),
        district: $("#" + prefix + "_District"),
        subdistrict: $("#" + prefix + "_Subdistrict"),
        state: $("#" + prefix + "_State"),
        postalCode: $("#" + prefix + "_PostalCode"),
    }
}

/***** Blur Events Handlers *****/
function cityOnBlurHandler(event) {
    var id = $(this)[0].id;
    var prefix = id.substring(0, id.indexOf("_"));

    return ValidateAddressEventHandler(prefix);
}

function districtOnBlurHandler(event) {
    var id = $(this)[0].id;
    var prefix = id.substring(0, id.indexOf("_"));

    $(this).valid();
    return ValidateAddressEventHandler(prefix);
}

function subdistrictOnBlurHandler(event) {
    var id = $(this)[0].id;
    var prefix = id.substring(0, id.indexOf("_"));

    $(this).valid();
    return ValidateAddressEventHandler(prefix);
}



function addressOnBlurHandler(event) {
    var id = $(this)[0].id;
    var prefix = id.substring(0, id.indexOf("_"));

    return ValidateAddressEventHandler(prefix);
}

function stateOnBlurHandler(event) {

    var id = $(this)[0].id;
    var prefix = id.substring(0, id.indexOf("_"));

    $(this).valid();
    return ValidateAddressEventHandler(prefix);
}

function colonyOnBlurHandler(event) {

    var id = $(this)[0].id;
    var prefix = id.substring(0, id.indexOf("_"));
    $(this).valid();
    return ValidateAddressEventHandler(prefix);
}

function postalCodeOnBlurHandler(event) {

    var id = $(this)[0].id;
    var prefix = id.substring(0, id.indexOf("_"));

    $(this).valid();
    if ($(this).attr('readonly') === 'readonly') {
        return false;
    }

    if (AddressInfo.PopulateAddressWithZipCode === "True") {
        return PopulateAddressByZipCodeEventHandler(prefix);
    }
    else if (AddressInfo.GetAddressDetailsFromPostalCode === "True") {
        return GetAddressDetailsByZipCodeEventHandler(prefix);
    }
    else if (AddressInfo.GetStateAndCityFromZipCode === "True") {
        return GetStateAndCityByZipCodeEventHandler(prefix);
    } else if (AddressInfo.GetCityFromZipCode === "True") {
        return GetCityByZipCodeEventHandler(prefix);
    }
    else if (AddressInfo.ShouldValidatePostalCode === "True") {
        ValidatePostalCodeEventHandler(prefix);
    }
    else {
        PersonalInfo.IsValidZipCode = "True";
    }

    return ValidateAddressEventHandler(prefix);
}

function provinceOnBlurHandler(event) {
    var id = $(this)[0].id;
    var prefix = id.substring(0, id.indexOf("_"));

    $(this).valid();
    return ValidateAddressEventHandler(prefix);
}

function legalAddressRequiredChanged() {
    if ($("#isLegalAdressCheckTrue").is(":checked")) {
        $('#legalAddressYes').slideDown(50, function () { });
        AddressInfo.DisplayLegalAddress = true;
        if (AddressInfo.PopulateColonies === "True" && AddressInfo.PopulateStreet === "True" && AddressInfo.PopulateZipCode === "True") {
            $("#LegalAddressInfo_AddressLine1").change(function () {
                return AddressInfo.StreetEventHandler("LegalAddressInfo");
            });
        }
    } else {
        $('#legalAddressYes').slideUp();
        PreviousMembership.IsPreviousMembershipRequired = false;
        $('#LegalAddressInfo_AddressLine1').val("");
        $('#LegalAddressInfo_AddressLine2').val("");
        $('#LegalAddressInfo_AddressLine3').val("");
        $('#LegalAddressInfo_AddressLine4').val("");

        if (isTextField("LegalAddressInfo_City")) {
            $('#LegalAddressInfo_City').val('');
        }

        if (isDropDown("LegalAddressInfo_City")) {
            clearDropdown("LegalAddressInfo_City", true);
        }

        if (isTextField("LegalAddressInfo_Colony")) {
            $('#LegalAddressInfo_Colony').val('');
        }

        if (isDropDown("LegalAddressInfo_Colony")) {
            clearDropdown("LegalAddressInfo_Colony", true);
        }

        if (isTextField("LegalAddressInfo_State")) {
            $('#LegalAddressInfo_State').val('');
        }

        if (isDropDown("LegalAddressInfo_State")) {
            $('#LegalAddressInfo_State')[0].selectedIndex = 0;
        }

        if (isTextField("LegalAddressInfo_PostalCode")) {
            $('#LegalAddressInfo_PostalCode').val('');
        }

        if (isDropDown("LegalAddressInfo_PostalCode")) {
            clearDropdown("LegalAddressInfo_PostalCode", true);
        }
    }
}

function ValidateStreetEventHandler() {
    if (AddressInfo.PopulateColonies === "True" && AddressInfo.PopulateStreet === "True" && AddressInfo.PopulateZipCode === "True") {
        $("#AddressInfo_AddressLine1").blur(function () {
            return AddressInfo.StreetEventHandler("AddressInfo");
        });

        $("#ShippingAddress_AddressLine1").blur(function () {
            return AddressInfo.StreetEventHandler("ShippingAddress");
        });

        if (PreviousMembership.IsPreviousMembershipRequired) {
            $("#LegalAddressInfo_AddressLine1").blur(function () {
                return AddressInfo.StreetEventHandler("LegalAddressInfo");
            });
        }
    }
}

function isEmptyDropdown(dropdown) {
    var options = dropdown.find('option');
    if ((options) && options.length === 1) {
        if (isEmpty(options[0].value)) {
            return true;
        }
    }
    return false;
}

function ApplyBehaviorValidateZipCodeRange(selector) {
    if (jQuery.isEmptyObject(AddressInfo.RangeZipCodeParse()) === false) {
        ValidateZipCodeRange(selector);
    }
}

function ValidateZipCodeRange(selector) {
    selector.change(function (a) {
        var AddressInfo_PostalCode = selector;
        if (parseInt(AddressInfo_PostalCode.val()) < AddressInfo.RangeZipCodeParse().Min ||
            parseInt(AddressInfo_PostalCode.val()) > AddressInfo.RangeZipCodeParse().Max) {
            AddressInfo_PostalCode.val("");
        }
    });
}

function ValidateAddressEventHandler(prefix, field) {
    var form = AddressInfo.GetAddressForm(prefix);

    //Address Validation
    if (AddressInfo.ShouldValidateAddress === "True") {

        if (!isEmpty(form.addressOne) && (form.subdistrict === null || form.subdistrict == undefined || !isEmpty(form.subdistrict)) && !isEmpty(form.city) && (form.district === null || form.district == undefined || !isEmpty(form.district)) && (form.state === null || form.state == undefined || !isEmpty(form.state)) && !isEmpty(form.postalCode) && !$("#" + prefix + "_AddressLine1").prop("readonly")) {
            ValidateAddress(form.addressOne, form.city, form.state, form.postalCode, form.district, form.subdistrict);
        }
    }
    else {
        PersonalInfo.IsValidAddress = "True";
    }

    if (AddressInfo.ShouldBlockAddress === "True" && PersonalInfo.IsValidAddress === "True") {

        if (!isEmpty(form.addressOne) && !isEmpty(form.city) && (form.state === null || form.state == undefined || !isEmpty(form.state)) && !isEmpty(form.postalCode) && !$("#" + prefix + "_AddressLine1").prop("readonly")) {
            BlockAddress(form.addressOne, form.city, form.state, form.postalCode);
        }
    }
    else {
        PersonalInfo.IsValidAddress = "True";
    }

    //Experian Validation
    if (AddressInfo.ShouldValidateAddressOnExperian === "True") {

        if (!isEmpty(form.addressOne) && !isEmpty(form.city) && (form.district == undefined || !isEmpty(form.subdistrict)) && (form.subdistrict == undefined || !isEmpty(form.district)) && (form.state == undefined || !isEmpty(form.state)) && !isEmpty(form.postalCode) && !$("#" + prefix + "_AddressLine1").prop("readonly")) {
            ValidateAddressExperian(form.addressOne, form.addressTwo, form.city, form.state, form.postalCode, prefix, form.district, form.subdistrict);
        }
    }

    if (AddressInfo.HasDynamicReadOnlyAddressFields)
    {
        setReadOnlyForDynamicAddressFields(prefix);
    }

    return false;
}

function BindAddressValidationKeyup(elemId) {
    $('#' + elemId).bind('keyup', function () {
        if (isEmpty($('#' + elemId).val())) {
            $('#' + elemId + '-invalidmsg').remove();
        }
    });
}

function BindPostalValidationKeyup(elemId, prefix) {
    $('#' + elemId).bind('keyup', function () {
        if (isEmpty($('#' + elemId).val()) || $("#AddressInfo_PostalCode-error").is(':visible') || AddressInfo.PopulateAddressWithZipCode === "True") {
            var element = $("#" + prefix + "_PostalCode");
            var message = element.siblings("#InvalidZipCode");
            message.css("display", "none");
        }
    });
    $('#' + elemId).bind('focus', function () {
        $(this).data('originalPostalCode', this.value);
    });
}

function GetAddressDetailsByZipCodeEventHandler(prefix) {
    var postalCode = $("#" + prefix + "_PostalCode").val();
    if (postalCode && postalCode.length !== 0) {
        PopulateAddressByPostalCode(postalCode, prefix);
    }
}

function GetCityByZipCodeEventHandler(prefix) {
    var postalCode = $("#" + prefix + "_PostalCode").val();
    if (postalCode && postalCode.length !== 0) {
        PopulateStateByPostalCode(postalCode, prefix);
    }
    else {
        clearDropdown(prefix + '_City', true);
        clearDropdown(prefix + '_State', true);
    }
}

function GetStateAndCityByZipCodeEventHandler(prefix) {
    var postalCode = $("#" + prefix + "_PostalCode").val();
    if (postalCode && postalCode.length !== 0) {
        var isValidPostalCode = PopulateCityAndStateByPostalCode(postalCode, prefix);
        if (!isValidPostalCode) {
            ZipCodeValidationBehavior(false, prefix);
        }
        else {
            ZipCodeValidationBehavior(true, prefix);
        }
    }
    else {
        clearDropdown(prefix + '_City', true);
        clearDropdown(prefix + '_District', true);
        clearDropdown(prefix + '_Subdistrict', true);
        clearDropdown(prefix + '_State', true);
    }
}

function ValidatePostalCodeEventHandler(prefix) {
    var postalCode = $("#" + prefix + "_PostalCode").val();
    if (postalCode && postalCode.length !== 0) {
        ValidatePostalCode(postalCode, prefix);
    } else {
        if ($("#AddressInfo_PostalCode-error").is(':visible')) {
            var element = $("#" + prefix + "_PostalCode");
            var message = element.siblings("#InvalidZipCode");
            message.css("display", "none");
        }
    }
}

function PopulateAddressByPostalCode(postalCode, prefix) {

    var citiesSelect = $('#' + prefix + '_City');
    var statesSelect = $('#' + prefix + '_State');
    clearDropdown(prefix + '_City', false);
    clearDropdown(prefix + '_State', false);

    jQuery.support.cors = true;
    $.ajax({
        url: "/contract/api/address/getAddressDataFromPostalCode",
        type: "get",
        data: {
            zipCode: postalCode,
            locale: AddressInfo.Locale
        },
        dataType: "text",
        contentType: "application/json; charset=utf-8",
        async: false,
        success: function (data) {
            var response = JSON.parse(data);
            if (response.length > 0) {
                $.each(response,
                    function (index) {
                        var cityValue = response[index].city.replace(/ /g, "_");
                        citiesSelect.append('<option value=' + cityValue + '>' + response[index].city + '</option>');
                        var statesvalue = response[index].state.replace(/ /g, "_");
                        statesSelect.append('<option value=' + statesvalue + '>' + response[index].state + '</option>');
                    });
                ZipCodeValidationBehavior(true, prefix);
            } else {
                ZipCodeValidationBehavior(false, prefix);
            }

            RemoveEqualSelects(prefix, ['State', 'City']);
            var cityIDDropdown = prefix + "_City";
            var lengthCity = $("#" + cityIDDropdown + " > option").length;
            if (lengthCity === 2) {
                $("#" + cityIDDropdown + " option:eq(1)").attr("selected", 'selected');
            } else {
                $("#" + cityIDDropdown + " option:eq(0)").attr("selected", "selected");
            }

            var stateIDDropdown = prefix + "_State";
            var lengthState = $("#" + stateIDDropdown + " > option").length;
            if (lengthState === 2) {
                $("#" + stateIDDropdown + " option:eq(1)").attr("selected", 'selected');
            } else {
                $("#" + stateIDDropdown + " option:eq(0)").attr("selected", "selected");
            }

            citiesSelect.removeAttr('disabled');
            statesSelect.removeAttr('disabled');

            statesSelect.trigger("change");
            citiesSelect.trigger("change");
        },
        error: function (jqXHR, textStatus, err) {
            citiesSelect.removeAttr('disabled');
            statesSelect.removeAttr('disabled');
        }
    });

    return false;
}

function PopulateStateByPostalCode(postalCode, prefix) {
    var method = GetMethodName(postalCode);
    var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Address/' + method;
    jQuery.support.cors = true;
    var citiesSelect = $('#' + prefix + '_City');
    clearDropdown(prefix + '_City', true);
    $.ajax({
        url: uri,
        type: 'GET',
        dataType: 'text',
        contentType: 'application/json; charset=utf-8',
        async: false,
        success: function (data) {
            var response = JSON.parse(data);
            $.each(response,
                function (index) {
                    var cityValue = response[index].city.replace(/ /g, "_").replace(/'/g, '&#39;');
                    citiesSelect.append('<option value=' + cityValue + '>' + response[index].city + '</option>');
                });

            var idDropdown = prefix + "_City";
            var length = $("#" + idDropdown + " > option").length;
            if (length === 2) {
                $("#" + idDropdown + " option:eq(1)").attr("selected", 'selected');
            } else {
                $("#" + idDropdown + " option:eq(0)").attr("selected", "selected");
            }

            RemoveEqualSelects(prefix, ['State', 'City']);
            citiesSelect.removeAttr('disabled');
        },
        error: function (jqXHR, textStatus, err) {
            citiesSelect.removeAttr('disabled');
        }
    });

    return false;
}

function PopulateCityAndStateByPostalCode(postalCode, prefix) {

    var method = GetMethodName(postalCode);
    var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Address/' + method;
    jQuery.support.cors = true;
    var inputPostalCode = $('#' + prefix + '_PostalCode');
    var citiesSelect = $('#' + prefix + '_City');
    var statesField = $('#' + prefix + '_State');
    clearDropdown(prefix + '_City', true);

    if (isDropDown(statesField.prop('id'))) {
        clearDropdown(statesField.prop('id'), true);
    } else {
        statesField.val('');
    }

    $.ajax({
        url: uri,
        type: 'GET',
        dataType: 'text',
        contentType: 'application/json; charset=utf-8',
        async: false,
        success: function (data) {
            var response = JSON.parse(data);
            AddressInfo.GetStateAndCityFromZipCodeSuccess = !isEmpty(response) && response.length > 0;

            $.each(response,
                function (index) {
                    var cityValue = response[index].city.replace(/ /g, "_").replace(/'/g, '&#39;');
                    citiesSelect.append('<option value=' + cityValue + '>' + response[index].city + '</option>');

                    if (isDropDown(statesField.prop('id'))) {
                        var statesvalue = response[index].state.replace(/ /g, "_").replace(/'/g, '&#39;');
                        statesField.append('<option value=' + statesvalue + '>' + response[index].state + '</option>');
                    }
                    else {
                        statesField.val(response[index].state);
                    }
                });
            RemoveEqualSelects(prefix, ['State', 'City']);

            var cityIDDropdown = prefix + "_City";
            var lengthCity = $("#" + cityIDDropdown + " > option").length;
            if (lengthCity === 2) {
                $("#" + cityIDDropdown + " option:eq(1)").attr("selected", 'selected');
            } else {
                $("#" + cityIDDropdown + " option:eq(0)").attr("selected", "selected");
            }

            var stateIDDropdown = prefix + "_State";
            var lengthState = $("#" + stateIDDropdown + " > option").length;
            if (lengthState === 2) {
                $("#" + stateIDDropdown + " option:eq(1)").attr("selected", 'selected');
            } else {
                $("#" + stateIDDropdown + " option:eq(0)").attr("selected", "selected");
            }

            citiesSelect.removeAttr('disabled');
            statesField.removeAttr('disabled');
            inputPostalCode.valid();
        },
        error: function (jqXHR, textStatus, err) {
            citiesSelect.removeAttr('disabled');
            statesField.removeAttr('disabled');
            AddressInfo.GetStateAndCityFromZipCodeSuccess = false;
            inputPostalCode.valid();
        }
    });

    return AddressInfo.GetStateAndCityFromZipCodeSuccess;
}

function PopulateAddressByZipCodeEventHandler(prefix) {
    var postalCode = $("#" + prefix + "_PostalCode").val();
    var prefixComposed = "#" + prefix + "_";
    if (!isEmpty(postalCode) && postalCode.length > 0) {
        PopulateAddress(prefixComposed, postalCode);
    }

    return ValidateAddressEventHandler(prefix);
}

function PopulateAddress(prefix, postalCode) {
    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Address/PopulateByZipCode/" + postalCode.replace("-", "") + "/" + AddressInfo.CountryCode + "/" + AddressInfo.Locale;
    jQuery.support.cors = true;

    $.ajax({
        url: uri,
        type: "GET",
        dataType: "json",
        beforeSend: function () {
            if (AddressInfo.EnableBeforeSendToPopulateAddress === "True") {
                AddressInfo.SetFieldsReadOnly(true, prefix);
            }
        },
        success: function (data) {
            if (data !== null && data != undefined && data !== "" &&
                (!isEmpty(data.city) || !isEmpty(data.state) || !isEmpty(data.colony) || !isEmpty(data.address))) {

                // TFS Bug 571977 : Added for India ds signup . If addresses are populated via docextract api then
                // upon input postal code manually should not clear address values.
                if (!AddressInfo.IsDocExtractEnabledForAddressFields) {

                    $(prefix + "City").val(data.city);
                    $(prefix + "Colony").val(data.colony);
                    if (!isEmpty(data.line2) && !isEmpty(data.line3)) {
                        $(prefix + "CityKatakana").val(data.line2);
                        $(prefix + "TownKatakana").val(data.line3);
                    }
                    if (AddressInfo.SetStateDropDownByText) {
                        $(prefix + "State option").each(function () {
                            if ($(this).text() == data.state) {
                                $(this).prop('selected', true);
                            } else {
                                $(this).removeAttr("selected");
                            }
                        });
                        //resetMySelectBox($(prefix + "State"));
                    } else
                    {
                        $(prefix + "State").val(data.state);
                    }

                    $(prefix + "City").valid();
                    $(prefix + "State").valid();
                    if ($(prefix + "Colony").val() !== undefined) {
                        $(prefix + "Colony").valid();
                    }

                    if (isEmpty(data.colony)) {
                        $(prefix + "Colony").removeAttr("readonly");
                    } else {
                        $(prefix + "Colony").val(data.colony);
                    }

                    if (isEmpty(data.address)) {
                        $(prefix + "AddressLine1").val("");
                        $(prefix + "AddressLine1").removeAttr("readonly");
                        $(prefix + "AddressLine1").focus();
                    } else {
                        $(prefix + "AddressLine1").val(data.address);
                        $(prefix + "AddressLine2").focus();
                        $(prefix + "AddressLine1").valid();
                    }
                } else {
                    // TFS Bug 571977 : change in postal code for india ds signup flow when docextrcat enabled.
                    var originalPostalCode = $(prefix + "PostalCode").data('originalPostalCode');
                    if (!isEmpty(originalPostalCode) && originalPostalCode !== $(prefix + "PostalCode").val()) {
                        $(prefix + "City").val(data.city);
                        $(prefix + "State").val(data.state);
                    } else {
                        if (isEmpty($(prefix + "City").val())) {
                            $(prefix + "City").val(data.city);
                        }
                        if (isEmpty($(prefix + "State").val())) {
                            $(prefix + "State").val(data.state);
                        }
                    }
                }

                ZipCodeValidationBehavior(true, prefix);
            } else {
                if (!AddressInfo.IsDocExtractEnabledForAddressFields) {
                    AddressInfo.ResetFieldsAndBlock(prefix);
                } else {
                    // TFS Bug 571977 : Added for India ds signup . If addresses are populated via docextract api then
                    // upon input postal code manually should not clear address values.
                    ZipCodeValidationBehavior(false, prefix);
                }
            }
        },
        error: function (jqXhr, textStatus, err) {
            AddressInfo.ResetFieldsAndBlock(prefix);
        }
    });

    return false;
}

function ValidatePostalCode(postalCode, prefix) {
    switch (AddressInfo.CountryCode.toUpperCase()) {
        case 'GB':
            var isValid = false;
            var reZip = new RegExp(/(^[a-zA-Z]{2}[0-9]{3}[a-zA-Z]{2}$)/);
            isValid = reZip.test(postalCode);
            reZip = new RegExp(/(^[a-zA-Z]{2}[0-9][a-zA-Z][0-9][a-zA-Z]{2}$)/);
            isValid = isValid != true ? reZip.test(postalCode) : isValid;
            reZip = new RegExp(/(^[a-zA-Z][0-9][a-zA-Z][0-9][a-zA-Z]{2}$)/);
            isValid = isValid != true ? reZip.test(postalCode) : isValid;
            reZip = new RegExp(/(^[a-zA-Z][0-9]{3}[a-zA-Z]{2}$)/);
            isValid = isValid != true ? reZip.test(postalCode) : isValid;
            reZip = new RegExp(/(^[a-zA-Z]{2}[0-9]{2}[a-zA-Z]{2}$)/);
            isValid = isValid != true ? reZip.test(postalCode) : isValid;
            reZip = new RegExp(/(^[a-zA-Z][a-zA-Z0-9]{2}[a-zA-Z]{2}$)/);
            isValid = isValid != true ? reZip.test(postalCode) : isValid;

            ZipCodeValidationBehavior(
                isValid
                && postalCode.toUpperCase() != 'GX111AA',
                prefix
            );
            break;
        case 'FR':
            ZipCodeValidationBehavior(postalCode.length >= 5, prefix);
            break;
        default:
            return false;
    }
}

function GetMethodName(postalCode) {

    var methodName = 'GetStateAndCityForZipCode' + '/' + postalCode + '/' + AddressInfo.CountryCode;
    var postalCodesStr = AddressInfo.MailingSpecialPostalCodes;

    if (postalCodesStr != '') {
        var postalCodesRanges = postalCodesStr.split(';');

        $.each(postalCodesRanges, function (index, code) {
            var minValPostalCode = code.split('-')[0];
            var maxValPostalCode = code.split('-')[1];

            if (postalCode >= minValPostalCode
                && postalCode <= maxValPostalCode) {

                methodName = 'GetStateAndCityForSpecialZipCode' + '/' + postalCode + '/' + AddressInfo.CountryCode + '/' + AddressInfo.Locale;
                return false;
            }
        });
    }
    return methodName;
}

AddressInfo.ResetFieldsAndBlock = function (prefix) {
    $(prefix + "City").val("");
    if (AddressInfo.SetStateDropDownByText) {
        $(prefix + "State option").each(function () {
            $(this).removeAttr("selected");
        });
    } else {
        $(prefix + "State").val("");
    }
    $(prefix + "Colony").val("");
    $(prefix + "AddressLine1").val("");
    $(prefix + "AddressLine2").val("");
    ZipCodeValidationBehavior(false, prefix);
    if (AddressInfo.BlockNullAddress) {
        AddressInfo.SetFieldsReadOnly(true, prefix);
    }
}

AddressInfo.SetFieldsReadOnly = function (readonly, prefix) {

    var subFixes = ["City", "State", "Colony", "AddressLine1"];

    $.each(subFixes, function (index, field) {

        if (readonly) {
            $(prefix + field).attr("readonly", "readonly");
        } else {
            $(prefix + field).removeAttr("readonly");
        }

        $(field).attr("disabled", true);
        $(field).addClass("enabled");
    });
}

function ZipCodeValidationBehavior(isValid, prefix) {
    prefix = prefix.replace(/[#_]/g, '');
    var element = $("#" + prefix + "_PostalCode");
    var message = AddressInfo.DisplayZipWarningMessage ? element.siblings("#InvalidZipCodeWarning") : element.siblings("#InvalidZipCode");
    var elementzipcode = $("#" + prefix + "_PostalCode");
    if (isValid || $("#AddressInfo_PostalCode-error").is(':visible')) {
        message.css("display", "none");
        PersonalInfo.IsValidZipCode = "True";
    }
    else {
        if (AddressInfo.HasZipCodeInvalidMessage === 'True') {
            message = elementzipcode.siblings("#InvalidZipCode");
            message.css("display", "block");
        }
        //element.focus();
        message.css("display", "block");
        if (!AddressInfo.DisplayZipWarningMessage)
        {
            PersonalInfo.IsValidZipCode = "False";
        }
    }
}

AddressInfo.ShippingMethodsEventHandler = function (useSameAsResidential) {

    if (useSameAsResidential === undefined) {
        useSameAsResidential = false;
    }

    var state = isEmpty($("#ShippingAddress_State").val()) ? "empty" : $("#ShippingAddress_State").val();
    var city = isEmpty($("#ShippingAddress_City").val()) ? "empty" : $("#ShippingAddress_City").val();
    var colony = isEmpty($("#ShippingAddress_Colony").val()) ? "empty" : $("#ShippingAddress_Colony").val();
    var postalCode = isEmpty($("#ShippingAddress_PostalCode").val()) ? "empty" : $("#ShippingAddress_PostalCode").val();

    if (AddressInfo.UseShippingHandler === 'True') {

        var currentState = useSameAsResidential ? AddressInfo.State : state;
        var currentCity = useSameAsResidential ? AddressInfo.City : city;
        var currentPostalCode = useSameAsResidential ? AddressInfo.PostalCode : postalCode;
        var currentColony = useSameAsResidential ? AddressInfo.Colony : colony;

        if (HmpInfo.PostalCode != undefined && AddressInfo.PostalCode !== HmpInfo.PostalCode && HmpInfo.PostalCode.length > 0) {
            currentState = useSameAsResidential ? HmpInfo.State : state;
            currentCity = useSameAsResidential ? HmpInfo.City : city;
            currentColony = useSameAsResidential ? HmpInfo.Colony : colony;
            currentPostalCode = useSameAsResidential ? HmpInfo.PostalCode : postalCode;
        }

        if (AddressInfo.UseShippingAlternative === 'True') {
            GetShippingAlternatives(currentPostalCode);
        }
        else {
            GetShippingMethods(currentState, currentCity, currentColony, currentPostalCode);
        }
    }
    return false;
}

AddressInfo.CityEventHandler = function (prefix) {
    var city = $("#" + prefix + "_City option:selected").text();
    var stateText = $("#" + prefix + "_State option:selected").text();
    if (isEmpty(stateText)) {
        stateText = AddressInfo.State;
    }
    if (isEmpty(stateText)) {
        stateText = "empty";
    }

    if (isEmpty(city)) {
        city = "empty";
    }
    var viewName = "";
    if (AddressInfo.PopulateStatesByCity === "True") {
        AddressInfo.GetStatesByCity(AddressInfo.CountryCode, city, prefix, "", false);
    }
    if (AddressInfo.PopulateColonies === "True") {
        if (($("#ShippingAddress_SectionRequired").val() === "true" || $("#ShippingAddress_SectionRequired").val() === "True") && AddressInfo.CountryCode === "BO") {
            viewName = "Shipping";
        }
        AddressInfo.GetColoniesByStateAndCity(AddressInfo.CountryCode + viewName, stateText, city, prefix, "", false);
    }
    if (AddressInfo.PopulateZipCode === "True" && (AddressInfo.PopulateColonies !== "True" || AddressInfo.IsColonyOptional === "True") && AddressInfo.PopulateProvinces !== "True") {

        AddressInfo.GetZipCodeByStateCity(AddressInfo.CountryCode, stateText, city, prefix, "", true);
    }
    if (HmpInfo.HasSpecialRuleSKU == "True") {
        checkSpecialSKU();
    }
    return false;
}

AddressInfo.DistrictEventHandler = function (prefix) {
    var city = $("#" + prefix + "_City option:selected").text();
    var stateText = $("#" + prefix + "_State option:selected").text();

    if (AddressInfo.IsDistrictEnabled) {
        AddressInfo.GetDistrictsByCityAndState(AddressInfo.Locale, city, stateText, prefix, "", false);
    }

    if (AddressInfo.PopulateZipCode === "True" && AddressInfo.PopulateStates === "False") {
        AddressInfo.GetZipCodeByStateCity(AddressInfo.CountryCode, stateText, city, prefix, "", true);
    }

    if (HmpInfo.HasSpecialRuleSKU == "True") {
        checkSpecialSKU();
    }
    return false;
}

AddressInfo.SubdistrictEventHandler = function (prefix) {

    var districtText = $("#" + prefix + "_District option:selected").text();
    var cityText = $("#" + prefix + "_City option:selected").text();
    var stateText = $("#" + prefix + "_State option:selected").text();

    if (AddressInfo.IsSubdistrictEnabled) {
        AddressInfo.GetSubdistrictByDistrictCitiesAndState(AddressInfo.Locale, cityText, stateText, districtText, prefix, "", false);
    }
    if (HmpInfo.HasSpecialRuleSKU == "True") {
        checkSpecialSKU();
    }
    return false;
}

AddressInfo.ZipCodeBySubdistrictEventHandler = function (prefix) {

    var subdistrictText = $("#" + prefix + "_Subdistrict option:selected").text();
    var districtText = $("#" + prefix + "_District option:selected").text();
    var cityText = $("#" + prefix + "_City option:selected").text();
    var stateText = $("#" + prefix + "_State option:selected").text();

    if (AddressInfo.IsSubdistrictEnabled && AddressInfo.PopulateStates === "True" && AddressInfo.PopulateZipCode === "True") {
        AddressInfo.GetZipCodeBySubdistrictDistrictCitiesAndState(AddressInfo.Locale, cityText, stateText, districtText, subdistrictText, prefix, "", false);
    }
    if (HmpInfo.HasSpecialRuleSKU == "True") {
        checkSpecialSKU();
    }
    return false;
}

AddressInfo.StreetEventHandler = function (prefix) {
    var stateText = $("#" + prefix + "_State option:selected").text();
    var city = $("#" + prefix + "_City option:selected").text();
    var streetType = $("#" + prefix + "_Colony option:selected").text();
    var street = $("#" + prefix + "_AddressLine1").val();

    if (AddressInfo.PopulateStreet === "True") {
        AddressInfo.GetZipCodeByStateCityColonyStreetType(AddressInfo.CountryCode, stateText, city, streetType, street, prefix, "select", true);
    }
}

AddressInfo.ColonyEventHandler = function (prefix) {
    var stateText = $("#" + prefix + "_State option:selected").text();
    var city = $("#" + prefix + "_City option:selected").text();
    var colony = $("#" + prefix + "_Colony option:selected").text();

    if (AddressInfo.PopulateColonies === "False" || AddressInfo.IsColonyOptional === "True") {
        return false;
    }

    if (stateText.length <= 0) {
        stateText = "empty";
    }

    if (city.length <= 0) {
        city = "empty";
    }

    if (colony.length <= 0) {
        colony = "empty";
    }

    if (AddressInfo.PopulateZipCode === "True") {

        if (AddressInfo.PopulateStreetBySteps === "True") {
            AddressInfo.GetStreetDetailsPopulated(AddressInfo.CountryCode, stateText, city, prefix, "select", true);
        } else {
            AddressInfo.GetZipCodeByStateCityColony(AddressInfo.CountryCode, stateText, city, colony, prefix, "select", true);
        }
    }

    if (HmpInfo.HasSpecialRuleSKU == "True") {
        checkSpecialSKU();
    }
}

AddressInfo.StateEventHandler = function (prefix) {
    var city = $("#" + prefix + "_City option:selected").text();
    var stateText = $("#" + prefix + "_State option:selected").text();
    if (stateText.length <= 0) {
        stateText = "empty";
    }

    if (AddressInfo.IsLoadCityOnly !== "True") {
        var viewName = "";
        if (($("#ShippingAddress_SectionRequired").val() === "true" || $("#ShippingAddress_SectionRequired").val() === "True") && (AddressInfo.CountryCode === "BO" || AddressInfo.CountryCode === "AR")) {
            viewName = "Shipping";
        }
        if (AddressInfo.PopulateStatesByCity !== "True") {
            AddressInfo.GetCitiesByState(AddressInfo.CountryCode + viewName, stateText, prefix, "", true);
        } else { AddressInfo.GetZipCodeByStateCity(AddressInfo.CountryCode, stateText, city, prefix, "", false); }
    }

    if (HmpInfo.HasSpecialRuleSKU == "True") {
        checkSpecialSKU();
    }
    return false;
}

AddressInfo.ProvinceEventHandler = function (prefix) {
    var provinceText = $("#" + prefix + "_Province option:selected").val();
    if (provinceText !== undefined && provinceText !== "") {
        AddressInfo.GetZipCodeByStateCity(AddressInfo.CountryCode, provinceText, "", prefix, "", true);
    }
    else {
        clearDropdown(prefix + "_PostalCode", true);
    }
    return false;
}

function ValidateAddress(addressOne, city, state, postalCode, district, subdistrict) {
    if (state === undefined || state === "") {
        state = "NA";
    }

    if (city === undefined || city === "") {
        city = "NA";
    }

    if (postalCode === undefined || postalCode === "") {
        postalCode = "NA";
    }

    var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Address/Validate';
    var requestData = { 'AddressLine1': addressOne, 'City': city, 'State': state, 'PostalCode': postalCode, 'CountryCode': AddressInfo.CountryCode, 'Locale': AddressInfo.Locale, 'District': AddressInfo.District, 'Subdistrict': AddressInfo.Subdistrict };
    jQuery.support.cors = true;
    $.ajax({
        url: uri,
        type: 'Post',
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify(requestData),
        success: function (data) {
            var response = JSON.parse(data);
            if (response === true) {
                $("#InvalidAddress").css('display', 'none');
                PersonalInfo.IsValidAddress = 'True';
            }
            else {
                $("#InvalidAddress").css('display', '');
                PersonalInfo.IsValidAddress = 'False';
            }
        },
        error: function (jqXhr, textStatus, err) {
            $("#InvalidAddress").css('display', '');
            PersonalInfo.IsValidAddress = 'False';
        }
    });
    return false;
}

function BlockAddress(addressOne, city, state, postalCode) {
    if (state === undefined || state === "") {
        state = "NA";
    }

    if (city === undefined || city === "") {
        city = "NA";
    }

    if (postalCode === undefined || postalCode === "") {
        postalCode = "NA";
    }

    var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Address/Block';
    var requestData = { 'AddressLine1': addressOne, 'City': city, 'State': state, 'PostalCode': postalCode, 'CountryCode': AddressInfo.CountryCode, 'Locale': AddressInfo.Locale };
    jQuery.support.cors = true;
    $.ajax({
        url: uri,
        type: 'Post',
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify(requestData),
        success: function (data) {
            var response = JSON.parse(data);
            if (response === true) {
                $("#InvalidAddress").css('display', 'none');
                PersonalInfo.IsValidAddress = 'True';
            }
            else {
                $("#InvalidAddress").css('display', '');
                PersonalInfo.IsValidAddress = 'False';
            }
        },
        error: function (jqXhr, textStatus, err) {
            $("#InvalidAddress").css('display', '');
            PersonalInfo.IsValidAddress = 'False';
        }
    });
    return false;
}

function IsEqualExperianWithPrevRequest(request) {
    return JSON.stringify(request) === JSON.stringify(AddressInfo.PrevSuccessfulExperianRequest);
}

function ValidateAddressExperian(addressOne, addressTwo, city, state, postalCode, prefix, district, subdistrict) {
    if (state === undefined || state === "") {
        state = "NA";
    }

    if (city === undefined || city === "") {
        city = "NA";
    }

    if (postalCode === undefined || postalCode === "") {
        postalCode = "NA";
    }

    if (addressTwo === undefined || addressTwo === null) {
        addressTwo = "";
    }

    $("#loadingExperianValidation").css('display', '');

    var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Experian/ValidateAddress';
    var requestData = { 'AddressLine1': addressOne, 'AddressLine2': addressTwo, 'City': city, 'State': state, 'PostalCode': postalCode, 'CountryCode': AddressInfo.CountryCode, 'Locale': AddressInfo.Locale, 'District': AddressInfo.District, 'Subdistrict': AddressInfo.Subdistrict };
    if (IsEqualExperianWithPrevRequest(requestData)) {
        $("#loadingExperianValidation").css('display', 'none');
        return;
    }
    jQuery.support.cors = true;
    $.ajax({
        url: uri,
        type: 'Post',
        dataType: 'json',
        async: false,
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify(requestData),
        success: function (data) {
            AddressInfo.PrevSuccessfulExperianRequest = requestData;
            var response = JSON.parse(data);
            if (response === true) {
                $("#InvalidAddressExperian").css('display', 'none');
                $("#" + prefix + "_IsValidAddressOnExperian").val("True");
                AddressInfo.IsInvalidExperian = false;
            }
            else {
                $("#InvalidAddressExperian").css('display', '');
                $("#" + prefix + "_IsValidAddressOnExperian").val("False");
                AddressInfo.IsInvalidExperian = true;
            }
            $("#loadingExperianValidation").css('display', 'none');
        },
        error: function (jqXhr, textStatus, err) {
            $("#loadingExperianValidation").css('display', 'none');
            $("#InvalidAddressExperian").css('display', '');
            $("#" + prefix + "_IsValidAddressOnExperian").val("False");
            AddressInfo.IsInvalidExperian = false;
        }
    });
    return false;
}

function GetShippingMethods(state, city, county, postalCode) {

    /* Adding this to handle when user goes back from Payment Page > Shipping Page especially for locale ru-RU. The selected
       shipping method is initially set in behavior class ShipmentMethods.cs.  Without the below condition, javascript's GetShippingMethods( )
       wipes it out.  */
    if (AddressInfo.BypassInitialGetShippingMethodsCall) {
        AddressInfo.BypassInitialGetShippingMethodsCall = false;
        return false;
    }
    if (state === undefined || city === undefined || state === "" || city === "" || state === "empty" || city === "empty") {
        return false;
    }

    if (AddressInfo.PopulateZipCode !== "False" && (postalCode === undefined || postalCode === "" || postalCode === "empty")) {
        return false;
    }

    if (AddressInfo.ShowColonyByDefault  && (AddressInfo.PopulateColonies !== "False" && (county === undefined || county === "" || county === "empty"))) {
        return false;
    }

    if (!isEmpty(state) && state.includes("_")) {
        state = state.replace("_", " ");
    }

    if (!isEmpty(county) && county.includes("_")) {
        county = county.replace("_", " ");
    }

    if (!isEmpty(city) && city.includes("_")) {
        city = city.replace("_", " ");
    }

    jQuery.support.cors = true;
    $.ajax({
        url: "/contract/api/address/getShippingMethods",
        type: "get",
        data: {
            locale: AddressInfo.Locale,
            membershipType: AddressInfo.MembershipType,
            state: state,
            city: city,
            zipCode: postalCode,
            colony: county,
        },
        dataType: 'text',
        contentType: 'application/json; charset=utf-8',
        success: function (data) {
            var response = JSON.parse(data);

            if (isDropDown("ShippingAddress_ShippingMethodSelected")) {
                clearDropdown("ShippingAddress_ShippingMethodSelected", true);
                $.each(response,
                    function (index) {
                        if (AddressInfo.HasSelectOneForPostalCode != 'True' || response[index].Code != "") {
                            $("#ShippingAddress_ShippingMethodSelected").append(
                                String.format("<option value='{0}'>{1}</option>",
                                    response[index].Code,
                                    response[index].Name));
                            $("#ShippingAddress_ShippingMethodSelected").val("");
                        }
                    });
            } else {
                if (response.length < 1) {
                    $('#shippingmethodselected-error').css('display', 'block');
                    $("#ShippingAddress_ShippingMethodSelected").val("");
                }
                else {
                    $('#shippingmethodselected-error').css('display', 'none');
                    $.each(response, function (index) { $("#ShippingAddress_ShippingMethodSelected").val(response[index].Code); });
                    if ($("#ShippingAddress_ShippingMethodSelected").val() === "" && postalCode !== "") {
                        $('#shippingmethodselected-error').css('display', 'block');
                    }
                }
            }
        },
        error: function (jqXhr, textStatus, err) {
            //TODO error response
        }
    });
}

function GetShippingAlternatives(postalCode) {

    var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Address/GetShippingMethodsByZipCode/' + AddressInfo.CountryCode + '/' + postalCode;
    jQuery.support.cors = true;
    $.ajax({
        url: uri,
        type: 'GET',
        dataType: 'text',
        contentType: 'application/json; charset=utf-8',
        success: function (data) {
            var response = JSON.parse(data);
            var identifier = "ShippingAddress_ShippingMethodSelected";
            clearDropdown(identifier, true);
            $.each(response,
                function (index) {
                    $("#" + identifier).append(String.format("<option value='{0}'>{1}</option>", response[index].Code, response[index].Name));
                    $("#" + identifier).val("");
                });

            var defaultValue = response.length === 1 ? data : "";
            var length = $("#" + identifier + " > option").length;
            if (defaultValue !== "") {
                if (length === 2) {
                    $("#" + identifier + " option:eq(1)").attr("selected", 'selected');
                    if ($('#' + identifier + '-error').length !== 0) {
                        $("#" + identifier + "-error").remove();
                    }
                } else {
                    $("#" + identifier + " option:eq(0)").attr("selected", "selected");
                }
            }
            $("#ShippingAddress_ShippingMethodSelected").change();
        },
        error: function (jqXHR, textStatus, err) {
            //TODO error response
        }
    });
    return false;
}

AddressInfo.GetCitiesByState = function (countryCode, state, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Address/GetCitiesByState";
    
    var dropdowns = [prefix + "_City", prefix + "_District", prefix + "_Subdistrict", prefix + "_Colony", prefix + "_PostalCode"];
    disableDropdowns(dropdowns);
    clearDropdown(prefix + "_City", true);
    if (isDropDown(prefix + "_Colony")) {
        clearDropdown(prefix + "_Colony");
    }
    clearDropdown(prefix + "_PostalCode");
    clearDropdowns(dropdowns);
    jQuery.support.cors = true;

    $.ajax({
        url: uri,
        type: "GET",
        dataType: "text",
        data: {
            locale: AddressInfo.Locale,
            countryCode: countryCode,
            state: state
        },
        contentType: "application/json; charset=utf-8",
        async: isAsync,
        success: function (data) {

            var response = JSON.parse(data);
            clearDropdown(prefix + "_City", true);
            if (isDropDown(prefix + "_Colony")) {
                clearDropdown(prefix + "_Colony");
            }
            clearDropdown(prefix + "_PostalCode");
            if (AddressInfo.PopulateStreet === "True" || AddressInfo.PopulateStreet === true) {
                clearDropdown(prefix + "_AddressLine1");
            }

            fillDropdown("#" + prefix + "_City", response, defaultValue);

            enableDropdowns(dropdowns);
        },
        error: function (jqXhr, textStatus, err) {
            enableDropdowns(dropdowns);
        }
    });

    return false;
}

AddressInfo.GetStatesByCity = function (countryCode, cityName, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Address/GetStatesByCity";

    var dropdowns = [prefix + "_District", prefix + "_Subdistrict", prefix + "_Colony", prefix + "_PostalCode"];
    disableDropdowns(dropdowns);
    if (isDropDown(prefix + "_Colony")) {
        clearDropdown(prefix + "_Colony");
    }
    clearDropdown(prefix + "_PostalCode");
    clearDropdown(prefix + "_State", true);
    clearDropdowns(dropdowns);
    jQuery.support.cors = true;

    $.ajax({
        url: uri,
        type: "GET",
        dataType: "text",
        data: {
            locale: AddressInfo.Locale,
            countryCode: countryCode,
            cityName: cityName
        },
        contentType: "application/json; charset=utf-8",
        async: isAsync,
        success: function (data) {

            var response = JSON.parse(data);
            if (isDropDown(prefix + "_Colony")) {
                clearDropdown(prefix + "_Colony");
            }
            clearDropdown(prefix + "_PostalCode");
            if (AddressInfo.PopulateStreet === "True" || AddressInfo.PopulateStreet === true) {
                clearDropdown(prefix + "_AddressLine1");
            }

            fillDropdown("#" + prefix + "_State", response, defaultValue);

            enableDropdowns(dropdowns);
        },
        error: function (jqXhr, textStatus, err) {
            enableDropdowns(dropdowns);
        }
    });

    return false;
}

AddressInfo.GetDistrictsByCityAndState = function (locale, city, state, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Address/v2/GetDistrictsByCityAndState";

    var dropdowns = [prefix + "_District", prefix + "_Subdistrict", prefix + "_Colony", prefix + "_PostalCode"];
    clearDropdowns(dropdowns);

    disableDropdowns(dropdowns);

    //clearDropdown(prefix + "_PostalCode");
    jQuery.support.cors = true;

    $.ajax({
        url: uri,
        type: "GET",
        dataType: "text",
        data: {
            locale: locale,
            state: state,
            city: city
        },
        contentType: "application/json; charset=utf-8",
        async: isAsync,
        success: function (data) {

            var response = JSON.parse(data);

            clearDropdowns(dropdowns);
            if (AddressInfo.PopulateStreet === "True" || AddressInfo.PopulateStreet === true) {
                clearDropdown(prefix + "_AddressLine1");
            }

            fillDropdown("#" + prefix + "_District", response, defaultValue);

            enableDropdowns(dropdowns);
        },
        error: function (jqXhr, textStatus, err) {
            enableDropdowns(dropdowns);
        }
    });

    return false;
}

AddressInfo.GetSubdistrictByDistrictCitiesAndState = function (locale, city, state, district, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Address/v2/GetSubdistrictByCityAndState";

    var dropdowns = [prefix + "_Subdistrict", prefix + "_Colony", prefix + "_PostalCode"];
    clearDropdowns(dropdowns);

    disableDropdowns(dropdowns);

    //clearDropdown(prefix + "_PostalCode");
    jQuery.support.cors = true;

    $.ajax({
        url: uri,
        type: "GET",
        dataType: "text",
        data: {
            locale: locale,
            state: state,
            city: city,
            district: district
        },
        contentType: "application/json; charset=utf-8",
        async: isAsync,
        success: function (data) {

            var response = JSON.parse(data);

            clearDropdowns(dropdowns);
            if (AddressInfo.PopulateStreet === "True" || AddressInfo.PopulateStreet === true) {
                clearDropdown(prefix + "_AddressLine1");
            }

            fillDropdown("#" + prefix + "_Subdistrict", response, defaultValue);

            enableDropdowns(dropdowns);
        },
        error: function (jqXhr, textStatus, err) {
            enableDropdowns(dropdowns);
        }
    });

    return false;
}

AddressInfo.GetZipCodeBySubdistrictDistrictCitiesAndState = function (locale, city, state, district, subdistrict, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Address/v2/GetZipCodeBySubdistrictDistrictCityAndState";

    var dropdowns = [prefix + "_PostalCode"];
    clearDropdowns(dropdowns);

    disableDropdowns(dropdowns);

    jQuery.support.cors = true;

    $.ajax({
        url: uri,
        type: "GET",
        dataType: "text",
        data: {
            locale: locale,
            state: state,
            city: city,
            district: district,
            subdistrict: subdistrict
        },
        contentType: "application/json; charset=utf-8",
        async: isAsync,
        success: function (data) {

            var response = JSON.parse(data);

            if (AddressInfo.PopulateStreet === "True" || AddressInfo.PopulateStreet === true) {
                clearDropdown(prefix + "_AddressLine1");
            }

            fillDropdown("#" + prefix + "_PostalCode", response, defaultValue);

            enableDropdowns(dropdowns);
        },
        error: function (jqXhr, textStatus, err) {
            enableDropdowns(dropdowns);
        }
    });

    return false;
}

AddressInfo.GetColoniesByStateAndCity = function (countryCode, state, city, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Address/GetColonies";
    
    var dropdowns = [prefix + "_Colony", prefix + "_PostalCode"];
    disableDropdowns(dropdowns);
    clearDropdown(prefix + "_Colony", true);
    clearDropdown(prefix + "_PostalCode");
    if (AddressInfo.PopulateStreet === "True" || AddressInfo.PopulateStreet === true) {
        clearDropdown(prefix + "_AddressLine1");
    }
    jQuery.support.cors = true;

    $.ajax({
        url: uri,
        type: "POST",
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        async: isAsync,
        data: JSON.stringify({
            CountryCode: countryCode,
            State: state,
            City: city
        }),
        success: function (data) {
            var response = []
            if ((data) && (data.length && data[data.length - 1] != null)) {
                response = data;
            }
            if (response.length === 0 || response.some(function (item) { if (item === null) return true })) {//The statement response.some(element => element === null) was changed due IE incompatibilities
                $("#coloniesDrop").hide();
                if (AddressInfo.PopulateZipCode === "True") {
                    AddressInfo.GetZipCodeByStateCity(AddressInfo.CountryCode, state, city, prefix, "", false);
                }
                $("#" + prefix + "_PropertyRequired").val("False");
                return;
            }
            $("#" + prefix + "_PropertyRequired").val("True");
            $("#coloniesDrop").show();

            fillDropdown("#" + prefix + "_Colony", response, defaultValue);

            var length = $("#" + prefix + "_Colony > option").length;
            if (defaultValue === "") {
                var idDropdown = prefix + "_Colony";
                if (length === 2) {
                    $("#" + idDropdown + " option:eq(1)").attr("selected", 'selected');
                    $("#" + prefix + "_Colony").trigger("change");
                    if ($('#' + idDropdown + '-error').length !== 0) {
                        $("#" + idDropdown + "-error").remove();
                    }
                } else {
                    $("#" + idDropdown + " option:eq(0)").attr("selected", "selected");
                }
            }

            enableDropdowns(dropdowns);
        },
        error: function (jqXhr, textStatus, err) {
            enableDropdowns(dropdowns);
        }
    });

    return false;
}

AddressInfo.GetZipCodeByStateCity = function (countryCode, state, city, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = String.format("{0}//{1}/contract/api/Address/GetZipCodeByStateCity", window.location.protocol, window.location.host);
    GetZipCode(uri, prefix, defaultValue, isAsync, undefined, countryCode, city, state, null);
}

AddressInfo.GetZipCodeByStateCityColony = function (countryCode, state, city, colony, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = String.format("{0}//{1}/contract/api/Address/GetZipCodeByStateCityColony", window.location.protocol, window.location.host);
    GetZipCode(uri, prefix, defaultValue, isAsync, true, countryCode, city, state, colony);
}

AddressInfo.GetZipCodeByStateCityColonyStreetType = function (countryCode, state, city, streetType, street, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = String.format("{0}//{1}/contract/api/Address/GetZipCodeByStateCityColonyStreetType", window.location.protocol, window.location.host);
    GetZipCode(uri, prefix, defaultValue, isAsync, false, countryCode, city, state, null, streetType, street);
}

AddressInfo.GetStreetDetailsPopulated = function (countryCode, stateText, city, prefix, defaultValue, isAsync) {
    isAsync = isAsync || false;
    var uri = String.format("{0}//{1}/contract/api/Address/GetAddressDetailsPopulated?countryCode={2}&state={3}&city={4}", window.location.protocol, window.location.host, countryCode, stateText, city);
    GetAddressDetails(uri, prefix, defaultValue, isAsync, false);
}

function GetAddressDetails(uri, prefix, defaultValue, isAsync, isStreetType) {
    disableDropdowns([prefix + "_AddressLine1"]);
    clearDropdown(prefix + "_AddressLine1", true);
    jQuery.support.cors = true;
    $.ajax({
        url: uri,
        type: "GET",
        dataType: "text",
        contentType: "application/json; charset=utf-8",
        async: isAsync,
        success: function (data) {
            var response = JSON.parse(data);
            var idDropdown = "";
            idDropdown = prefix + "_AddressLine1";
            clearDropdown(idDropdown, true);
            fillDropdown("#" + idDropdown, response, "");
            enableDropdowns([prefix + "_AddressLine1"]);
        },
        error: function (jqXhr, textStatus, err) {
            enableDropdowns([prefix + "_AddressLine1"]);
        }
    });
    return false;
}

function GetZipCode(uri, prefix, defaultValue, isAsync, isStreetType, countryCode, city, state, colony, streetType, street) {
    if (isStreetType === undefined) {
        isStreetType = false;
    }

    disableDropdowns([prefix + "_PostalCode"]);
    clearDropdown(prefix + "_PostalCode", true);
    jQuery.support.cors = true;

    $.ajax({
        url: uri,
        type: "GET",
        dataType: "text",
        data: {
            countryCode,
            city,
            state,
            colony,
            streetType,
            street
        },
        contentType: "application/json;",
        async: isAsync,
        success: function (data) {
            var response = JSON.parse(data);
            var idDropdown = "";
            defaultValue = response.length === 1 ? data : "";
            if ((AddressInfo.PopulateStreet === "True" || AddressInfo.PopulateStreet === true) && isStreetType) {
                idDropdown = prefix + "_AddressLine1";
                clearDropdown(idDropdown, true);
                fillDropdown("#" + idDropdown, response, "");
            } else {
                idDropdown = prefix + "_PostalCode";
                clearDropdown(idDropdown, true);
                fillDropdown("#" + idDropdown, response, "");
            }

            var length = $("#" + prefix + "_PostalCode > option").length;
            if (defaultValue !== "") {
                idDropdown = prefix + "_PostalCode";
                if (length === 2) {
                    $("#" + idDropdown + " option:eq(1)").attr("selected", 'selected');
                    $("#" + prefix + "_PostalCode").trigger("change");
                    if ($('#' + idDropdown + '-error').length !== 0) {
                        $("#" + idDropdown + "-error").remove();
                    }
                } else {
                    $("#" + idDropdown + " option:eq(0)").attr("selected", "selected");
                }

                if (isEmpty(response[0])) {
                    if (AddressInfo.IsPostalCodeReadOnly && AddressInfo.EditableNullPostalCode) {
                        idDropdown = prefix + "_PostalCode";
                        $("#" + idDropdown).prop('readonly', false);
                    }
                } else if (AddressInfo.IsPostalCodeReadOnly) {
                    $("#" + idDropdown).attr('readonly', 'readonly');
                }
            }

            enableDropdowns([prefix + "_PostalCode"]);

            if (HmpInfo.HasSpecialRuleSKU == "True") {
                checkSpecialSKU();
            }
        },
        error: function (jqXhr, textStatus, err) {
            enableDropdowns([prefix + "_PostalCode"]);
        }
    });
    return false;
}

function IsPoBox(address, poBoxCsv) {
    if (!address) {
        return false;
    }

    if (!poBoxCsv) {
        return false;
    }

    var poBoxArray = poBoxCsv.trim().toLowerCase().split(",");
    address = address.replace(/\d+/g, ' ').replace(/[-\.,/()]/g, " ");
    var addressLoweCase = address.trim().toLowerCase();

    for (var i = 0; i < poBoxArray.length; i++) {
        if (poBoxArray[i] && poBoxArray[i] !== "") {

            if (addressLoweCase.replace(/ /g, "").indexOf(poBoxArray[i].replace(/./g, "").replace(/ /g, "")) > -1) {
                var addressArray = addressLoweCase.split(" ");
                var matchedWords = new Array();
                for (var j = 0; j < addressArray.length; j++) {
                    if (addressArray[j] && addressArray[j].trim() !== "") {
                        var localizationRule = poBoxArray[i].indexOf(addressArray[j].trim()) > -1;
                        if (localizationRule && jQuery.inArray(addressArray[j].trim(), matchedWords) < 0) {
                            matchedWords.push(addressArray[j].trim());
                        }
                    }
                }

                var result = false;
                if (matchedWords.length > 0) {
                    result = SimplePoBoxCompare(matchedWords, poBoxArray[i]);
                }

                if (!result && matchedWords.length > 1) {
                    for (var k = 0; k < matchedWords.length; k++) {
                        if (jQuery.inArray(matchedWords[k], poBoxArray) < 0) {
                            delete matchedWords[k];
                        }
                    }
                    result = SimplePoBoxCompare(matchedWords, poBoxArray[i]);
                }

                if (result)
                    return true;

                continue;
            }
        }
    }
    return false;
}

function SimplePoBoxCompare(matchedWords, stringToCompare) {
    var addressToCompare = matchedWords.join("");
    var poBoxToCompare = stringToCompare.replace(/ /g, "");
    return addressToCompare.trim() === poBoxToCompare.trim();
}

function clearDropdown(elementId, optionSelect) {

    var element = $("#" + elementId);
    if (isDropDown(elementId)) {
        var selectOneText = $('#' + elementId + ' > option').first().text();

        if (isEmpty(selectOneText) && !isEmpty(AddressInfo.DefaultSelect)) {
            selectOneText = AddressInfo.DefaultSelect;
        }

        element.empty();
        element.append('<option value="" selected>' + selectOneText + '</option>');


    } else if (isTextField(elementId)) {
        element.val("");
    }

}

function clearDropdowns(elementIds) {

    $.each(elementIds, function (index, elementId) {

        var element = $("#" + elementId);
        if (isDropDown(elementId)) {
            var selectOneText = $("#" + elementId + ' > option').first().text();

            if (isEmpty(selectOneText) && !isEmpty(AddressInfo.DefaultSelect)) {
                selectOneText = AddressInfo.DefaultSelect;
            }

            element.empty();
            element.append('<option value="" selected>' + selectOneText + '</option>');
        }
    });
}

function fillDropdown(elementId, data, defaultValue) {
    var element = $(elementId);
    $.each(data, function (index) {
        var value = data[index].replace(/ /g, "_");
        element.append(String.format("<option value={0}>{1}</option>", value, data[index]));
    });

    if (data && data.length == 1) {
        defaultValue = data[0].replace(/ /g, "_")
    }

    if (defaultValue !== "") {
        element.val(defaultValue);
        element.trigger('change');
        element.trigger('blur');
    }
}

function disableDropdowns(elementIds) {

    $.each(elementIds, function (index, elementId) {

        if (isDropDown(elementId)) {

            $("#" + elementId).prop("disabled", "disabled");
        }
    });
}

function postalCodeDisplayShippingMethod() {
    var postalCode = $("#ShippingAddress_PostalCode").val();
    var shipping = $("#ShippingMethod");
    var shippingSelect = $("#ShippingAddress_ShippingMethodSelected");
    var shippingOptions = $("input[name=shippingMethod]");
    var specialPostalCodes = AddressInfo.ShowShippingForPostalCode;
    var found = false;
    if (specialPostalCodes === "") {
        return;
    }
    var postalCodes = specialPostalCodes.split("|");
    if (postalCode != null) {
        $.each(postalCodes, function (index, code) {
            if (postalCode.toUpperCase().indexOf(code) === 0) {
                shipping.css('display', 'block');
                found = true;
                return false;
            }
        });
    }
    if (found) {
        $("#ShippingAddress_ShowShippingMethod").val("True");
        return;
    }
    shippingSelect.val("");
    $.each(shippingOptions,
        function (index) {
            shippingOptions[index].attributes("checked", "false");
        });

    shipping.css('display', 'none');
    $("#ShippingAddress_ShowShippingMethod").val("False");
}

function enableDropdowns(elementIds) {

    $.each(elementIds, function (index, elementId) {

        if (isDropDown(elementId)) {

            $("#" + elementId).removeAttr("disabled");
        }
    });
}

AddressInfo.FeatureFlagsInit = function () {
    jQuery.ajaxSetup({ async: false });
    FeatureFlags = $.get(window.location.protocol + "//" + window.location.host + "/contract/api/FeatureFlag/GetEnabledFeatures/" + AddressInfo.Locale);
    $.each(FeatureFlags.responseJSON, function (index, feature) {
        if (feature.FeatureName === "_State" && feature.IsEnabled === false) {
            AddressInfo.IsStateEnabled = false;
            if ($("#divState").length > 0) {
                $("#divState").remove();
            }
        }
        if (feature.FeatureName === "_City" && feature.IsEnabled === false) {
            AddressInfo.IsCityEnabled = false;
            if ($("#divCity").length > 0) {
                $("#divCity").remove();
            }
        }
        if (feature.FeatureName === "_District" && (AddressInfo.IsDistrictEnabled = feature.IsEnabled) === false) {
            AddressInfo.IsDistrictEnabled = false;
            if ($("#divDistrict").length > 0) {
                $("#divDistrict").remove();
            }
        }
        if (feature.FeatureName === "_Subdistrict" && feature.IsEnabled === false) {
            AddressInfo.IsSubdistrictEnabled = false;
            if ($("#divSubdistrict").length > 0) {
                $("#divSubdistrict").remove();
            }
        }

    });
    jQuery.ajaxSetup({ async: true });
}

function ValidateLocalAddress(elementId) {
    var elem = $(elementId);
    var value = elem.val().replace(/\\|\/|\?|\:|\#|\*|\./g, '|');
    if (value != "") {
        var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Address/ValidateLocalAddress/" + value;
        $.ajax({
            url: uri,
            type: "GET",
            dataType: "text",
            async: false,
            success: function (data) {
                var response = JSON.parse(data);
                if (response) {
                    if (elem.filter('[id$=City]').length > 0) {
                        $("#AddressInvalidCityLength").css("display", "none");
                    } else if (elem.filter('[id$=State]').length > 0) {
                        $("#AddressInvalidStateLength").css("display", "none");
                    }
                } else {
                    if (elem.filter('[id$=City]').length > 0) {
                        $("#AddressInvalidCityLength").css("display", "block");
                        PersonalInfo.IsValidLocalAddressCity = 'False';
                    } else if (elem.filter('[id$=State]').length > 0) {
                        $("#AddressInvalidStateLength").css("display", "block");
                        PersonalInfo.IsValidLocalAddressState = 'False';
                    }
                }
            },
            error: function (jqXhr, textStatus, err) {

            }
        });
    } else {
        if (elem.filter('[id$=City]').length > 0) {
            $("#AddressInvalidCityLength").css("display", "none");
        } else if (elem.filter('[id$=State]').length > 0) {
            $("#AddressInvalidStateLength").css("display", "none");
        }
    }
}

///filter same values in dropdowns
///based on https://stackoverflow.com/questions/23729456/how-to-remove-duplicate-dropdown-option-elements-with-same-value
function RemoveEqualSelects(prefix, dropdowns) {

    $.each(dropdowns, function (item, value) {
        if ($("#" + prefix + "_" + item) != null) {
            if (isDropDown(prefix + '_' + value)) {
                var usedNames = {};
                $("#" + prefix + "_" + value + " option").each(function () {
                    if (usedNames[this.value]) {
                        $(this).remove();
                    } else {
                        usedNames[this.value] = this.text;
                    }
                });
            }
        }
    });
}

function cleanAddressValues(prefix) {

    if (isTextField(prefix + "State")) {
        $('#' + prefix + 'State').val('');
    }
    if (isDropDown(prefix + "State")) {
        if (AddressInfo.PopulateAddressWithZipCode === "True"
            || AddressInfo.GetStateAndCityFromZipCode === "True"
            || AddressInfo.GetCityFromZipCode === "True") {
            clearDropdown(prefix + "State", true);
        }
        else if (AddressInfo.GetAddressDetailsFromPostalCode === "True") {
            clearDropdown(prefix + "State", false);
        }
        else {
            $('#' + prefix + 'State')[0].selectedIndex = 0;
        }
    }

    if (isDropDown(prefix + "AddressLine1")) {
        clearDropdown(prefix + "AddressLine1", false);
    }

    if (isTextField(prefix + "City")) {
        $('#' + prefix + 'City').val('');
    }
    if (isDropDown(prefix + "City")) {
        if (AddressInfo.GetAddressDetailsFromPostalCode === "True") {
            clearDropdown(prefix + "City", false);
        }
        else if (!AddressInfo.HasCities || (AddressInfo.PopulateCities === "True" && AddressInfo.IsLoadCityOnly !== "True")) {
            if (AddressInfo.PopulateStatesByCity !== "True") {
                clearDropdown(prefix + "City", true);
            }
        }
        else {
            $('#' + prefix + 'City')[0].selectedIndex = 0;
        }
    }

    if (isTextField(prefix + "Colony")) {
        $('#' + prefix + 'Colony').val('');
    }
    if (isDropDown(prefix + "Colony")) {
        clearDropdown(prefix + "Colony", true);
    }

    if (isTextField(prefix + "PostalCode")) {
        $('#' + prefix + 'PostalCode').val('');
    }
    if (isDropDown(prefix + "PostalCode")) {
        clearDropdown(prefix + "PostalCode", true);
    }


    var invalidAddressExperian = $('#InvalidAddressExperian');
    if (invalidAddressExperian) {
        invalidAddressExperian.css('display', 'none');
    }
}

function setReadOnlyForDynamicAddressFields(prefix)
{
    for (var fieldToTest in AddressInfo.RegexForDynamicReadOnlyAddressFields) {
        var fieldValue = $('#' + prefix + '_' + fieldToTest).val();

        for (var regexRule in AddressInfo.RegexForDynamicReadOnlyAddressFields[fieldToTest]) {
            AddressInfo.RegexForDynamicReadOnlyAddressFields[fieldToTest][regexRule].forEach(function (dynamicReadOnlyField) {
                var field = document.getElementById(prefix + '_' + dynamicReadOnlyField);

                field.readOnly = !(new RegExp(regexRule).test(fieldValue));
            });
        }
    }
}
;
var AccountInfo = {};

AccountInfo.IsPrimaryPhoneMobile = '';
AccountInfo.Locale = '';
AccountInfo.CountryCode = '';
AccountInfo.IsDuplicateEmail = '';
AccountInfo.IsDuplicateUserName = '';
AccountInfo.IsValidPin = '';
AccountInfo.InitialEmail = '';
AccountInfo.IsValidUserName = '';
AccountInfo.IsValidPassword = '';
AccountInfo.IsValidEmail = '';
AccountInfo.ValidateEmailOnExactTarget = '';
AccountInfo.PrefixToValidate = '';
AccountInfo.UserName = '';
AccountInfo.NotAllowedWords = '';
AccountInfo.IsLeadFlow = "False";
AccountInfo.HasRepeatedChars = "False";  

AccountInfo.Init = function () {
    AccountInfo.InitialEmail = $("#EmailAddressInfo_EmailAddress").val();
    AccountInfo.ValidateEmailOnExactTarget = $("#EmailAddressInfo_ValidateOnExactTarget").val();
    steps();

    $('#PinInfo_Pin').blur(function () {
        return ValidatePinEventHandler($(this).val());
    });

    $('#PinInfo_ConfirmationPin').blur(function () {
        ValidateConfirmationPinEventHandler($(this).val());
    });

    $('#UserAccountInfo_Password').blur(function () {
        return ValidatePasswordEventHandler($(this).val());
    });

    $('#UserAccountInfo_PasswordConfirmation').blur(function () {
        var Password = $("#UserAccountInfo_Password").val();
        var obj = $(this).val();
        if (obj == Password) {
            return ValidatePasswordEventHandler(Password);
        }

        return ValidateConfirmationPasswordEventHandler($(this).val());
    });
    $("#EmailAddressInfo_EmailAddress")
        .click(function () {
            $("#EmailAddressInfo_DuplicateEmail").css("display", "none");
            $("#EmailAddressInfo_EmailValidationFailed").css("display", "none");
            $("#EmailAddressInfo_InvalidEmail").css("display", "none");
        });
    $("#EmailAddressInfo_EmailAddress")
        .keypress(function (ev) {
            if (ev.keyCode === 13) {
                ev.preventDefault();
                $("#EmailAddressInfo_EmailAddress").closest("section").children(".editDone").children().click();
                $("#EmailAddressInfo_EmailAddress").blur();
                return false;
            }
        }
        );
    $('#isSecondCheckForDataPrivacy').on('change', SecondCheckForDataPrivacyChangeHandler);

    $("#GeneralInfoForm").on('submit', function () {
        if (AccountInfo.IsDuplicateEmail == 'True'
            || AccountInfo.IsValidPin == 'False'
            || AccountInfo.IsDuplicateUserName == 'True'
            || AccountInfo.IsValidEmail == 'False'
            || AccountInfo.IsValidUserName == 'False'
            || AccountInfo.IsValidPassword == 'False'
            || AccountInfo.HasRepeatedChars === "True") {
            return false;
        }
    });

    $('#MsgUserNameLenValidation').css("display", "none");
    $('#MsgUserNameExceededLenValidation').css("display", "none");
    var isValidRange = AccountInfo.UserName.length > 7 && AccountInfo.UserName.length < 33;
    if (!isValidRange && AccountInfo.UserName.length > 0) {
        //Show the message below the input
        if (AccountInfo.UserName.length < 8 && AccountInfo.UserName.length > 0)
            $('#MsgUserNameLenValidation').css("display", "block");
        else
            $('#MsgUserNameExceededLenValidation').css("display", "block");
    }

    if (AccountInfo.InitialEmail.length > 0) {
        $("#EmailAddressInfo_EmailAddress").blur();
        $("#EmailAddressInfo_EmailAddress").attr("readonly", "readonly");
    } 
    

    SocialMediaAcknowledge_function();
}

function SocialMediaAcknowledge_function() {

    if ($("#SocialMediaCheckboxSection").length > 0) {

        $("input[name='SocialMediaAcknowledge']").on('click', SocialMediaRequiredClicked);

        $("#nextStep").on('click', function () {

            var count_cbox_checked = $("#SocialMediaCheckboxSection > div > input:checkbox:checked").length;
            var total_cbox_div = $("#SocialMediaCheckboxSection > div > input:checkbox").length;
            var opt_socialmedia = $("input[name='SocialMediaAcknowledge']:checked").val();

            if (count_cbox_checked < total_cbox_div && opt_socialmedia == "Y") {
                $("#SocialMediaCheckbox_error").show();
            }
            else {
                $("#SocialMediaCheckbox_error").hide();
            }
        });

        SocialMediaRequiredClicked();
    }
}

function ValidatePinEventHandler(pin) {
    AccountInfo.IsValidPin = 'True'
    $('#PinInfo_InvalidPin').css('display', 'none');
    AccountInfo.IsValidPin = ValidatePin(pin);
    if ($("#PinInfo_ConfirmationPin").val()) {
        ValidateConfirmationPinEventHandler($("#PinInfo_ConfirmationPin").val());
    }
}

function ValidatePin(obj) {
    if (!obj) {
        $('#MsgPinReptCharsValidation').css("display", "none");
        $('#MsgPinConsecNumbersValidation').css("display", "none");
        $('#MsgPinLenValidation').css("display", "none");
        $('#MsgPinConfirmValidation').css("display", "none");
        return 'False';
    }
    var isValidLength = ValidatePinLength(obj);
    var isValidFormat = ValidatePinFormat(obj);
    if (isValidFormat && isValidLength) {
        return 'True';
    } else {
        return 'False';
    }
}
function ValidatePinFormat(obj) {
    var isConsecChars = ValidateRepeatedChars(obj);
    var isConsecNumbers = ValidatePinConsecNumbers(obj);
    var isValid = isConsecChars && isConsecNumbers;
    return isValid;
}
function ValidateRepeatedChars(obj) {
    $('#MsgPinReptCharsValidation').css("display", "none");
    var isValid = !/(.)\1\1/.test(obj);
    if (!isValid) {
        AccountInfo.HasRepeatedChars = "True";
        $('#MsgPinReptCharsValidation').css("display", "block");
    } else {
        AccountInfo.HasRepeatedChars = "False";
    }
    return isValid;
}

function ValidatePinConsecNumbers(obj) {
    $('#MsgPinConsecNumbersValidation').css("display", "none");
    var isValid = !/0(?=123)|1(?=234)|2(?=345)|3(?=456)|4(?=567)|5(?=678)|6(?=789)|7(?=8910)|8(?=91011)|9(?=876)|8(?=765)|7(?=654)|6(?=543)|5(?=432)|4(?=321)|3(?=210)/.test(obj);
    if (!isValid) {
        $('#MsgPinConsecNumbersValidation').css("display", "block");
    }
    return isValid;
}

function ValidatePinLength(obj) {
    $('#MsgPinLenValidation').css("display", "none");
    var isValidRange = obj.length > 5 && obj.length < 9;
    if (!isValidRange) {
        $('#MsgPinLenValidation').css("display", "block");
    }
    return isValidRange;
}

function ValidateConfirmationPinEventHandler(obj) {
    var pin = $("#PinInfo_Pin").val();
    if (obj != pin) {
        $('#MsgPinConfirmValidation').css("display", "block");
        AccountInfo.IsValidPin = 'False';
    }
    else {
        $('#MsgPinConfirmValidation').css("display", "none");
        AccountInfo.IsValidPin = ValidatePin(pin);
    }
    if (AccountInfo.IsValidPin == 'True' && $('#msgPinRules:not(.doNotHide)').length > 0) {
        $('#msgPinRules').slideUp();
    }
}

function ValidateUserName(obj) {
    if (!obj)
        return "False";
    var isValid = ValidateUserNameLength(obj);
    if (!isValid) {
        return "False";
    }
}

// Length Validation for Username
function ValidateUserNameLength(obj) {
    $('#MsgUserNameLenValidation').css("display", "none");
    $('#MsgUserNameExceededLenValidation').css("display", "none");
    var isValidRange = obj.length > 7 && obj.length < 33;
    if (!isValidRange) {
        //Show the message below the input
        if (obj.length < 8 && obj.length > 0)
            $('#MsgUserNameLenValidation').css("display", "block");
        else
            $('#MsgUserNameExceededLenValidation').css("display", "block");
    }
    return isValidRange;
}
// UserName Validation Ends

function ValidatePasswordEventHandler(Password) {
    AccountInfo.IsValidPassword = 'True'
    AccountInfo.IsValidPassword = ValidatePassword(Password);
    if (AccountInfo.IsValidPassword == 'True') {
        if ($("#UserAccountInfo_PasswordConfirmation").val()) {
            ValidateConfirmationPasswordEventHandler($("#UserAccountInfo_PasswordConfirmation").val());
        }
    }
}

function ValidatePassword(obj) {
    if (!obj)
        return 'False';
    var isValidLength = ValidatePasswordLength(obj);
    var isValidFormat = ValidatePasswordFormat(obj);
    if (isValidFormat && isValidLength) {
        return 'True';
    } else {
        return 'False';
    }
}
function ValidatePasswordFormat(obj) {
    var Numbers = ValidatePasswordNumbers(obj) ? 1 : 0;
    var UpperCase = ValidatePasswordUpperCaseLetters(obj) ? 1 : 0;
    var LowerCase = ValidatePasswordLowerCaseLetters(obj) ? 1 : 0;
    var Symbols = ValidatePasswordSymbol(obj) ? 1 : 0;

    var isValid = UpperCase + Numbers + LowerCase + Symbols;
    // A value of 3 of more means the requirements are accomplished.
    if (isValid > 2) {
        return true;
    }
    else {
        $('#MsgPasswordCharsValidation').css("display", "block");
        return false;
    }
}

// Numbers Validation
function ValidatePasswordNumbers(obj) {
    $('#MsgPasswordCharsValidation').css("display", "none");
    var isValid = /[0-9]+/.test(obj);

    return isValid;
}
// Upper Case Validation
function ValidatePasswordUpperCaseLetters(obj) {
    $('#MsgPasswordCharsValidation').css("display", "none");
    var isValid = /[A-Z]+/.test(obj);

    return isValid;
}
// Lower Case Validation
function ValidatePasswordLowerCaseLetters(obj) {
    $('#MsgPasswordCharsValidation').css("display", "none");
    var isValid = /[a-z]+/.test(obj);

    return isValid;
}
// Special Characters Validation
function ValidatePasswordSymbol(obj) {
    $('#MsgPasswordCharsValidation').css("display", "none");
    var isValid = /[!@#\$%\^\&*/|"\(\)\-\{\}\'\¿\+\.\;\:\_]+/.test(obj);
    return isValid;
}
// Ready Lenght Validation
function ValidatePasswordLength(obj) {
    $('#MsgPasswordLenValidation').css("display", "none");
    var isValidRange = obj.length > 7;
    if (!isValidRange) {
        $('#MsgPasswordLenValidation').css("display", "block");
    }
    return isValidRange;
}

function ValidateConfirmationPasswordEventHandler(obj) {

    var Password = $("#UserAccountInfo_Password").val();
    if (obj != Password) {
        $('#MsgPasswordConfirmValidation').css("display", "block");
        AccountInfo.IsValidPassword = 'False';
    }
    else {
        $('#MsgPasswordConfirmValidation').css("display", "none");
    }
}

//function validateRequiredSocialMedia() { 
//    var ischecked = $("input[class='checkAgreements']").is(':checked');
//    var hasValue = $("#SocialMediaAcknowledge").is(':checked'); 
//    if (ischecked == false && !hasValue) {
//        $("#RequiredSocialMedia").css("display", "block");  
//    } else {
//        $("#RequiredSocialMedia").css("display", "none"); 
//        $("#SocialMediaError").css("display", "none"); 
//    }
//}

function SocialMediaRequiredClicked() { 

    var val = $("#SocialMediaAcknowledge").is(':checked');

    if (val) { 
        $('#SocialMediaCheckboxSection').slideDown(); 
    } else {
        $("#SocialMediaCheckboxSection").hide(); 
      //  $('#previousHmpYes').slideUp();   
    }
}

function SecondCheckForDataPrivacyChangeHandler(e) {
    var checkBox = e.target;
    $(checkBox).valid();
    return false;
}

;
var Agreements = {};

Agreements.Init = function() {
    initEvents();
};

function initEvents() {
    $(".checkAgreements").change(CheckBoxChangeHandler);
}

function CheckBoxChangeHandler() {
    if (CheckIfInputsChecked()) {
        $("#modalAgreementExtraInfo").reveal();
    }
}

function CheckIfInputsChecked() {
    return $('.checkAgreements').length === $('.checkAgreements:checked').length;
};
var Payment = {};

Payment.HasValidCC = false;
Payment.TokenizedCC = "";
Payment.TokenSuccess = false;
Payment.UseTokenization = true;
Payment.DisableTokenization = false;
Payment.AuthToken = "";
Payment.WasNextButtonClicked = false;
Payment.CardDetectionEnabled = false;
Payment.LastCardType = "";
Payment.PaymentFormOnSubmit = function () {
    var hupPaymentCheck = $("#isHubSelected");

    if (hupPaymentCheck.is(":checked")) {
        return true;
    }
    if (!isExpirationDateEntered()) {
        return false;
    }

    Payment.WasNextButtonClicked = true;
    var validCard = ValidateCardIntregity();
    if (!Payment.HasValidCC || !validCard) {
        $("#InvalidPayment").css("display", "");
        return false;
    }

    if (PersonalInfo.IsValidAddress === "False"
        || PersonalInfo.IsValidZipCode === "False") {
        return false;
    }

    if ($(this).valid()) {
        var token = $("#CardInfo_TokenizedCardNumber").val();
        $("#CardInfo_CardNumber").val(token);
        $("#loadingDiv").show();
    }
}

Payment.Init = function () {
    steps();

    $("#PaymentForm").on("submit", Payment.PaymentFormOnSubmit)

    $("#addressOptions input:radio")
        .on("click",
            function () {
                return AddressOptionsEventHandler();
            });

    var cardInput = $("#CardInfo_SelectedCardType");

    var targetInput = $("option:selected", cardInput).attr("target-input");
    var customValue = $("option:selected", cardInput).val();

    var hubPaymentCheck = $("#isHubSelected");
    var CCCheck = $("#isCCPayment");
    var secctionRequired = $("#CardInfo_SectionRequired");
    var isHubPayment = $("#IsHubSelected");

    secctionRequired.val(!hubPaymentCheck.is(":checked"));
    isHubPayment.val(hubPaymentCheck.is(":checked"));

    if (targetInput) {
        var isReadOnly = customValue.trim() === "";
        $("#" + targetInput).attr("readonly", isReadOnly);
    }

    hubPaymentCheck.change(function () {
        var paymentForm = $("#paymentForm");
        var addressForm = $("#addressInfo");

        secctionRequired.val(!hubPaymentCheck.is(":checked"));
        isHubPayment.val(hubPaymentCheck.is(":checked"));
        if (hubPaymentCheck.is(":checked")) {
            paymentForm.css("display", "none");
            addressForm.css("display", "none");
        }
    });

    CCCheck.change(function () {
        var paymentForm = $("#paymentForm");
        var addressForm = $("#addressInfo");

        secctionRequired.val(CCCheck.is(":checked"));
        isHubPayment.val(!CCCheck.is(":checked"));
        if (CCCheck.is(":checked")) {
            paymentForm.css("display", "block");
            addressForm.css("display", "block");
        }
    });

    cardInput.change(function () {
        return CardTypeEventHandler();
    })

    $("#CardInfo_SelectedExpMonth, #CardInfo_SelectedExpYear").change(function () {
        isExpirationDateValid();
    });

    $("#BillingAddress_Selected").change(BillingAddressSelectedChangeEvent)

    $("#CardInfo_SelectedCardType option:selected").change();
    hubPaymentCheck.change();
    $("#CardInfo_CardNumber").val("");
}

function BillingAddressSelectedChangeEvent() {
    var valueSelected = $("#BillingAddress_Selected option:selected").val();
    if (valueSelected === "NewAddress") {
        $("#billingAddressInfo").slideDown();
        $("#BillingAddress_SectionRequired").val(true);
        $("#IsBillingANewAddress").val("True");
        $("#IsBillingSameAsShipping").val("False");
        $("#IsBillingSameAsMailing").val("False");
        Payment.SetValue("AddressLine1", "");
        Payment.SetValue("AddressLine2", "");
        Payment.SetValue("AddressLine3", "");
        Payment.SetValue("AddressLine4", "");
        Payment.SetValue("City", "");
        if (isTextField("BillingAddress_State")) {
            $("#BillingAddress_State").val("");
        }
        if (isDropDown("BillingAddress_State")) {
            $("#BillingAddress_State").val("");
        }
        Payment.SetValue("PostalCode", "");
        Payment.SetValue("CareOfName", "");
        Payment.SetValue("Colony", "");
    } else {
        $("#IsBillingANewAddress").val("False");
        $("#IsBillingSameAsShipping").val("False");
        $("#IsBillingSameAsMailing").val("False");
        $("#billingAddressInfo").slideUp();
        $("#BillingAddress_SectionRequired").val(false);
    }
}

/// <summary>
/// Handles the Credit Card Type's change event.
/// </summary>
function CardTypeEventHandler() {

    //Hide Errors
    $("#InvalidCardNumberDiv").css("display", "none");
    $("#InvalidTokenizationDiv").css("display", "none");

    //Get Control Objects
    var cardType = $("#CardInfo_SelectedCardType option:selected");
    var targetInput = cardType.attr("target-input");
    if (targetInput) {
        var cardNumber = $("#" + targetInput)
        cardNumber.val("");

        var isReadOnly = cardType.val().trim() === "";
        cardNumber.attr("readonly", isReadOnly);

        if (cardType.val().length > 0) {
            if (!isEmpty(cardType.attr("tin-config"))) {
                var config = JSON.parse(cardType.attr("tin-config"));

                if (config.mask) {
                    var mask = config.mask.split("&");

                    //Assign attributes to Card Input
                    //cardNumber.attr('maxlength', mask[0].length);
                    cardNumber.mask(mask[0], {
                        placeholder: config.maskPlaceholder,
                        clearIfNotMatch: true,
                        selectOnFocus: true
                    });

                    var cardCvv = $("#CardInfo_CcCvv");
                    cardCvv.val("");
                    //Assign attributes to security code input
                    cardCvv.attr("maxlength", mask[1].length);
                }

                if (!cardNumber.val()) {
                    return false;
                }
            }
        }
        else {
            cardNumber.mask("", {
                placeholder: " "
            });
        }
    }

    return true;
}

function ValidateCardIntregity() {
    var hubPaymentCheck = $("#isHubSelected");

    if (hubPaymentCheck.is(":checked")) {
        return true;
    }
    $("#InvalidCardNumberDiv").css("display", "none");

    if (Payment.WasNextButtonClicked) {
        $("#CardInfo_CardNumber").valid();
    }

    if (Payment.CardDetectionEnabled) {
        var selectedType = $("#CardInfo_SelectedCardType").val();
        if (isEmpty(selectedType)) {
            $("#InvalidCardNumberDiv").css("display", "block");
            return false;
        }
    }

    var isValid = true;
    var cardNumber = $("#CardInfo_CardNumber");
    var cardType = $("#CardInfo_SelectedCardType option:selected");
    var regex = cardType.attr("data-regex");

    cardNumber.val(cardNumber.val().replace(/-/g, ""));

    if (cardNumber.val().indexOf("XXXX") == -1) {
        if (!cardNumber.val().match(regex) || !ValidateLuhn(cardType.val(), cardNumber.val())) {
            isValid = false;
            $("#InvalidCardNumberDiv").css("display", "");
        }
    }

    if (isValid && Payment.DisableTokenization) {
        Payment.HasValidCC = true;
        Payment.TokenSuccess = true;
    } else if (isValid && Payment.UseTokenization) {
        Tokenize(cardNumber.val());
    }



    return isValid;
}

/// <summary>
/// Validates the luhn.
/// </summary>
/// <param name="card">The cardType.</param>
/// <param name="num">The numberCard.</param>
function ValidateLuhn(card, num) {
    var hubPaymentCheck = $("#isHubSelected");

    if (hubPaymentCheck.is(":checked")) {
        return true;
    }
    if ("AX!DI!JC!VI!MC".indexOf(card) == -1) {
        return true;
    }

    num = (num + "").replace(/\D+/g, "").split("").reverse();
    if (!num.length) {
        return false;
    }
    var total = 0, i;
    for (i = 0; i < num.length; i++) {
        num[i] = parseInt(num[i], 10)
        total += i % 2 ? 2 * num[i] - (num[i] > 4 ? 9 : 0) : num[i];
    }

    return (total % 10) == 0;
}

/// <summary>
/// Tokenizes the specified card number.
/// </summary>
/// <param name="cardNumber">The card number.</param>
function Tokenize(cardNumber) {
    var uri = window.location.protocol + "//" + window.location.host + "/cde/tokenizer.svc/gettoken";
    $.ajax(
        {
            type: "POST",
            url: uri,
            data: JSON.stringify({
                request: { AuthToken: Payment.AuthToken, CardNumber: cardNumber }
            }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            processdata: true,
            async: false,
            isLocal: false,
            success: function (msg) {
                ServiceSucceeded(msg);
            },
            error: ServiceFailed
        });

    ////local testing mockup for testing purposes
    //var successResponse = { "GetTokenResult": { "FailureReason": null, "Token": "4H58265476741111" } };
    //ServiceSucceeded(successResponse);
}

/// <summary>
/// Services the succeeded result from the tokenize ajax call.
/// </summary>
/// <param name="result">The result.</param>
function ServiceSucceeded(result) {
    try {
        var token = result.GetTokenResult.Token;
        var failed = result.GetTokenResult.FailureReason;
        var tokenSuccess = (token.length > 0 && null == failed);
        if (tokenSuccess) {
            Payment.HasValidCC = true;
            Payment.TokenSuccess = true;
            Payment.TokenizedCC = token;
            $("#CardInfo_TokenizedCardNumber").val(token);
        } else {
            $("#InvalidTokenizationDiv").css("display", "");
        }
    } catch (e) {
        Payment.HasValidCC = false;
        Payment.TokenSuccess = false;
        $("#InvalidTokenizationDiv").css("display", "");
    }
}

/// <summary>
/// Services the failed result from the tokenize ajax call.
/// </summary>
/// <param name="xhr">The XHR.</param>
function ServiceFailed(xhr) {
    Payment.HasValidCC = false;
    Payment.TokenSuccess = false;
    $("#InvalidTokenizationDiv").css("display", "");
}

/// <summary>
/// Handles the Address's options click event.
/// </summary>
function AddressOptionsEventHandler() {
    var valueSelected = $("#addressOptions input:radio:checked").val();
    if (valueSelected === "NewAddress") {
        $("#billingAddressInfo").css("display", "");
        $("#BillingAddress_SectionRequired").val(true);
        $("#IsBillingANewAddress").val("True");
        $("#IsBillingSameAsShipping").val("False");
        $("#IsBillingSameAsMailing").val("False");
        Payment.SetValue("AddressLine1", "");
        Payment.SetValue("AddressLine2", "");
        Payment.SetValue("AddressLine3", "");
        Payment.SetValue("AddressLine4", "");
        Payment.SetValue("City", "");
        if (isTextField("BillingAddress_State")) {
            $("#BillingAddress_State").val("");
        }
        if (isDropDown("BillingAddress_State")) {
            $("#BillingAddress_State").val("");
        }
        Payment.SetValue("PostalCode", "");
        Payment.SetValue("CareOfName", "");
        Payment.SetValue("Colony", "");
        $("#BillingAddress_City").find('option').not(':first').remove();
    }
    else if (valueSelected === "Shipping") {
        $("#billingAddressInfo").css("display", "none");
        $("#BillingAddress_SectionRequired").val(false);
        $("#InvalidAddress").css("display", "none");
        $("#IsBillingANewAddress").val("False");
        $("#IsBillingSameAsShipping").val("True");
        $("#IsBillingSameAsMailing").val("False");
        PersonalInfo.IsValidAddress = "True";
        PersonalInfo.IsValidZipCode = "True";
    }
    else if (valueSelected === "Mailing") {
        $("#billingAddressInfo").css("display", "none");
        $("#BillingAddress_SectionRequired").val(false);
        $("#InvalidAddress").css("display", "none");
        $("#IsBillingANewAddress").val("False");
        $("#IsBillingSameAsShipping").val("False");
        $("#IsBillingSameAsMailing").val("True");
        PersonalInfo.IsValidAddress = "True";
        PersonalInfo.IsValidZipCode = "True";
    }
}

Payment.SetValue = function (selector, value) {
    var item = $("#BillingAddress_" + selector);
    if (item) {
        item.val(htmlUnescape(value));
    }
}

/// <summary>
/// Determines whether [is expiration date valid].
/// </summary>
function isExpirationDateValid() {
    var hubPaymentCheck = $("#isHubSelected");

    if (hubPaymentCheck.is(":checked")) {
        return true;
    }

    $("#ExpirationDateRequiredDiv").hide();

    var year = $("#CardInfo_SelectedExpYear option:selected").val();
    var month = $("#CardInfo_SelectedExpMonth option:selected").val();
    var now = new Date();

    if (year !== "" && month !== "") {
        if (year < now.getFullYear() || (year == now.getFullYear() && month < now.getMonth() + 1)) {
            $("#InvalidExpirationDateDiv").show();
            Payment.HasValidCC = false;
        } else {
            $("#InvalidExpirationDateDiv").hide();
            Payment.HasValidCC = true;
        }
    }
}

/// <summary>
/// Determines whether [is expiration date entered].
/// </summary>
function isExpirationDateEntered() {

    var hubPaymentCheck = $("#isHubSelected");

    if (hubPaymentCheck.is(":checked")) {
        return true;
    }

    var year = $("#CardInfo_SelectedExpYear option:selected").val();
    var month = $("#CardInfo_SelectedExpMonth option:selected").val();

    if (year === "" || month === "") {
        $("#ExpirationDateRequiredDiv").show();
        return false;
    }
    return true;
}
Payment.CardDetection = function (types) {
     
    Payment.CardTypes = types;
    Payment.CardDetectionEnabled = true;
    Payment.CardDetectionLength = 2;

    $("#CardInfo_CardNumber").attr("readonly", false);

    $("#CardInfo_CardNumber").mask(
        "9999-9999-9999-9999",
        {
            placeholder: "",
            clearIfNotMatch: true,
            selectOnFocus: true
        }
    );
    $("#CardInfo_CardNumber").blur(function () { 
        var invalidType = $("#InvalidCardType");
        if (invalidType.is(":visible")) {
            $(this).val("");
        }  
    });
    $("#CardInfo_CardNumber").keyup(function () {
        var value = $(this).val();

        var curVal = value.replace(/\D/g, "");
        var selectedType = {};
        var type = "";

        $.each(Payment.CardTypes, function (key, cardType) {
            var regex = new RegExp(cardType.detectionRegex, "g");
            if (curVal.match(regex)) {
                selectedType = cardType;
                type = cardType.code;
            }
        });

        var invalidType = $("#InvalidCardType");

        if (!isEmpty(selectedType) && selectedType.isActive) {
             
            var image = "/Contract/Stuff/Global/Images/PaymentCard_" + type + ".png";

            $(".card-image").css("display", "block");

            $(".card-image").attr("src", image);

            $("#CardInfo_CardNumber").removeClass("increase-input");
            $("#CardInfo_CardNumber").addClass("reduce-input");

            $("#CardInfo_SelectedCardType").val(type);

            Payment.CardDetectionChange(type);

            if (invalidType.is(":visible")) {
                invalidType.hide();
            }

        } else {
             
            $(".card-image").css("display", "none");

            $("#CardInfo_CardNumber").removeClass("reduce-input");
            $("#CardInfo_CardNumber").addClass("increase-input");

            $("#CardInfo_SelectedCardType").val("");

            if (!isEmpty(value) && value.length > Payment.CardDetectionLength && !invalidType.is(":visible")) {
                $("#InvalidCardType").fadeIn();
            } else if (invalidType.is(":visible") && value.length <= Payment.CardDetectionLength && !selectedType.isActive) {
                    invalidType.hide();
            }
        }
    });
}

Payment.CardDetectionChange = function (type) {

    //Hide Errors
    $("#InvalidCardNumberDiv").css("display", "none");
    $("#InvalidTokenizationDiv").css("display", "none");

    //Get Control Objects

    var selectedCardType = {}; 
    $.each(Payment.CardTypes, function (key, cardType) {

        if (cardType.code === type && isEmpty(selectedCardType.code)) {
            selectedCardType = cardType;
        }
    });

    var cardNumber = $("#CardInfo_CardNumber");

    var cvv = $("#CardInfo_CcCvv");

    if (selectedCardType != Payment.LastCardType) { 
        Payment.LastCardType = selectedCardType;
        if (cvv.val() != "") {
            cvv.val("");
        }
    } 

    cardNumber.mask(selectedCardType.mask, {
        placeholder: selectedCardType.maskPlaceholder,
        clearIfNotMatch: true,
        selectOnFocus: true
    });

    cvv.mask(selectedCardType.cvvMask, {
        placeholder: "",
        clearIfNotMatch: true,
        selectOnFocus: true
    });  

};
'use strict'; 
var SponsorModule = (function () {
    var DOMElements = {};
    var SponsorInfo = {
        ErrSponsorInfo: "",
        ShowSponsorName: "False",
        SponsorInfoBlock: "",
        CountryCode: "",
        HasValidSponsor: "False",
        FullSponsorInfo: "",
        IsLeadFlow: "False",
        HasInvitationToken: "False",
        DisplaySponsorLocalName: "False",
        ReferralId: "",
        CurrentCountry: "",
        ThreeDigits: "",
        MembershipType: "",
        LastFourPhone: ""
    };

    function Init(IsLeadFlow, HasInvitationToken, ShowSponsorName, CountryCode, HasValidSponsor, DisplaySponsorLocalName, theeDigits, sponsorId, membershipType, lastFourPhone) {
        SponsorInfo.CurrentCountry = CountryCode;
        SponsorInfo.ReferralId = sponsorId;
        SponsorInfo.ThreeDigits = theeDigits;
        SponsorInfo.IsLeadFlow = IsLeadFlow;
        SponsorInfo.HasInvitationToken = HasInvitationToken;
        SponsorInfo.ShowSponsorName = ShowSponsorName;
        SponsorInfo.CountryCode = CountryCode;
        SponsorInfo.HasValidSponsor = HasValidSponsor;
        SponsorInfo.DisplaySponsorLocalName = DisplaySponsorLocalName;
        SponsorInfo.MembershipType = membershipType;
        SponsorInfo.LastFourPhone = lastFourPhone;
        CacheDOM();
        SetLeadFlow();
        BindingEvents();
    }


    function CacheDOM() {
        DOMElements.$SponsorInfo_SponsorId = $("#SponsorInfo_SponsorId");
        DOMElements.$SponsorIdTooltip = $("#SponsorIdTooltip");
        DOMElements.$SponsorLastNameTooltip = $("#msgSponsorLastName");
        DOMElements.$SponsorInfo_ThreeDigitsLastName = $("#SponsorInfo_ThreeDigitsLastName");
        DOMElements.$SponsorInfo_LastFourPhoneNumbers = $("#SponsorInfo_LastFourPhoneNumbers");
        DOMElements.$SponsorInfo_SponsorEmail = $("#SponsorInfo_SponsorEmail");
        DOMElements.$SponsorInfo_SponsorPhone = $("#SponsorInfo_SponsorPhone");
        DOMElements.$Error_InvalidSponsor = $("#InvalidSponsor");
        DOMElements.$Error_InvalidSponsorIdNameCombination = $("#InvalidSponsorIdNameCombination");
        DOMElements.$Error_SponsorIsNotallowedToSponsor = $("#SponsorIsNotallowedToSponsor");
        DOMElements.$Spinner_LoadingSponsor = $("#loadingSponsor");
        DOMElements.$DivSponsorInfo = $("#divSponsorInfo");
        DOMElements.$Link_thisIsNotLink = $("#thisIsNotLink");
        DOMElements.$SponsorInfo_ConditionedTinExists = $("#SponsorInfo_ConditionedTinExists");
        DOMElements.$Advise_ConditionedTinExistsMessage = $("#SponsorInfo_ConditionedTinExistsMessage");
        DOMElements.$DivReferralInfo = $("#divReferralInfo");
        DOMElements.$SponsorInfo_ReferralId = $("#SponsorInfo_ReferralId");
        DOMElements.$SponsorInfo_SponsorIdForReferral = $("#SponsorInfo_SponsorIdForReferral");
        DOMElements.$ReferralNameRetrieved = $("#ReferralNameRetrieved");
        DOMElements.$SponsorInfo_ReferralName = $("#SponsorInfo_ReferralName");
        DOMElements.$SponsorInfo_ReferralEmail = $("#SponsorInfo_ReferralEmail");
        DOMElements.$SponsorInfo_ReferralPhone = $("#SponsorInfo_ReferralPhone");
        DOMElements.$WrongSponsorLeadDetails = $("#WrongSponsorLeadDetails"); //not in Sponsor View
        DOMElements.$CurrentCountry = $("#CurrentCountry"); //not in Sponsor View
        DOMElements.$AllSponsorInputs = $("#AllSponsorInputs");
        DOMElements.$SectionSponsorInfo = $("section#sponsorInfo"); //not in Sponsor View
    }

    function BindingEvents() {
        DOMElements.$SponsorInfo_SponsorId.blur(IsValidateSponsor);
        DOMElements.$SponsorInfo_ThreeDigitsLastName.focus(sponsorLastnameFocusInEventHandler).blur(sponsorLastnameFocusOutToolTip);
        DOMElements.$SponsorInfo_LastFourPhoneNumbers.blur(ValidateSponsorJp);
        DOMElements.$SponsorInfo_SponsorId.keyup(CleanErrorsOnKeyUp);
        DOMElements.$SponsorInfo_ThreeDigitsLastName.keyup(CleanErrorsOnKeyUp);
        DOMElements.$SponsorInfo_LastFourPhoneNumbers.keyup(CleanErrorsOnKeyUp);
        DOMElements.$Link_thisIsNotLink.click(ThisIsNotMySponsor);

        if (DOMElements.$CurrentCountry.val() == "JP" && DOMElements.$SponsorInfo_SponsorId.val() && DOMElements.$SponsorInfo_LastFourPhoneNumbers.val()) {
            ValidateSponsorJp();
        }
        else {
            ValidateSponsor();
        }
    }
    function IsValidateSponsor() {
        var invalidSponsor = DOMElements.$Error_InvalidSponsor.prop("display");
        if (invalidSponsor !== undefined || invalidSponsor == "none") {
            ValidateSponsor();
        }
        DOMElements.$SponsorInfo_LastFourPhoneNumbers.focus();
        DOMElements.$SponsorInfo_ThreeDigitsLastName.focus();
    }

    function SetLeadFlow() {
        if (SponsorInfo.IsLeadFlow === "True" && SponsorInfo.HasInvitationToken === "False") {
            DOMElements.$SponsorInfo_SponsorId.attr("readonly", true);
            DOMElements.$SponsorInfo_ThreeDigitsLastName.attr("readonly", true);
            DOMElements.$SponsorInfo_LastFourPhoneNumbers.attr("readonly", true);
            DOMElements.$SectionSponsorInfo.hide();
        }

        if (SponsorInfo.IsLeadFlow === "True" && SponsorInfo.HasInvitationToken === "True") {
            DOMElements.$SponsorInfo_SponsorId.val(SponsorInfo.ReferralId);
            DOMElements.$SponsorInfo_ThreeDigitsLastName.val(SponsorInfo.ThreeDigits);
            DOMElements.$SponsorInfo_LastFourPhoneNumbers.val(SponsorInfo.LastFourPhone);
            DOMElements.$CurrentCountry.val(SponsorInfo.CurrentCountry);
        }
    }
    function CleanErrorsOnKeyUp() {
        var text = DOMElements.$SponsorInfo_SponsorId.val() + DOMElements.$SponsorInfo_LastFourPhoneNumbers.val() + DOMElements.$SponsorInfo_ThreeDigitsLastName.val();
        if (text !== SponsorInfo.FullSponsorInfo) {
            SponsorInfo.FullSponsorInfo = text;
            ClearErrorMessages();
        }
    }
    function ValidateSponsor() {
        var sponsorId = DOMElements.$SponsorInfo_SponsorId.val();
        var sponsorLastName = DOMElements.$SponsorInfo_ThreeDigitsLastName.val();
        var currentCountry = DOMElements.$CurrentCountry.val();
        var membership = SponsorInfo.MembershipType;
        if (sponsorLastName && sponsorLastName.length > 0
            && (sponsorId.length > 7 || sponsorId.toLowerCase() === "staff")
            && !DOMElements.$SponsorInfo_SponsorId.prop("readonly")) {
            DOMElements.$Spinner_LoadingSponsor.show();
            GetSponsorName(sponsorId, sponsorLastName, currentCountry, membership);
        }
        else {
            DOMElements.$Error_InvalidSponsorIdNameCombination.hide();
        }
    }

    function sponsorLastnameFocusOutToolTip() {
        ValidateSponsor();
        if (DOMElements.$SponsorLastNameTooltip.length > 0) {
            //wrapped in a timeout function so it triggers after focus event
            setTimeout(function () {
                if (DOMElements.$SponsorLastNameTooltip.is(':visible') && !$('input[id^=SponsorInfo][id$=ThreeDigitsLastName]').is(':focus')) {
                    DOMElements.$SponsorLastNameTooltip.slideUp();
                }
            }, 100);
            return true;
        }
        return false;
    }

    function sponsorLastnameFocusInEventHandler() {
        if (DOMElements.$SponsorLastNameTooltip.length > 0) {
            if (DOMElements.$SponsorLastNameTooltip.is(':hidden')) {
                DOMElements.$SponsorLastNameTooltip.slideDown();
                return true;
            }
        }
        return false;
    }


    function ValidateSponsorJp() {
        var sponsorId = DOMElements.$SponsorInfo_SponsorId.val();
        var sponsorLastFourPhoneNumbers = DOMElements.$SponsorInfo_LastFourPhoneNumbers.val();
        var currentCountry = DOMElements.$CurrentCountry.val();

        if (sponsorLastFourPhoneNumbers && sponsorLastFourPhoneNumbers.length > 0
            && (sponsorId.length > 7 || sponsorId.toLowerCase() === "staff")
            && !DOMElements.$SponsorInfo_SponsorId.prop("readonly")) {
            DOMElements.$Spinner_LoadingSponsor.show();
            GetSponsorNameJp(sponsorId, sponsorLastFourPhoneNumbers, currentCountry);
        }
        else {
            DOMElements.$Error_InvalidSponsorIdNameCombination.hide();
        }
    }
    function WriteResponse(sponsorName) {
        var showSponsorName = SponsorInfo.ShowSponsorName;
        var splits = sponsorName.split('|');
        var sponsorEmail;

        if (splits.length === 0)
            sponsorName = "";
        else {
            if (SponsorInfo.DisplaySponsorLocalName == "True") {
                if (splits.length === 10 && !isEmpty(splits[9]))
                    sponsorName = splits[9];
                else if (splits.length === 9 && !isEmpty(splits[8]))
                    sponsorName = splits[8];
                else {
                    sponsorName = splits[0];
                }
            }
            else {
                sponsorName = splits[0];
            }
        }
        var referral = {
            id: splits[3],
            email: splits[4],
            phone: splits[5],
            name: splits[6],
            sponsorId: splits[7],
            sponsorPhone: splits[8]
        };

        if (splits.length > 1) {
            sponsorEmail = splits[1];
        }

        if (splits.length > 2 && splits[2] === 'True') {
            DOMElements.$SponsorInfo_ConditionedTinExists.val("True");
            DOMElements.$Advise_ConditionedTinExistsMessage.css('display', '');
        }
        else {
            DOMElements.$SponsorInfo_ConditionedTinExists.val("False");
            DOMElements.$Advise_ConditionedTinExistsMessage.css('display', 'none');
        }
        toggleHmpOptionB();
        if ((!isEmpty(referral.id) && !isEmpty(referral.name)) || (SponsorInfo.CountryCode == "JP" && (!isEmpty(sponsorName)))) {

            if (!isEmpty(referral.id) && !isEmpty(referral.name)) {
                DOMElements.$DivReferralInfo.css("display", "block");
            }

            DOMElements.$SponsorInfo_ReferralId.val(referral.id);
            DOMElements.$SponsorInfo_SponsorIdForReferral.val(referral.sponsorId);
            DOMElements.$ReferralNameRetrieved.html('<h2>' + referral.name + '</h2>');
            DOMElements.$SponsorInfo_ReferralName.val(referral.name);
            DOMElements.$SponsorInfo_ReferralEmail.val(referral.email);
            DOMElements.$SponsorInfo_ReferralPhone.val(referral.phone);

            if (SponsorInfo.IsLeadFlow === "True" && SponsorInfo.HasInvitationToken === "True") {
                DOMElements.$SponsorInfo_SponsorId.attr("readonly", true);
                DOMElements.$SponsorInfo_ThreeDigitsLastName.attr("readonly", true);
                DOMElements.$SponsorInfo_LastFourPhoneNumbers.attr("readonly", true);
                DOMElements.$AllSponsorInputs.hide();
            }
        }

        DOMElements.$SponsorInfo_SponsorEmail.val('');
        
        if (sponsorName !== "Sponsor not Found" && sponsorName !== "Invalid combination" && sponsorName !== "" && sponsorName !== "Sponsor ID is not allowed to sponsor") {

            $('#SponsorNameRetrieved').html('<h2>' + sponsorName + '</h2>');
            var sponsorNameElement = $('#SponsorInfo_SponsorName');
            if (sponsorNameElement) {
                sponsorNameElement.val(sponsorName);
            }
            if (showSponsorName === "True") {
                SponsorInfo.HasValidSponsor = "True";
                DOMElements.$DivSponsorInfo.show();
                DOMElements.$Error_InvalidSponsor.hide();
                DOMElements.$Error_InvalidSponsorIdNameCombination.hide();
                DOMElements.$Error_SponsorIsNotallowedToSponsor.hide();
                $("#SponsorInfo_SponsorId-error").hide();
            }
            DOMElements.$SponsorInfo_SponsorId.attr("readonly", true);
            DOMElements.$SponsorInfo_ThreeDigitsLastName.attr("readonly", true);
            DOMElements.$SponsorInfo_LastFourPhoneNumbers.attr("readonly", true);
            DOMElements.$SponsorInfo_SponsorEmail.val(sponsorEmail);
            DOMElements.$SponsorInfo_SponsorPhone.val(referral.sponsorPhone);
        } else {
            DOMElements.$SponsorInfo_SponsorId.attr("readonly", false);
            DOMElements.$SponsorInfo_ThreeDigitsLastName.attr("readonly", false);
        }

        if (sponsorName === "Sponsor not Found") {
            SponsorInfo.HasValidSponsor = "False";
            DOMElements.$Error_InvalidSponsor.show();
        } else if (sponsorName === "Invalid combination") {
            SponsorInfo.HasValidSponsor = "False";
            DOMElements.$Error_InvalidSponsorIdNameCombination.show();
        } else if (sponsorName === "Sponsor ID is not allowed to sponsor") {
            SponsorInfo.HasValidSponsor = "False";
            DOMElements.$Error_SponsorIsNotallowedToSponsor.show();
        }


        if (SponsorInfo.IsLeadFlow === "True" && SponsorInfo.HasValidSponsor === "False") {
            DOMElements.$WrongSponsorLeadDetails.show();
        } else {
            DOMElements.$WrongSponsorLeadDetails.hide();
            //Only focus if invalid sponsor
            if (SponsorInfo.HasValidSponsor === "False") {
                DOMElements.$SponsorInfo_SponsorId.focus();
            }
        }
    }

    function GetSponsorName(sponsorId, lastNameThreeDigts, countryCode, membershipType) {
        ClearErrorMessages();
        var isReferraForUI = true;
        if (SponsorInfo.IsLeadFlow === "True"  && SponsorInfo.ReferralId !== undefined && SponsorInfo.ReferralId !== "") {
            isReferraForUI = false;
        }
        var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Sponsor/Validate';
        var requestData = { 'Sponsorid': sponsorId, 'lastNameThreeDigts': lastNameThreeDigts, 'CountryCode': countryCode, 'MembershipType': membershipType, 'isReferraForUI': isReferraForUI };
        jQuery.support.cors = true;
        $.ajax({
            url: uri,
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(requestData),
            success: function (data) {
                WriteResponse(data);
                DOMElements.$Spinner_LoadingSponsor.hide();
            },
            error: function (jqXHR, textStatus, err) {
                DOMElements.$SponsorInfo_SponsorId.attr("readonly", false);
                DOMElements.$SponsorInfo_ThreeDigitsLastName.attr("readonly", false);
                SponsorInfo.HasValidSponsor = "False";
                DOMElements.$Error_InvalidSponsor.show();
                DOMElements.$Spinner_LoadingSponsor.hide();
            },
            beforeSend: function () {
                DOMElements.$SponsorInfo_SponsorId.attr("readonly", true);
                DOMElements.$SponsorInfo_ThreeDigitsLastName.attr("readonly", true);
            }
        });
        return false;
    }

    function GetSponsorNameJp(sponsorId, LastFourPhoneNumbers, countryCode) {
        ClearErrorMessages();
        var isReferraForUI = true;
        if (SponsorInfo.IsLeadFlow === "True" && SponsorInfo.ReferralId !== undefined && SponsorInfo.ReferralId !== "") {
            isReferraForUI = false;
        }
        var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Sponsor/Validate';
        var requestData = { 'Sponsorid': sponsorId, 'LastFourPhoneNumbers': LastFourPhoneNumbers, 'CountryCode': countryCode, 'isReferraForUI': isReferraForUI };
        jQuery.support.cors = true;
        $.ajax({
            url: uri,
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(requestData),
            success: function (data) {
                WriteResponse(data);
                DOMElements.$Spinner_LoadingSponsor.hide();
            },
            error: function (jqXHR, textStatus, err) {
                DOMElements.$SponsorInfo_SponsorId.attr("readonly", false);
                DOMElements.$SponsorInfo_LastFourPhoneNumbers.attr("readonly", false);
                SponsorInfo.HasValidSponsor = "False";
                DOMElements.$Error_InvalidSponsor.show();
                DOMElements.$Spinner_LoadingSponsor.hide();

            }
        });
        return false;
    }
    function ClearErrorMessages() {
        DOMElements.$Error_InvalidSponsor.hide();
        DOMElements.$Error_InvalidSponsorIdNameCombination.hide();
        DOMElements.$Error_SponsorIsNotallowedToSponsor.hide();
    }

    function ThisIsNotMySponsor() {
        SponsorInfo.HasValidSponsor = "False";
        DOMElements.$DivSponsorInfo.hide();
        DOMElements.$SponsorInfo_SponsorId.attr("readonly", false).val("");
        DOMElements.$SponsorInfo_ThreeDigitsLastName.attr("readonly", false).val("");
        DOMElements.$SponsorInfo_LastFourPhoneNumbers.attr("readonly", false).val("");
        DOMElements.$SponsorInfo_SponsorPhone.val("");
        DOMElements.$SponsorInfo_SponsorEmail.val('');
        DOMElements.$SponsorInfo_ConditionedTinExists.val("False");
        DOMElements.$Advise_ConditionedTinExistsMessage.hide();
        toggleHmpOptionB();
        DOMElements.$DivReferralInfo.hide();
        DOMElements.$SponsorInfo_ReferralId.val("");
        DOMElements.$ReferralNameRetrieved.html("");
        DOMElements.$SponsorInfo_ReferralName.val("");
        DOMElements.$SponsorInfo_ReferralEmail.val("");
        DOMElements.$SponsorInfo_ReferralPhone.val("");
        DOMElements.$SponsorInfo_SponsorIdForReferral.val("");
        return false;
    }
    return {
        Init: Init,
        SponsorInfo: SponsorInfo,
        //TODO: remove exposure of the private methods below. exposed for unit testing.
        ValidateSponsor: ValidateSponsor,
        ValidateSponsorJp: ValidateSponsorJp,
        IsValidateSponsor: IsValidateSponsor,
        WriteResponse: WriteResponse,
        ThisIsNotMySponsor: ThisIsNotMySponsor,
        GetSponsorName: GetSponsorName,
        CleanErrorsOnKeyUp: CleanErrorsOnKeyUp,
        sponsorLastnameFocusInEventHandler: sponsorLastnameFocusInEventHandler,
        sponsorLastnameFocusOutToolTip: sponsorLastnameFocusOutToolTip,
        DOMElements: DOMElements
    };
})();;
var PersonalInfo = {};

PersonalInfo.IsPrimaryPhoneMobile = '';
PersonalInfo.Locale = '';
PersonalInfo.CountryCode = '';
PersonalInfo.ShouldValidatePhoneOnExperian = "False";
PersonalInfo.IsValidAddress = '';
PersonalInfo.IsValidZipCode = '';
PersonalInfo.HasTextLimits = 'False';
PersonalInfo.TextLimits = [];
PersonalInfo.IsCombinePhoneValidation = false;
PersonalInfo.DisplayPhoneCountryCode = 'False';
PersonalInfo.IsValidLocalAddressState = '';
PersonalInfo.IsValidLocalAddressCity = '';
PersonalInfo.SecondaryPhone = '';
PersonalInfo.SecondaryMustBeDifferentToPrimaryPhone = 'False';
PersonalInfo.ShowPrimaryPhoneIntoMobilePhone = 'False';

var PersonalInfoModule = (function () {
    var DOMElements = {};

    function Init() {
        CacheDom();
        BindingEvents();
        IsPrimaryMobilePhone();
        ShowPhoneNumber();
        SetPhoneAlignment();

        DOMElements.$InvalidPhoneExperian.css('display', 'none');
    }

    function CacheDom() {
        DOMElements.$PhoneInfoIsPrimaryMobileNumber = $('#PhoneInfo_IsPrimaryMobileNumber');
        DOMElements.$mobilePhone = $('#mobilePhone');
        DOMElements.$PersonalInfoForm = $('#GeneralInfoForm');
        DOMElements.$AddressInfoAddressLine1 = $('#AddressInfoAddressLine1');
        DOMElements.$AddressInfoAddressLine2 = $('#AddressInfoAddressLine2');
        DOMElements.$isPreviousMembershipRequiredCheck = $('#isPreviousMembershipRequiredCheck');
        DOMElements.$dateApplicationErrorMsg = $('#dateApplicationErrorMsg');
        DOMElements.$PreviousMembershipApplicationDay = $('#PreviousMembership_ApplicationDay');
        DOMElements.$PreviousMembershipApplicationMonth = $('#PreviousMembership_ApplicationMonth');
        DOMElements.$PreviousMembershipApplicationYear = $('#PreviousMembership_ApplicationYear');
        DOMElements.$dateLastActivityErrorMsg = $('#dateLastActivityErrorMsg');
        DOMElements.$PhoneInfoPrimaryPhone = $('#PhoneInfo_PrimaryPhone');
        DOMElements.$PhoneInfoPrimaryPhoneAreaCode = $('#PhoneInfo_PrimaryPhoneAreaCode');
        DOMElements.$PhoneInfoPrimaryPhoneTownCode = $('#PhoneInfo_PrimaryPhoneTownCode');
        DOMElements.$PhoneInfoPrimaryPhoneCountryCode = $('#PhoneInfo_PrimaryPhoneCountryCode');
        DOMElements.$PhoneInfoSecondaryPhoneAreaCode = $('#PhoneInfo_SecondaryPhoneAreaCode');
        DOMElements.$PhoneInfoSecondaryPhoneTownCode = $('#PhoneInfo_SecondaryPhoneTownCode');
        DOMElements.$PhoneInfoSecondaryPhone = $('#PhoneInfo_SecondaryPhone');
        DOMElements.$PhoneInfoSecondaryPhoneCountryCode = $('#PhoneInfo_SecondaryPhoneCountryCode');
        DOMElements.$PhoneInfoMobilePhoneAreaCode = $('#PhoneInfo_MobilePhoneAreaCode');
        DOMElements.$PhoneInfoMobilePhone = $('#PhoneInfo_MobilePhone');
        DOMElements.$PhoneInfoMobilePhoneCountryCode = $('#PhoneInfo_MobilePhoneCountryCode');
        DOMElements.$loadingPhoneExperianValidation = $('#loadingPhoneExperianValidation');
        DOMElements.$InvalidPhoneExperian = $('#InvalidPhoneExperian');
        DOMElements.$IsValidPhoneOnExperian = $('#PhoneInfo_IsValidPhoneOnExperian');
    }

    function BindingEvents() {
                

            if (PersonalInfo.IsCombinePhoneValidation) {
                //listening to form validate event
                $('form').addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();
            }

            DOMElements.$PhoneInfoIsPrimaryMobileNumber.on('change', ShowPhoneNumber);
            DOMElements.$PersonalInfoForm.on('submit', PersonalInfoOnSubmitEvent);
            if (PersonalInfo.HasTextLimits === 'True') {
                DOMElements.$AddressInfoAddressLine1.on('blur', HasInvalidTextsEvent);
                DOMElements.$AddressInfoAddressLine2.on('blur', HasInvalidTextsEvent);
            }


            DOMElements.$PhoneInfoPrimaryPhone.on('blur focus', function (e) {
                ResizePhoneNumberField(this, e.type);
                ValidatePhoneNumber();
            });

            DOMElements.$PhoneInfoPrimaryPhoneAreaCode.on('blur focus', function (e) {
                ResizePhoneAreaField(this, e.type);
            });

            DOMElements.$PhoneInfoPrimaryPhoneAreaCode.on('focusout', function (e) {
                DOMElements.$PhoneInfoPrimaryPhone.valid();
            });

            DOMElements.$PhoneInfoPrimaryPhoneTownCode.on('focusout', function (e) {
                DOMElements.$PhoneInfoPrimaryPhone.valid();
            });

            DOMElements.$PhoneInfoSecondaryPhoneAreaCode.on('focusout', function (e) {
                DOMElements.$PhoneInfoSecondaryPhone.valid();
            });

            DOMElements.$PhoneInfoSecondaryPhoneTownCode.on('focusout', function (e) {
                DOMElements.$PhoneInfoSecondaryPhone.valid();
            });

            if (PersonalInfo.SecondaryMustBeDifferentToPrimaryPhone === "True") {
                DOMElements.$PhoneInfoSecondaryPhone.on('input', function (e) {
                    ValidateSecondaryDifferentToPrimaryPhone();
                });
            }

            DOMElements.$PhoneInfoSecondaryPhone.on('blur focus', function (e) {
                ResizePhoneNumberField(this, e.type);
                ValidatePhoneNumber();
            });

            DOMElements.$PhoneInfoSecondaryPhoneAreaCode.on('blur focus', function (e) {
                ResizePhoneAreaField(this, e.type);
            });

            DOMElements.$PhoneInfoMobilePhone.on('blur focus', function (e) {
                ResizePhoneNumberField(this, e.type);
                ValidatePhoneNumber();
            });

            DOMElements.$PhoneInfoMobilePhoneAreaCode.on('blur focus', function (e) {
                ResizePhoneAreaField(this, e.type);
            });

            DOMElements.$PhoneInfoPrimaryPhone.elementValidAndInvalid(function (elem) {
                DisplayValidationMessage(elem);
            }, function (elem) {
                DisplayValidationMessage(elem);
            });

            DOMElements.$PhoneInfoPrimaryPhoneAreaCode.elementValidAndInvalid(function (elem) {
                DisplayValidationMessage(elem);
            }, function (elem) {
                DisplayValidationMessage(elem);
            });

            DOMElements.$PhoneInfoSecondaryPhone.elementValidAndInvalid(function (elem) {
                DisplayValidationMessage(elem);
            }, function (elem) {
                DisplayValidationMessage(elem);
            });

            DOMElements.$PhoneInfoSecondaryPhoneAreaCode.elementValidAndInvalid(function (elem) {
                DisplayValidationMessage(elem);
            }, function (elem) {
                DisplayValidationMessage(elem);
            });

            DOMElements.$PhoneInfoMobilePhone.elementValidAndInvalid(function (elem) {
                DisplayValidationMessage(elem);
            }, function (elem) {
                DisplayValidationMessage(elem);
            });

            DOMElements.$PhoneInfoMobilePhoneAreaCode.elementValidAndInvalid(function (elem) {
                DisplayValidationMessage(elem);
            }, function (elem) {
                DisplayValidationMessage(elem);
            });
         
    }

    function ResizePhoneAreaField(elem, event) {
        if (BasicInfo.HasTextDirectionRtl === 'False') {
            switch (event) {
                case "blur":
                    var val = $(elem).val();
                    if (val.length > 0 && val.length < 4) {
                        $(elem).parent().filter('[id^=phone-areacode]').css('width', val.length + 1 + 'ch');
                    }
                    break;
                case "focus":
                    $(elem).parent().filter('[id^=phone-areacode]').css('width', '50px');
                    break;
            }
        }
    }

    function ResizePhoneNumberField(elem, event) {
        if (BasicInfo.HasTextDirectionRtl === 'True') {
            switch (event) {
                case "blur":
                    var val = $(elem).val();
                    if (val.length > 0) {
                        $(elem).parent().filter('[id^=phone-number]').css('width', val.length + 2 + 'ch');
                    }
                    break;
                case "focus":
                    $(elem).parent().filter('[id^=phone-number]').css('width', '85px');
                    break;
            }
        }
    }

    function DisplayValidationMessage(elem) {
        var errors = $(elem).closest('.middleScreen , #mobilePhone').find('.field-validation-error');
        errors.show();
        if (errors.length != 1) {
            errors.each(function () {
                if ($(elem).prop('name') != $(this).data('valmsg-for')) {
                    $(this).hide();
                }
            });
        }
        else if ($(errors[0]).data("valmsg-for") != $(elem).prop('name')) {
            $('[name="' + $(errors[0]).data("valmsg-for") + '"]').valid();
        }
    }

    function ValidatePhoneNumber() {
        //Experian Validation
        if (PersonalInfo.ShouldValidatePhoneOnExperian === "True") {

            if (!isEmpty(DOMElements.$PhoneInfoPrimaryPhone.val())) {
                ValidatePhoneExperian(DOMElements.$PhoneInfoPrimaryPhone.val());
            }
        }

        return false;
    }

    function ValidatePhoneExperian(phoneNumber) {

        DOMElements.$loadingPhoneExperianValidation.css('display', '');

        var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Experian/ValidatePhone';
        jQuery.support.cors = true;
        $.ajax({
            url: uri,
            type: 'Get',
            data: { 'primaryPhone': phoneNumber, 'locale': PersonalInfo.Locale},
            success: function (data) {
                var response = JSON.parse(data);
                if (response === true) {
                    DOMElements.$InvalidPhoneExperian.css('display', 'none');
                    DOMElements.$IsValidPhoneOnExperian.val('True');
                }
                else {
                    DOMElements.$InvalidPhoneExperian.css('display', '');
                    DOMElements.$IsValidPhoneOnExperian.val('False');
                }
                DOMElements.$loadingPhoneExperianValidation.css('display', 'none');
            },
            error: function (jqXhr, textStatus, err) {
                DOMElements.$IsValidPhoneOnExperian.val('False');
                DOMElements.$loadingPhoneExperianValidation.css('display', 'none');
                DOMElements.$InvalidPhoneExperian.css('display', '');
            }
        });
        return false;
    }

    function HasInvalidTextsEvent() {
        AddressInfo.HasInvalidTexts = CompareTextLimits("AddressInfo", PersonalInfo.TextLimits);
    }

    function ValidateApplicationDate() {
        if (!PreviousMembership.IsPreviousMembershipRequired) {
            return true;
        }
        DOMElements.$dateApplicationErrorMsg.css("display", "none");
        var appDay = DOMElements.$PreviousMembershipApplicationDay.find("option:selected").val();
        var appMonth = DOMElements.$PreviousMembershipApplicationMonth.find("option:selected").val();
        var appYear = DOMElements.$PreviousMembershipApplicationYear.find("option:selected").val();

        if (appMonth === "" || appDay === "" || appYear === "") {
            DOMElements.$dateApplicationErrorMsg.css("display", "block");
            return false;
        }
        else {
            DOMElements.$dateApplicationErrorMsg.css("display", "none");
            return true;
        }
    }

    function ValidateLastActivityDate() {
        if (!PreviousMembership.IsPreviousMembershipRequired) {
            return true;
        }
        DOMElements.$dateLastActivityErrorMsg.css("display", "none");
        var activityLastDay = DOMElements.$PreviousMembershipApplicationDay.find("option:selected").val();
        var activityLastMonth = DOMElements.$PreviousMembershipApplicationMonth.find("option:selected").val();
        var activityLastYear = DOMElements.$PreviousMembershipApplicationYear.find("option:selected").val();

        if (activityLastMonth === "" || activityLastDay === "" || activityLastYear === "") {
            DOMElements.$dateLastActivityErrorMsg.css("display", "block");
            return false;
        }
        else {
            DOMElements.$dateLastActivityErrorMsg.css("display", "none");
            return true;
        }
    }

    function PersonalInfoOnSubmitEvent() {
        var dateValidations = {};
        dateValidations.valApp = ValidateApplicationDate();
        dateValidations.lastActivity = ValidateLastActivityDate();

        if (PreviousMembership.IsPreviousMembershipRequired) {
            validateApplicationDate();
            validateLastActivityDate();
        }

        if (AddressInfo.HasInvalidTexts ||
            PersonalInfo.IsValidAddress === 'False' ||
            PersonalInfo.IsValidZipCode === 'False' ||
            PersonalInfo.IsValidLocalAddressCity === 'False' ||
            PersonalInfo.IsValidLocalAddressState === 'False' ||
            (PreviousMembership.IsPreviousMembershipRequired &&
                (!PreviousMembership.IsApplicationDateValid || !dateValidations.valApp || !dateValidations.lastActivity || !PreviousMembership.IsLastActivityDateValid))) {

            return false;
        }
    }

    function ShowPhoneNumber() { 
        if (DOMElements.$PhoneInfoIsPrimaryMobileNumber.is(":checked")) {
            DOMElements.$mobilePhone.css('display', 'none');
            $("#PhoneInfo_MobilePhone").val("");
            var container = $("#PhoneInfo_MobilePhone").closest('#mobilePhone');
            if(container){
                container.find("[data-valmsg-replace]").removeClass("field-validation-error").addClass("field-validation-valid").empty();
            }
        }
        else {
            DOMElements.$mobilePhone.css('display', '');
        }

        return false;
    }

    function IsPrimaryMobilePhone() {
        if (PersonalInfo.IsPrimaryPhoneMobile === 'True') {
            DOMElements.$mobilePhone.css('display', '');
        }
        else {
            DOMElements.$mobilePhone.css('display', 'none');
        }
    }

    function SetPhoneAlignment() {
        if (BasicInfo.HasTextDirectionRtl == 'True') {
            if (PersonalInfo.DisplayPhoneCountryCode == 'True') {
                $('input').filter('[id ^=PhoneInfo][id $=AreaCode]').each(function () {
                    $(this).parent().filter('[id^=phone-countrycode]').css('width', '45px');
                });
            }
            else {
                $('input').filter('[id ^=PhoneInfo][id $=CountryCode]').each(function () {
                    $(this).parent().filter('[id^=phone-countrycode]').css('display', 'none');
                });
            }
            $('input').filter('[id ^=PhoneInfo][id $=Phone]').each(function () {
                $(this).parent().filter('[id^=phone-number]').css('width', '85px');
            });
        }
        else {
            if (PersonalInfo.DisplayPhoneCountryCode == 'True') {
                $('input').filter('[id ^=PhoneInfo][id $=CountryCode]').each(function () {
                    $(this).parent().filter('[id^=phone-countrycode]').css('width', '50px');
                });
            }
            else {
                $('input').filter('[id ^=PhoneInfo][id $=CountryCode]').each(function () {
                    $(this).parent().filter('[id^=phone-countrycode]').css('display', 'none');
                });
            }
            $('input').filter('[id ^=PhoneInfo][id $=AreaCode]').each(function () {
                $(this).parent().filter('[id^=phone-areacode]').css('width', '50px');
            });
        }
    }

    function ValidateSecondaryDifferentToPrimaryPhone() {

        var primaryPhone = DOMElements.$PhoneInfoPrimaryPhone.val();
        var secondaryPhone = DOMElements.$PhoneInfoSecondaryPhone.val();

        if (!isEmpty(secondaryPhone) && secondaryPhone === primaryPhone) {
            $("#InvalidSecondaryPhoneNumber").css("display", "block"); 
        } else {
            $("#InvalidSecondaryPhoneNumber").css("display", "none"); 
        }
    }


    //for now is only for India the GeneralInfo_Fields id only exists in the General Information View for India
    function DisableGeneralInfoFields(selector, disabled) {
        if ($(selector).length) {
            disableFields(selector, disabled);
        }
    }

    //for now is only for India the #secondaryPhoneSection #PhoneInfo_MobilePhone id only exists in the General Information View for India
    function CopyPrimaryPhoneIntoMobilePhone(success) {

        if (PersonalInfo.ShowPrimaryPhoneIntoMobilePhone === "True" && success) {
            var valueToShow = $("#PhoneInfo_PrimaryPhone").val();
            $("#secondaryPhoneSection #primaryphone_copied").val(valueToShow);
        }
    }

    $('#InputFileClear').on('click', fileClearer);
    function fileClearer(e) {
        e.preventDefault();
        e.stopPropagation();
        var $el = $('#PhotoOfIdentity_File');
        $el.wrap('<form>').closest('form').get(0).reset();
        $el.unwrap();
    }

    return {
        Init: Init,
        HasInvalidTextsEvent: HasInvalidTextsEvent,
        ValidateApplicationDate: ValidateApplicationDate,
        ValidateLastActivityDate: ValidateLastActivityDate,
        PersonalInfoOnSubmitEvent: PersonalInfoOnSubmitEvent,
        ShowPhoneNumber: ShowPhoneNumber,
        IsPrimaryMobilePhone: IsPrimaryMobilePhone,
        ValidatePhoneNumber: ValidatePhoneNumber,
        DisplayValidationMessage: DisplayValidationMessage,
        SetPhoneAlignment: SetPhoneAlignment,
        ValidateSecondaryDifferentToPrimaryPhone: ValidateSecondaryDifferentToPrimaryPhone,
        DisableGeneralInfoFields: DisableGeneralInfoFields,
        CopyPrimaryPhoneIntoMobilePhone: CopyPrimaryPhoneIntoMobilePhone
    }
})();

PersonalInfo.Init = function () {
    steps();
    PersonalInfoModule.Init();
};
var PreviousMembership = {};
PreviousMembership.IsPreviousMembershipRequired = false;

/* Need this variable because for DataAnnotations_CO_PM.xml, using DateRange attribute on LastActivityDate and using the 
 * PreviousMembership_LastActivityDateRange.cshtml template (which uses an @Html.TextBoxFor extension instead of @Html.DatePickerInputFor), 
 * the sequence of FocusOutEventHandlerForDateInput() and validateLastActivityDate() being called switches depending on whether user picks a date
 * from the datepicker view or manually types in digits.
 */
var hitValidateLastActivityDateFunctionFirst = false;

PreviousMembership.Init = function () {
    var defaultMaxDate = new Date();
    var years = document.getElementById("PreviousMembership_LastActivityDate").getAttribute("data-max-date-years");
    var maxYears = years != null ? parseInt(years) : 0;
    var months = document.getElementById("PreviousMembership_LastActivityDate").getAttribute("data-max-date-months");
    var maxMonths = months != null ? parseInt(months) : 0;
    var days = document.getElementById("PreviousMembership_LastActivityDate").getAttribute("data-max-date-days");
    var maxDays = days != null ? parseInt(days) : 0;

    if (maxDays == 0 && maxMonths == 0) {
        defaultMaxDate.setFullYear(defaultMaxDate.getFullYear() - maxYears, defaultMaxDate.getMonth(), defaultMaxDate.getDate() - 1);
    }
    else if (maxDays == 0) {
        defaultMaxDate.setFullYear(defaultMaxDate.getFullYear(), defaultMaxDate.getMonth()-maxMonths, defaultMaxDate.getDate() - 1);
    } else {
        defaultMaxDate.setDate(defaultMaxDate.getDate()-1 - maxDays);
    }
    PreviousMembership.MaxApplicationDate = defaultMaxDate;

    // Set the max possible LastActivityDate.  Had to implement the following code because of DataAnnotations_CO_PM.xml's
    // LastActivityDate's DateRange attribute.
    var lastActivityDateRangeAttribute = document.getElementById("PreviousMembership_LastActivityDate").getAttribute("dateranges-ranges");
    if (lastActivityDateRangeAttribute) {
        var ranges = JSON.parse(lastActivityDateRangeAttribute.replace(/\'/g, '"'));
        PreviousMembership.MaxLastActivityDate = new Date();
        PreviousMembership.MaxLastActivityDate.setFullYear(
            PreviousMembership.MaxLastActivityDate.getFullYear() + ranges.To.Years,
            PreviousMembership.MaxLastActivityDate.getMonth() + ranges.To.Months,
            PreviousMembership.MaxLastActivityDate.getDate() + ranges.To.Days);
    }
    else {
        PreviousMembership.MaxLastActivityDate = defaultMaxDate;
    }

    $(".disableRadio").attr('disabled', true);

    if ($("#isPreviousMembershipRequiredCheckTrue") != undefined &&
        $("#isPreviousMembershipRequiredCheckTrue").is(":checked")) {
        $("#previousMembershipYes").show();
        PreviousMembership.IsPreviousMembershipRequired = true;
    }

    $("input[name='PreviousMembership.SectionRequired']").click(previousMembershipRequiredChanged);
    
    $("#PreviousMembership_ApplicationDate").on('hide.datepicker', function () {
        FocusOutEventHandlerForDateInput($("#PreviousMembership_ApplicationDate"), PreviousMembership.IsApplicationDateValid, PreviousMembership.MaxApplicationDate);
    });

    $("#PreviousMembership_LastActivityDate").on('hide.datepicker', function () {
        FocusOutEventHandlerForDateInput($("#PreviousMembership_LastActivityDate"), PreviousMembership.IsLastActivityDateValid, PreviousMembership.MaxLastActivityDate);
    });

    // These 'change' event handlers handle when input text changes.
    $("#PreviousMembership_ApplicationDate").change(validateApplicationDate);
    $("#PreviousMembership_LastActivityDate").change(validateLastActivityDate);

    $('#isAcceptanceOfRulesOfConduct').on('change', acceptanceOfRulesOfConductChangeHandler);
};

/* This 'hide.datepicker' event handler particularly handles validating when user leaves field empty after initial screen load and 1st focus.
 */
function FocusOutEventHandlerForDateInput(elem, passedValidation, maxSelectableDate) {
    var elemValid = elem.valid();
    var dateRanges = elem.attr("dateranges-ranges");
    
    // This is a bit of a hack.
    if (hitValidateLastActivityDateFunctionFirst === true && typeof dateRanges !== "undefined" && elemValid === false && elem.attr("data-toggle") === "datepicker") {
        elem.datepicker('setDate', maxSelectableDate, true);
        elem.datepicker('setValue', elem.val());
        hitValidateLastActivityDateFunctionFirst = false;
    }
    
    return elemValid;
}

function previousMembershipRequiredChanged() {
    $('#nextStep').click(function () {
        $('#isAcceptanceOfRulesOfConductSpanId').click(function () {
            jQuery('.error-large, #PreviousMembership.AcceptanceOfRulesOfConduct-error').hide();
        })
    })
    if ($("#isPreviousMembershipRequiredCheckTrue").is(":checked")) {
        $('#previousMembershipYes').slideDown(50, function () { });
        PreviousMembership.IsPreviousMembershipRequired = true;
    } else {
        $('#previousMembershipYes').slideUp();
        PreviousMembership.IsPreviousMembershipRequired = false;
        $('#PreviousMembership_FirstName').val("");
        $('#PreviousMembership_LastName').val("");
        $('#PreviousMembership_MiddleName').val("");
        $('#PreviousMembership_MembershipId').val("");
        $('#PreviousMembership_ApplicationDate').val("");
        $('#PreviousMembership_LastActivityDate').val("");
        $('#isAcceptanceOfRulesOfConductLabelId').val("");
        $('#isAcceptanceOfRulesOfConduct').prop('checked', false);
    }
}

function validateApplicationDate() {
    $("#InvalidApplicationDateParts").css("display", "none");
    $("#ApplicationDateOneYearAgo").css("display", "none");
    $("#ApplicationGreaterThanLastActivity").css("display", "none");
    PreviousMembership.IsApplicationDateValid = false;

    if ($("#PreviousMembership_ApplicationDate").valid()) {
        var format = $.fn.datepicker.languages[Object.keys($.fn.datepicker.languages)[0]].format;
        format = format.toLowerCase();

        PreviousMembership.IsApplicationDateValid = CheckPrevMembershipDateComponent(format, $('#PreviousMembership_ApplicationDate'), PreviousMembership.MaxApplicationDate, $('#InvalidApplicationDateParts'), $('#ApplicationDateOneYearAgo'));

        if (PreviousMembership.IsApplicationDateValid && $('#PreviousMembership_LastActivityDate').val().length == 10)
            PreviousMembership.IsApplicationDateValid = ValidateIfApplicationDateIsGreaterThanLastActivityDate(format);
    }
    else if ($("#PreviousMembership_ApplicationDate").attr("data-toggle") === "datepicker") {
        $("#PreviousMembership_ApplicationDate").datepicker('setDate', PreviousMembership.MaxApplicationDate, true);
    }
}

function validateLastActivityDate() {
    $("#InvalidLastActivityDateParts").css("display", "none");
    $("#LastActivityDateOneYearAgo").css("display", "none");
    $("#ApplicationGreaterThanLastActivity").css("display", "none");
    PreviousMembership.IsLastActivityDateValid = false;

    if ($("#PreviousMembership_LastActivityDate").valid()) {
        var format = $.fn.datepicker.languages[Object.keys($.fn.datepicker.languages)[0]].format;
        format = format.toLowerCase();

        PreviousMembership.IsLastActivityDateValid = CheckPrevMembershipDateComponent(format, $('#PreviousMembership_LastActivityDate'), PreviousMembership.MaxLastActivityDate, $('#InvalidLastActivityDateParts'), $('#LastActivityDateOneYearAgo'));

        if (PreviousMembership.IsLastActivityDateValid && $('#PreviousMembership_ApplicationDate').val().length == 10)
            PreviousMembership.IsLastActivityDateValid = ValidateIfApplicationDateIsGreaterThanLastActivityDate(format);
    }
    else if ($("#PreviousMembership_LastActivityDate").attr("data-toggle") === "datepicker"){
        $("#PreviousMembership_LastActivityDate").datepicker('setDate', PreviousMembership.MaxLastActivityDate, true);
    }
}

function CheckPrevMembershipDateComponent(format, dateInput, maxDate, invalidDatePartsMessage, oneYearAgoMessage) {

    var minDate = new Date(1919, 11, 31);
    var formatItems = format.split(BasicInfo.SplitBy);
    var dateValue = translateJpChars(dateInput.val());
    var dateItems = dateValue.split(BasicInfo.SplitBy);

    var isValidDate = false;

    if (dateValue.length == 10) {
        // Validation Check #1: Validate that the date parts are valid.
        isValidDate = BasicInfoDetailsModule.ValidateDateComponents(dateItems, formatItems, invalidDatePartsMessage);

        if (isValidDate) {
            /* Validation Check #2: Validate that the date input is at least one year ago (default) or some other period from today.
             * 
             * Warning: If the field is using the "DateRange" validator attribute, ie. DataAnnotations_CO_PM.xml, and the
             * user input fails RequireIf.js's daterange validation logic, the code won't even reach here.  Otherwise, if it
             * passes there, it'll pass right through here successfully.
             */
            isValidDate = BasicInfoDetailsModule.ValidateDateRange(dateInput, format, oneYearAgoMessage, maxDate, minDate);
        }
    }
    /* Need this 'clearIfNotMatch' condition so that only when element has clearifnotmatch ="false" ie. DataAnnotations_IS.xml,
     * then can display this error 'invalidDatePartsMessage' validation message.  Otherwise, clearifnotmatch's default value
     * is true.  So user input will be cleared out if it doesn't match mask and then the 'required' validation message ends up displaying.
     */
    else if (dateValue.length < 10 && dateInput.attr("clearifnotmatch") == "false") {
        invalidDatePartsMessage.css("display", "");
    }
    if (dateInput.attr("data-toggle") === "datepicker")
    {
        if (isValidDate)
            dateInput.datepicker('setDate', dateValue, true);
        else
            dateInput.datepicker('setDate', maxDate, true);
    }
    return isValidDate;
}

function ValidateIfApplicationDateIsGreaterThanLastActivityDate(format) {
    var areDatesValid = false;

    var appDate = translateJpChars($('#PreviousMembership_ApplicationDate').val());
    var lastDate = translateJpChars($('#PreviousMembership_LastActivityDate').val());

    var lastActivityDate = BasicInfoDetailsModule.FormatDate(lastDate, format, BasicInfo.SplitBy);
    var applicationDate = BasicInfoDetailsModule.FormatDate(appDate, format, BasicInfo.SplitBy);

    // Validation Check #3
    if (lastActivityDate > applicationDate) {
        areDatesValid = true;
    } else {
        $("#ApplicationGreaterThanLastActivity").css("display", "");
    }

    return areDatesValid;
}

function acceptanceOfRulesOfConductChangeHandler(e) {
    var checkBox = e.target;
    $(checkBox).valid();
};
var BasicInfoDetails = {};
BasicInfoDetails.MinAgeValue = "";
BasicInfoDetails.MaxAgeValue = "";
BasicInfoDetails.Age = "";
BasicInfoDetails.PlaceOfBirth = "";
BasicInfoDetails.PlacesOfBirthByProvince = "";
BasicInfoDetails.HasEnoughAge = false;
BasicInfoDetails.HasValidSsn = true;
BasicInfoDetails.MembershipType = "DS";
BasicInfoDetails.HasInvalidTexts = false;

var BasicInfoDetailsModule = (function () {

    var Properties = {};
    var DOMElements = {};

    function CacheDom() {
        DOMElements.$BasicInfoDetails_DateSelected = $('#BasicInfoDetails_DateSelected');
        DOMElements.$HasEnoughAgeError = $('#HasEnoughAgeError');
        DOMElements.$dateErrorMsg = $('#dateErrorMsg');
        DOMElements.$BasicInfoDetails_MinLegalAge = $('#BasicInfoDetails_MinLegalAge');
        DOMElements.$BasicInfoDetails_MaxLegalAge = $('#BasicInfoDetails_MaxLegalAge');
        DOMElements.$tinFor = $(':input[tin-for]');
        DOMElements.$BasicInfoDetails_GenderSelected = $('#BasicInfoDetails_Gender');
        DOMElements.$BasicInfoDetails_RaceSelected = $('#BasicInfoDetails_Race');
        DOMElements.$BasicInfoDetails_MaritalStatus = $('#BasicInfoDetails_MaritalStatus');
        DOMElements.$SSNInput = $('#SSN > input');
        DOMElements.$MsgNameRules = $('#msgNameRules');
        DOMElements.$otherOccupationDiv = $('#otherOccupationDiv');
        DOMElements.$OtherCountry_disclaimer = $('#OtherCountry_disclaimer');
        DOMElements.$BasicInfoDetails_OtherRequired = $('#BasicInfoDetails_OtherRequired');
        DOMElements.$BasicInfoDetails_Other = $('#BasicInfoDetails_Other');
        DOMElements.$BasicInfoDetails_Occupation = $('#BasicInfoDetails_Occupation');
        DOMElements.$BasicInfoDetails_AgeInvalidLabel = $("#HasEnoughAgeError");
        DOMElements.$BasicInfoDetails_AgeInvalidRangeLabel = $("#AgeInvalidDateRange");
        DOMElements.$BasicInfoDetails_TooOldLabel = $('#OldAgeError');
        DOMElements.$BasicInfoDetails_PlaceOfBirth = $('#BasicInfoDetails_PlaceOfBirthByCountry');
        DOMElements.$BasicInfoDetails_PlaceOfBirthByProvince = $('#BasicInfoDetails_PlaceOfBirth');
        DOMElements.$BasicInfoDetails_Province = $('#BasicInfoDetails_Province');
        DOMElements.$PreviousMembership_ApplicationDateSelected = $("#PreviousMembership_ApplicationDate");
        DOMElements.$BasicInfoDetails_Age = $('#BasicInfoDetails_Age');
        DOMElements.$PreviousMembership_DateLastActivitySelected = $("#PreviousMembership_LastActivityDate");
    };

    function BindingEvents() {
        DOMElements.$BasicInfoDetails_DateSelected.on('keyup input', BasicInfoDetails_DateSelected_Keypress);
        if (DOMElements.$BasicInfoDetails_Age != undefined) {
            DOMElements.$BasicInfoDetails_Age.attr("readonly", "readonly");
            if (DOMElements.$BasicInfoDetails_DateSelected.val() == '') {
                DOMElements.$BasicInfoDetails_Age.val('');
            }
        }

        DOMElements.$BasicInfoDetails_DateSelected.on('pick.datepicker', function (e) {
            var element = DOMElements.$BasicInfoDetails_DateSelected;
            var format = $.fn.datepicker.languages[Object.keys($.fn.datepicker.languages)[0]].format;
            var invalidDateMessage = DOMElements.$BasicInfoDetails_AgeInvalidRangeLabel;
            var ageErrorMessage = DOMElements.$BasicInfoDetails_AgeInvalidLabel;
            DateValidation(e.date.toISOString().substring(0, 10).replace(/-/g, "/"), format, element, invalidDateMessage, ageErrorMessage, true, false);
        });

        DOMElements.$BasicInfoDetails_GenderSelected.on('blur', FocusOutEventHandlerForGender);
        DOMElements.$BasicInfoDetails_RaceSelected.on('blur', FocusOutEventHandlerForRace);
        DOMElements.$BasicInfoDetails_MaritalStatus.on('blur', FocusOutEventHandlerForMaritalStatus);
        DOMElements.$BasicInfoDetails_PlaceOfBirthByProvince.on('blur', FocusOutEventHandlerForPlaceOfBirth);
        DOMElements.$BasicInfoDetails_Province.on('blur', FocusOutEventHandlerForProvince);
        DOMElements.$tinFor.on('change', TinForChangeEvent);
        DOMElements.$SSNInput.on('change', SSNInputChange);
        DOMElements.$BasicInfoDetails_Occupation.on('change', EventChangeOccupation);
        $("input[id^=BasicInfo][id$=Name]").focus(nameFocusInEventHandler).blur(nameFocusOutEventHandler);
        DOMElements.$BasicInfoDetails_PlaceOfBirth.on('change', EventChangePlacesOfBirth);
        DOMElements.$BasicInfoDetails_Province.on('change', EventChangeProvinceForPlacesOfBirth);
        DOMElements.$BasicInfoDetails_PlaceOfBirthByProvince.on('blur', function () {
            FocusOutEventHandlerForPlaceOfBirth();
        });
        $("input[id^=BasicInfo][id$=Name]").focus(nameFocusInEventHandler).blur(nameFocusOutEventHandler);

        DOMElements.$BasicInfoDetails_DateSelected.on('hide.datepicker', function (e) {
            FocusOutEventHandlerForDob();
        });
        DOMElements.$BasicInfoDetails_GenderSelected.on('blur', function (e) {
            FocusOutEventHandlerForGender();
        });
        DOMElements.$BasicInfoDetails_RaceSelected.on('blur', function (e) {
            FocusOutEventHandlerForRace();
        });
        DOMElements.$BasicInfoDetails_Province.on('blur', function (e) {
            FocusOutEventHandlerForProvince();
        });
        $("#OtherCountry_disclaimer").hide();
    };

    function EventChangeOccupation() {
        DOMElements.$otherOccupationDiv.css("display", "none");
        DOMElements.$BasicInfoDetails_OtherRequired.val(false);

        var occupation = $("#BasicInfoDetails_Occupation option:selected").val();
        if (occupation && occupation === 'Others') {
            DOMElements.$otherOccupationDiv.css("display", "block");
            DOMElements.$BasicInfoDetails_OtherRequired.val(true);
            return true;
        }
        else {
            $("#BasicInfoDetails_Other").val('');
            return false;
        }
    }

    function EventChangePlacesOfBirth() {
        var placeofbirth = $("#BasicInfoDetails_PlaceOfBirthByCountry option:selected").val();
        if (placeofbirth === undefined) { return; }
        $(".MultipleTinOptions select").each(function () {
            if ($(this).attr('tin-for') === placeofbirth) {
                $(this).attr('Required', 'true').parent().parent().show();
                $(this).parent().parent().next().show();
            }
            else {
                $(this).attr('Required', 'false').parent().parent().hide();
                $(this).parent().parent().next().hide();
            }
            if (placeofbirth && placeofbirth === 'Other_Country') {
                $("#OtherCountry_disclaimer").show();
                DOMElements.$OtherCountry_disclaimer.css("display", "inherit");
            }
            else {
                $("#OtherCountry_disclaimer").hide();
                DOMElements.$OtherCountry_disclaimer.css("display", "none");
            }
        });
        ResetSelectedTinDetail(placeofbirth);
        $("#BasicInfoDetails_PlaceOfBirthByCountry").valid();
    }


    function EventChangeProvinceForPlacesOfBirth() {
        $('#BasicInfoDetails_PlaceOfBirth').empty();

        var selectedProvinceValue = $('#BasicInfoDetails_Province').val();
        if (isEmpty(selectedProvinceValue) || $.isEmptyObject(BasicInfoDetails.PlacesOfBirthByProvince)) {
            return false;
        }

        var selectedProvince = selectedProvinceValue.trim().replace(/_/g, ' ').toLowerCase();

        var selectOneText = $('#BasicInfoDetails_Province > option').first().text();

        $("#BasicInfoDetails_PlaceOfBirth").append('<option value="">' + selectOneText + '</option>');
        $.each(BasicInfoDetails.PlacesOfBirthByProvince, function (index, currentObject) {

            var currentProvince = currentObject.province.trim().toLowerCase();
            if (currentProvince === selectedProvince) {
                var placesOfBirthList = currentObject.POB;

                $.each(placesOfBirthList, function (indexpob, placeOfBirth) {
                    if (placeOfBirth.codiceEnte === BasicInfoDetails.PlaceOfBirth) {
                        $("#BasicInfoDetails_PlaceOfBirth").append('<option selected="selected" value="' + placeOfBirth.placeOfBirth + '">' + placeOfBirth.placeOfBirth + '</option>');
                    } else {
                        $("#BasicInfoDetails_PlaceOfBirth").append('<option value="' + placeOfBirth.placeOfBirth + '">' + placeOfBirth.placeOfBirth + '</option>');
                    }
                });
            }
        });

        if (selectedProvince === 'stato estero' && BasicInfoDetails.MembershipType === "DS") {
            $('#msgPlaceOfBirthRules').slideDown();
        } else {
            $('#msgPlaceOfBirthRules').slideUp();
        }

    }

    function ResetSelectedTinDetail(placeofbirth) {
        // reset tins value
        $("[tin-for]").each(function () {
            if ($(this).attr('tin-for') !== placeofbirth) {
                $(this).val('');
                $(this).trigger('change');
            }
        });
    }

    function nameFocusInEventHandler() {
        if (DOMElements.$MsgNameRules.length > 0) {
            if (DOMElements.$MsgNameRules.is(':hidden')) {
                DOMElements.$MsgNameRules.slideDown();
                return true;
            }
        }
        return false;
    }

    function FocusOutEventHandlerForGender() {
        return DOMElements.$BasicInfoDetails_GenderSelected.valid();
    }

    function FocusOutEventHandlerForRace() {
        return DOMElements.$BasicInfoDetails_RaceSelected.valid();
    }

    function nameFocusOutEventHandler() {
        if (DOMElements.$MsgNameRules.length > 0) {
            //wrapped in a timeout function so it triggers after focus event
            setTimeout(function () {
                if (DOMElements.$MsgNameRules.is(':visible') && !$('input[id^=BasicInfo][id$=Name]').is(':focus')) {
                    DOMElements.$MsgNameRules.slideUp();
                }
            }, 100);
            return true;
        }
        return false;
    }

    function SSNInputChange() {
        var value = $("#SSN > input")[0].value;
        BasicInfoDetails.HasValidSsn = ValidateSsn(value, "#HasValidSsn_SSN");
    }

    function TinForChangeEvent() {
        var control = $(this);
        var value = control.val();
        var tinCode = $(control).attr("tin-for");
        var codefor = $(control).attr("tin-code-for");
        var selected = $("option:selected", control).prevObject;

        if (!isEmpty(selected.attr("tin-config"))) {
            config = JSON.parse(selected.attr("tin-config"));
            if ($(control).attr("integritycheck") === "True") {
                var integrityCode = config.IntegrityCode;
                $("#BasicInfoDetails_TinDetails_" + codefor + "__IntegrityCode").val(integrityCode);
            }
        }
        if (tinCode !== "SSN" && value != "") {
            var validateConsNum = $(control).attr("tin-consNum");
            var validateSameDig = $(control).attr("tin-sameDig");
            var maxConsNum = $(control).attr("tin-consnumallowed");
            var checkInversedConsNum = $(control).attr("tin-checkconsnuminversed");
            BasicInfoDetails.HasValidSsn = ValidateTinFormat(value, "#HasValidSsn_" + tinCode, validateConsNum, validateSameDig, maxConsNum, checkInversedConsNum);
        }
    }

    function FocusOutEventHandlerForDob() {
        element = DOMElements.$BasicInfoDetails_DateSelected;
        return element.valid();
    }
    function FocusOutEventHandlerForGender() {
        element = DOMElements.$BasicInfoDetails_GenderSelected;
        return element.valid();
    }
    function FocusOutEventHandlerForMaritalStatus() {
        var element = DOMElements.$BasicInfoDetails_MaritalStatus;
        return element.valid();
    }
    function FocusOutEventHandlerForProvince() {
        element = DOMElements.$BasicInfoDetails_Province;
        return element.valid();
    }
    function FocusOutEventHandlerForPlaceOfBirth() {
        element = DOMElements.$BasicInfoDetails_PlaceOfBirthByProvince;
        return element.valid();
    }
    function BasicInfoDetails_DateSelected_Keypress() {
        var element = DOMElements.$BasicInfoDetails_DateSelected;
        var format = $.fn.datepicker.languages[Object.keys($.fn.datepicker.languages)[0]].format;
        var invalidDateMessage = DOMElements.$BasicInfoDetails_AgeInvalidRangeLabel;
        var ageErrorMessage = DOMElements.$BasicInfoDetails_AgeInvalidLabel;
        var minDate = GetDateFromAge(DOMElements.$BasicInfoDetails_MinLegalAge.val())
        var maxDate = DOMElements.$BasicInfoDetails_MaxLegalAge.val() != undefined ? GetDateFromAge(DOMElements.$BasicInfoDetails_MaxLegalAge.val()) : false;
        BasicInfoDetailsModule.DateValidation(element.val(), format, element, invalidDateMessage, ageErrorMessage, true, element.attr("data-toggle") === "datepicker", minDate, maxDate);
    }

    function GetDateFromAge(age) {
        var dt = new Date();
        return new Date(dt.getFullYear() - age, dt.getMonth(), dt.getDate());
    }

    function FormatDate(_date, _format, _delimiter) {
        var formatLowerCase = _format.toLowerCase();
        var formatItems = formatLowerCase.split(_delimiter);
        var dateItems = _date.split(_delimiter);
        var monthIndex = formatItems.indexOf("mm");
        var dayIndex = formatItems.indexOf("dd");
        var yearIndex = formatItems.indexOf("yyyy");
        var month = parseInt(dateItems[monthIndex]);
        month -= 1;
        return new Date(dateItems[yearIndex], month, dateItems[dayIndex]);
    }

    function DateValidation(date, format, input, invalidDateMessage, ageErrorMessage, validateAge, resetDatePicker, minDate, maxDate) {
        if (DOMElements.$BasicInfoDetails_Age != undefined) {
            DOMElements.$BasicInfoDetails_Age.val('');
        }
        if (DOMElements.$BasicInfoDetails_TooOldLabel != undefined) {
            DOMElements.$BasicInfoDetails_TooOldLabel.css("display", "none");
        }
        date = translateJpChars(date);

        invalidDateMessage.css("display", "none");
        var minCalendarDate = minDate;
        if (!minDate) {
            minCalendarDate = GetMinAgeDate();
        }
        if (ageErrorMessage) {
            ageErrorMessage.css("display", "none");
        }
        if (date.length !== 10) {
            return false;
        }
        if (!input.valid() && resetDatePicker) {
            input.datepicker('setDate', minCalendarDate, true);
            return false;
        } else if (!input.valid() && !resetDatePicker) {
            return false;
        }

        var formatLowerCase = format.toLowerCase();
        var formatItems = formatLowerCase.split(BasicInfo.SplitBy);
        var dateItems = date.split(BasicInfo.SplitBy);
        var validDate = true;
        validDate = BasicInfoDetailsModule.ValidateDateComponents(dateItems, formatItems, invalidDateMessage);

        if (validDate) {
            validDate = (!validateAge || BasicInfoDetailsModule.ValidateEnoughAge(input, format, ageErrorMessage))
                && BasicInfoDetailsModule.ValidateDateRange(input, format, invalidDateMessage, minDate, maxDate);
        }

        if (!validDate && resetDatePicker) {
            input.datepicker('setDate', minCalendarDate, true);
        }

        return validDate;
    }

    function ValidateDateComponents(dateItems, formatItems, invalidDateMessage) {
        var monthIndex = formatItems.indexOf("mm");
        var dayIndex = formatItems.indexOf("dd");
        var yearIndex = formatItems.indexOf("yyyy");

        if (dateItems[dayIndex] === "00") {
            invalidDateMessage.css("display", "");
            return false;
        }

        var daysOfMonth = BasicInfoDetailsModule.DaysInMonth(dateItems[monthIndex], dateItems[yearIndex]);
        if (dateItems[dayIndex] > daysOfMonth || dateItems[monthIndex] > 12 || dateItems[monthIndex] < 1) {
            invalidDateMessage.css("display", "");
            return false;
        }
        return true;
    }

    function ValidateDateRange(input, format, invalidDateMessage, minDate, maxDate) {
        if (!minDate) {
            minDate = new Date();
        }
        if (!maxDate) {
            maxDate = new Date(1919, 11, 31);
        }
        var date = input.val();
        date = translateJpChars(date);

        var dateSelected = BasicInfoDetailsModule.FormatDate(date, format, BasicInfo.SplitBy);
        var formatDateSelected = BasicInfoDetailsModule.FormatDate(dateSelected.toISOString().substring(0, 10).replace(/-/g, "/"), "yyyy/mm/dd", "/")
        var endDate = BasicInfoDetailsModule.FormatDate(minDate.toISOString().substring(0, 10).replace(/-/g, "/"), "yyyy/mm/dd", "/");
        var startDate = BasicInfoDetailsModule.FormatDate(maxDate.toISOString().substring(0, 10).replace(/-/g, "/"), "yyyy/mm/dd", "/"); 
        var validDate = true;
        if (formatDateSelected > endDate || formatDateSelected < startDate) {
            validDate = false;
            invalidDateMessage.css("display", "");
        }
        return validDate;
    }

    function ValidateEnoughAge(input, format, ageErrorMessage) {
        var oldAgeErrorMessage = DOMElements.$BasicInfoDetails_TooOldLabel;
        if (oldAgeErrorMessage != undefined) {
            oldAgeErrorMessage.css("display", "none");
        }
        var date = input.val();
        date = translateJpChars(date);

        var dateSelected = BasicInfoDetailsModule.FormatDate(date, format, BasicInfo.SplitBy);
        var year = dateSelected.getFullYear();
        var month = dateSelected.getMonth() + 1;
        var day = dateSelected.getDate();
        var isvalid = false;
        BasicInfoDetails.Age = BasicInfoDetailsUtilsModule.CurrentAge(year, month, day);
        BasicInfoDetails.MinAgeValue = DOMElements.$BasicInfoDetails_MinLegalAge.val();
        if (BasicInfoDetails.Age >= BasicInfoDetails.MinAgeValue || BasicInfoDetails.Age < 0) {
            ageErrorMessage.css("display", "none");
            BasicInfoDetails.HasEnoughAge = true;
            isvalid = true;
        }
        else {
            ageErrorMessage.css("display", "block");
            BasicInfoDetails.HasEnoughAge = false;
        }
        if (oldAgeErrorMessage != undefined && isvalid) {
            if (BasicInfoDetails.Age > DOMElements.$BasicInfoDetails_MaxLegalAge.val()) {
                oldAgeErrorMessage.css("display", "block");
                isvalid = false;
            }
            else {
                oldAgeErrorMessage.css("display", "none");
            }
        }

        DOMElements.$BasicInfoDetails_Age.val(BasicInfoDetails.Age);

        return isvalid;
    }

    function DaysInMonth(month, year) {
        return new Date(year, month, 0).getDate();
    }

    function GetMinAgeDate() {
        var minAgeDate = new Date();
        minAgeDate.setFullYear(minAgeDate.getFullYear() - parseInt(BasicInfoDetails.MinAgeValue, 10), minAgeDate.getMonth(), minAgeDate.getDate());
        return minAgeDate;
    }

    function Init() {
        CacheDom();
        BindingEvents();
    };

    function SetBasicInfoDetailsKyc(prefix,kycInfo) {
        var basicInfo = GetBasicInfoFieldsKyc(prefix);
        if (!isEmpty(kycInfo.name)) {
            var fullname = kycInfo.name.split(" ");
            basicInfo.firstName.val(fullname[0]);
            basicInfo.lastName.val(fullname[1]);
        }
        if (!isEmpty(kycInfo.gender)) {
            kycInfo.gender = kycInfo.gender.charAt(0).toUpperCase() + kycInfo.gender.slice(1).toLowerCase();
            basicInfo.gender.val(kycInfo.gender).change();
        }
        if (!isEmpty(kycInfo.dob)) {
            basicInfo.dateSelected.val(kycInfo.dob);
        }
    }

    function ClearBasicInfoFieldsKyc(prefix) {
        var basicInfo = GetBasicInfoFieldsKyc(prefix);
        $.each(basicInfo, function (key, field) {
            field.removeAttr('readonly');
            field.removeClass('input-disabled');
            field.val("");
        });
    }

    function SetBasicInfoFieldsReadOnlyKycSuccess(prefix) {
        var basicInfo = GetBasicInfoFieldsKyc(prefix);
        $.each(basicInfo, function (key, field) {
            if (!isEmpty(field.val())) {
                field.attr('readonly', 'true'); 
                field.addClass('input-disabled');
            }
        });
    }

    function GetBasicInfoFieldsKyc(prefix) {
        return {
            firstName: $("#" + prefix + "_FirstName"),
            lastName: $("#" + prefix + "_LastName"),
            gender: $("#" + prefix + "_Gender"),
            dateSelected: $("#" + prefix + "_DateSelected"),
        }
    }

    return {
        Init: Init,
        DOMElements: DOMElements,
        Properties: Properties,
        FocusOutEventHandlerForDob: FocusOutEventHandlerForDob,
        FocusOutEventHandlerForGender: FocusOutEventHandlerForGender,
        FocusOutEventHandlerForProvince: FocusOutEventHandlerForProvince,
        FocusOutEventHandlerForPlaceOfBirth: FocusOutEventHandlerForPlaceOfBirth,
        FocusOutEventHandlerForMaritalStatus: FocusOutEventHandlerForMaritalStatus,
        nameFocusInEventHandler: nameFocusInEventHandler,
        nameFocusOutEventHandler: nameFocusOutEventHandler,
        ValidateDateRange: ValidateDateRange,
        DateValidation: DateValidation,
        BasicInfoDetails_DateSelected_Keypress: BasicInfoDetails_DateSelected_Keypress,
        EventChangeOccupation: EventChangeOccupation,
        EventChangePlacesOfBirth: EventChangePlacesOfBirth,
        EventChangeProvinceForPlacesOfBirth: EventChangeProvinceForPlacesOfBirth,
        GetMinAgeDate: GetMinAgeDate,
        GetDateFromAge: GetDateFromAge,
        ValidateEnoughAge: ValidateEnoughAge,
        ValidateDateComponents: ValidateDateComponents,
        FormatDate: FormatDate,
        DaysInMonth: DaysInMonth,
        CacheDom: CacheDom,
        SetBasicInfoDetailsKyc: SetBasicInfoDetailsKyc,
        ClearBasicInfoFieldsKyc: ClearBasicInfoFieldsKyc,
        SetBasicInfoFieldsReadOnlyKycSuccess: SetBasicInfoFieldsReadOnlyKycSuccess 
    }
})();


var BasicInfoDetailsUtilsModule = (function () {

    function CurrentAge(year, month, day) {
        if (year, month, day) {
            var today = new Date();
            var dateOfBirth = new Date(year, month - 1, day);
            var age = today.getFullYear() - dateOfBirth.getFullYear();
            var monthDiff = (today.getMonth()) - dateOfBirth.getMonth();
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dateOfBirth.getDate())) {
                age--;
            }
            return age;
        }
    }

    function PlacesOfBirthByProvinceHandler() {
        if (isEmpty(BasicInfoDetails.PlacesOfBirthByProvince)) {
            return false;
        }
        var decodedString = $('<textarea/>').html(BasicInfoDetails.PlacesOfBirthByProvince).text();
        BasicInfoDetails.PlacesOfBirthByProvince = !isEmpty(decodedString)
            ? JSON.parse(decodedString)
            : {};
        if (BasicInfoDetails.PlaceOfBirth !== "") {
            GetPlacesOfBirthByProvince(BasicInfoDetails.PlaceOfBirth);
            return true;
        }
        return false;
    }

    function GetPlacesOfBirthByProvince(initialValue) {
        $('#BasicInfoDetails_PlaceOfBirth').empty();

        var selectedProvinceValue = $('#BasicInfoDetails_Province').val();
        if (isEmpty(selectedProvinceValue) || $.isEmptyObject(BasicInfoDetails.PlacesOfBirthByProvince)) {
            return false;
        }

        var selectedProvince = selectedProvinceValue.trim().replace(/_/g, ' ').toLowerCase();

        var selectOneText = $('#BasicInfoDetails_Province > option').first().text();

        $("#BasicInfoDetails_PlaceOfBirth").append('<option value="">' + selectOneText + '</option>');
        $.each(BasicInfoDetails.PlacesOfBirthByProvince, function (index, currentObject) {

            var currentProvince = currentObject.province.trim().toLowerCase();
            if (currentProvince === selectedProvince) {
                var placesOfBirthList = currentObject.POB;

                $.each(placesOfBirthList, function (indexpob, placeOfBirth) {
                    if (!isEmpty(initialValue) && placeOfBirth.placeOfBirth === BasicInfoDetails.PlaceOfBirth) {
                        $("#BasicInfoDetails_PlaceOfBirth").append('<option selected="selected" value="' + placeOfBirth.placeOfBirth + '">' + placeOfBirth.placeOfBirth + '</option>');
                    } else {
                        $("#BasicInfoDetails_PlaceOfBirth").append('<option value="' + placeOfBirth.placeOfBirth + '">' + placeOfBirth.placeOfBirth + '</option>');
                    }
                });
            }
        });

        if (selectedProvince === 'stato estero' && BasicInfoDetails.MembershipType === "DS") {
            $('#msgPlaceOfBirthRules').slideDown();
        } else {
            $('#msgPlaceOfBirthRules').slideUp();
        }
    }

    return {
        CurrentAge: CurrentAge,
        PlacesOfBirthByProvinceHandler: PlacesOfBirthByProvinceHandler,
        GetPlacesOfBirthByProvince: GetPlacesOfBirthByProvince
    }
})();
;
var HmpInfo = {};

HmpInfo.AddressLine1 = '';
HmpInfo.AddressLine2 = '';
HmpInfo.AddressLine3 = '';
HmpInfo.AddressLine4 = '';
HmpInfo.Colony = '';
HmpInfo.City = '';
HmpInfo.State = '';
HmpInfo.PostalCode = '';
HmpInfo.CareOfName = '';
HmpInfo.UseShippingHandler = '';
HmpInfo.PreloadedAddresses = '';
HmpInfo.HasAddressDictionary = false;
HmpInfo.DefaultCareOfName = '';
HmpInfo.ColonyText = '';
HmpInfo.CityText = '';
HmpInfo.StateText = '';
HmpInfo.HasSpecialRuleSKU = '';
HmpInfo.SelectedGroup = '';
HmpInfo.IsValidAddress = false;
HmpInfo.HasDigitalHmp = false;

HmpInfo.Init = initFunction;

function initFunction() {
    $('#NewShippingAddress').focusin(function () {
        $("#postalCodeRange-error").css("display", "none");
    });

    if (!HmpInfo.IsValidAddress) {
        switchToReadOnly(false);
        $("#AddressTypeSelectedMailing").removeAttr("checked");
        $("#AddressTypeSelectedShipping").attr("checked", "checked");
    }

    if ($("#AddressTypeSelectedMailing").is(":checked")) {
        switchToReadOnly(true);
    }

    $("#addressOptions input:radio").on("click", shippingOptionsRadioClickHandler);

    if (HmpInfo.HasSpecialRuleSKU == "True") {
        $("#ShippingAddress_PostalCode").change(checkSpecialSKU);
    }
}

function shippingOptionsRadioClickHandler() {
    var valueSelected = $("#addressOptions input:radio:checked").val();
    if (valueSelected === 'Shipping' || valueSelected === 'Legal') {
        $("#ShippingAddress_SectionRequired").val(true);
        setValue('#ShippingAddress_AddressLine1', '');
        setValue('#ShippingAddress_AddressLine2', '');
        setValue('#ShippingAddress_AddressLine3', '');
        setValue('#ShippingAddress_AddressLine4', '');
        setValue('#ShippingAddress_Colony', '');
        cleanAddressValues("ShippingAddress_");

        $('#shippingmethodselected-error').css('display', 'none');
        switchToReadOnly(false);
    }
    else {
        $("#ShippingAddress_SectionRequired").val(false);
        $("#InvalidAddress").css('display', 'none');
        $('#ShippingAddress_CareOfName-error').css('display', 'none');
        switchToReadOnly(true);
        if (valueSelected === 'Mailing') {
            PersonalInfo.IsValidAddress = "True";
        }
        if (HmpInfo.UseShippingHandler === 'True') {
            if (AddressInfo.MailingAddressNotAvailableForShippping) {
                $('#shippingmethodselected-error').css('display', 'block');
                $("#ShippingAddress_ShippingMethodSelected").val("");
            }
            else {
                AddressInfo.ShippingMethodsEventHandler(true);
            }
        }
        if (AddressInfo.DisplayEmptyShippingMethodsMessage.toLowerCase() === "true" && AddressInfo.EmptyShippingMethods.toLowerCase() === "true") { 
            $('#shippingmethodselected-error').css('display', 'block');
        }

    }
    if (HmpInfo.HasSpecialRuleSKU == "True") {
        checkSpecialSKU();
    }
}


HmpInfo.IsNullOrEmpty = function (selector) {
    var value = $(selector).val();
    return value === undefined || value === null || value.trim() === "";
}

function checkSpecialSKU() {

    var valueSelected = $("#addressOptions input:radio:checked").val();
    var isMailingAddres = valueSelected === 'Mailing';

    var state = $("#ShippingAddress_State").val();
    var city = $("#ShippingAddress_City").val();
    var colony = $("#ShippingAddress_Colony").val();
    var postalCode = $("#ShippingAddress_PostalCode").val();

    var currentState = isMailingAddres ? HmpInfo.State : state;
    var currentCity = isMailingAddres ? HmpInfo.City : city;
    var currentColony = isMailingAddres ? HmpInfo.Colony : colony;
    var currentPostalCode = isMailingAddres ? HmpInfo.PostalCode : postalCode;

    var uri = window.location.protocol + "//" + window.location.host + '/contract/api/Shipping/SpecialSKU?locale=' + AddressInfo.Locale + '&state=' + currentState + '&city=' + currentCity + '&colony=' + currentColony + '&zipCode=' + currentPostalCode;

    $.ajax({
        url: uri,
        type: 'GET',
        dataType: 'text',
        contentType: 'application/json; charset=utf-8',
        async: false,
        success: specialSkuSuccess,
        error: function (jqXHR, textStatus, err) {
            //console.log(err);
        }
    });
}

function specialSkuSuccess(data) {
    var response = JSON.parse(data);
    var selected = null;
    if (response === null) {
        $(".product-option.default").css("display", "inline");
        $(".product-option.default:first [type=radio]").prop('checked', true);
        selected = $(".product-option.default #SkuOption_" + $("#HmpDetails_Sku").val());
        if (selected.length > 0) {
            selected.prop('checked', true);
        } else {
            $(".product-option.default:first [type=radio]").prop('checked', true);
        }
        $(".product-option:not(.default)").css("display", "none");
    }
    else {
        $(".product-option." + response).css("display", "inline");
        selected = $(".product-option." + response + " #SkuOption_" + $("#HmpDetails_Sku").val());
        if (selected.length > 0) {
            selected.prop('checked', true);
        } else {
            $(".product-option." + response + ":first [type=radio]").prop('checked', true);
        }
        $(".product-option:not(." + response + ")").css("display", "none");
    }
    if (data !== HmpInfo.SelectedGroup) {
        HmpOptionsModule.updateSKU($(".product-option [type=radio]:checked"));
        HmpInfo.SelectedGroup = data;
    }
}

function SetMailingAddressBinding(valueSelected) {
    if (HmpInfo.HasAddressDictionary && HmpInfo.PreloadedAddresses && valueSelected !== "NewAddress") {
        $.each(HmpInfo.PreloadedAddresses, function (key, value) {
            if (valueSelected === key) {
                HmpInfo.AddressLine1 = value.AddressLine1;
                HmpInfo.AddressLine2 = value.AddressLine2;
                HmpInfo.AddressLine3 = value.AddressLine3;
                HmpInfo.AddressLine4 = value.AddressLine4;
                HmpInfo.City = value.CityText;
                HmpInfo.State = value.StateText;
                HmpInfo.Colony = value.Colony;
                HmpInfo.PostalCode = value.PostalCode;
                HmpInfo.Colony = value.Colony;
                HmpInfo.IsValidAddress = value.IsValidAddress;
                if (value.CareOfName === '' || !value.CareOfName) {
                    HmpInfo.CareOfName = HmpInfo.DefaultCareOfName;
                }
                else {
                    HmpInfo.CareOfName = value.CareOfName;
                }
            }
        });
    }
}

function switchToReadOnly(isReadOnly) {
    if (isReadOnly) {
        $("#NewShippingAddress").hide();
        $("#SameShippingAddress").show();
    }
    else {
        $("#NewShippingAddress").show();
        $("#SameShippingAddress").hide()
    }
} ;
var Shipping = {};
Shipping.PickupOptionsData = '';

Shipping.Init = function () {
    $(document).ready(InitializeShipping);
}

function InitializeShipping() {

    $('.show').click(showClick);

    $('#DeliveryOptionSelected').change(changeDeliveriOption);

    $("#ShippingForm").on('submit', submitForm);
    Shipping.InitializeForm($('#DeliveryOptionSelected').val());
    ApplyBehaviorValidateZipCodeRange($("#ShippingAddress_PostalCode"));

    if (!isEmpty(AddressInfo.ShippingMethodsRanges)){
        Shipping.ShipMethodsBehavior();
    }
}

function showClick() {
    var dataTarget = $(this).data('target');
    $('#' + dataTarget).slideToggle();
}

function changeDeliveriOption() {
    var valueSelected = $(this).val();
    Shipping.InitializeForm(valueSelected);
    return false;
}

function submitForm() {
    var shippingAddressMethodSelected = $('#ShippingAddress_ShippingMethodSelected');
    var deliveryOptionMethod = $("#DeliveryOptionSelected");

    if (Fedex.IsValid === 'False' &&
        $("#IsFedexPickupSelected").val() === "True") {
        $("#NoFedexOption").css('display', '');
        return false;
    }
    if (PickupFromCourier.IsValid === 'False' &&
        $("#IsPickUpFromCourierSelected").val() === "True") {
        return false;
    }
    if (PersonalInfo.IsValidAddress === "False" ||
        PersonalInfo.IsValidZipCode === "False") {
        return false;
    }
    var selectedHmpOption = "";
   
    if ($("[id^='SkuOption_']").is('option')) {
        selectedHmpOption = $('select[name="HmpDetails.SkuOptions"] option:selected');
        if (selectedHmpOption !== undefined && selectedHmpOption.val() === "") {
            $('#gralErroShippingMessage').css('display', 'block');
            return false;
        }
    } else {
        selectedHmpOption = $('input[name="HmpDetails.SkuOptions"]:checked');
        if (selectedHmpOption !== undefined && selectedHmpOption.length < 1) {
            $('#gralErroShippingMessage').css('display', 'block');
            return false;
        }
    }

    if (deliveryOptionMethod.val() === 'S') {
        var isValidForm = true;
        if (selectedHmpOption !== undefined && selectedHmpOption.attr("is-digital-hmp") === "True") {
            // Have to empty out the dropdown so it doesn't raise an error in the next "if" condition.
            shippingAddressMethodSelected.empty();
        }

        if (shippingAddressMethodSelected.val() === "") {
            if (!$("#ShippingAddress_ShippingMethodSelected-error").is(":visible")) {
                $('#shippingmethodselected-error').css('display', 'block');
            }
            isValidForm = false;
        }
        else {
            $('#shippingmethodselected-error').css('display', 'none');
            if (AddressInfo.BlockOnExperianFailed === "True" && AddressInfo.IsInvalidExperian) {
                isValidForm = false;
            }
        }
        return isValidForm;
    }

    if (AddressInfo.BlockOnExperianFailed === "True" && AddressInfo.IsInvalidExperian) {
        return false;
    }

    $('#ShippingAddress_State').removeAttr('disabled');
    $('#ShippingAddress_PostalCode').removeAttr('disabled');
    $('#ShippingAddress_Colony').removeAttr('disabled');
    $('#ShippingAddress_City').removeAttr('disabled');

}

Shipping.ShipMethodsBehavior = function () {
    var selector = document.getElementById("ShippingAddress_ShippingMethodSelected");
    Shipping.applyZipCodePostalBehavior(selector);
}

var cloneSelectorShippingMethodSelected;
Shipping.applyZipCodePostalBehavior = function (selector) {
    if (cloneSelectorShippingMethodSelected === undefined) {
        var cloneNode = document.querySelector('#ShippingAddress_ShippingMethodSelected').cloneNode(true);
        cloneSelectorShippingMethodSelected = $.extend({}, cloneNode);
    }

    var ranges = [];
    if (!isEmpty(AddressInfo.ShippingMethodsRanges)) {
        ranges = JSON.parse(AddressInfo.ShippingMethodsRanges.replace(/&quot;/g, '\\"').replace(/\\/g, ''));
    }

    if (selector !== null) {
        var zipCodeSelector = document.getElementById("ShippingAddress_PostalCode");
        eventZipCodeChangeShipMethods(zipCodeSelector, ranges, selector);
        zipCodeSelector.addEventListener("change", function (e) {
            eventZipCodeChangeShipMethods(zipCodeSelector, ranges, selector);
        });
    }
}

var eventZipCodeChangeShipMethods = function (zipCodeSelector, ranges, selector) {
    if (isNaN(parseInt(zipCodeSelector.value.split('-')[0])) === false) {
        var zipCode = zipCodeSelector.value.split('-')[0];
        ranges.forEach(function (range) {
            if (zipCode >= range.minValue && zipCode <= range.maxValue) {
                $(selector).empty();
                range.freightCodes.forEach(function (freightCode) {
                    var opt = document.createElement('option');
                    opt.innerHTML = cloneSelectorShippingMethodSelected.innerHTML;
                    var option = opt.querySelector('option[value="' + freightCode + '"]');
                    selector.add(option);
                });
            }
        });
        if (selector.options && selector.options.length === 0) {
            selector.innerHTML = cloneSelectorShippingMethodSelected.innerHTML;
        }
    } else {
        $(selector).empty();
    }
}

Shipping.InitializeForm = function (valueSelected) {
    var addressValueSelected = $("#addressOptions input:radio:checked").val();
    var postalCode = "";
    if (valueSelected === 'S') {
        $("#shippingInfo").css('display', '');
        $('#pickUpAddressSelected').css('display', 'none');
        $("#pickupInfo").css('display', 'none');
        $('#pickUpFromCourierAddressSelected').css('display', 'none');
        $("#PickUpAdvisoryMsg").css('display', 'none');
        $('#addressOptions').css('display', '');
        if (addressValueSelected === 'Shipping' || addressValueSelected === 'Legal') {
            $("#ShippingAddress_SectionRequired").val(true);
            switchToReadOnly(false);
            if ($('#ShippingAddress_ShippingMethodSelected option').length === 2) {
                $('#ShippingAddress_ShippingMethodSelected option:eq(1)').attr("selected", 'selected');
            }
            postalCode = $("#ShippingAddress_PostalCode").val();
        }
        else if (addressValueSelected === "Mailing") {
            $("#ShippingAddress_SectionRequired").val(false);
            $("#InvalidAddress").css('display', 'none');
            switchToReadOnly(true);
            postalCode = $("#MailingAddress_PostalCode").val();
        }
        else {
            switchToReadOnly(false);
        }

        if (AddressInfo.ShowShippingForPostalCode !== "") {
            postalCodeDisplayShippingMethod(postalCode);
        }
    } else {
        $("#shippingInfo").css('display', 'none');
        $('#pickUpAddressSelected').css('display', 'inline-block');
    }

    if (valueSelected === 'F') {
        $("#fedexInfo").css('display', '');
        $('#pickUpFromCourierAddressSelected').css('display', 'none');
        Fedex.SetUpPickUpFedexOffice(Fedex.CurrentItem);
    } else {
        $("#fedexInfo").css('display', 'none');
    }
    if (valueSelected === 'P') {
        $('#pickUpFromCourierAddressSelected').css('display', 'none');
        $('#pickUpAddressSelected').css('display', 'inline-block');
        $("#pickupInfo").css('display', ''); 
        $("#PickUpAdvisoryMsg").css('display', 'inline-block');
        var pickUpSelected = $("#PickupAddress_PickUpSelectedOption").val();
        Pickup.SetPickupAddressBinding(pickUpSelected, false);
        if (pickUpSelected == 'PPP') {
            var partnerPickUpSelected = $("#PickupAddress_PartnerPickUpSelectedOption").val();
            Pickup.SetPartnerPickupAddressBinding(partnerPickUpSelected);
        }
        PersonalInfo.IsValidAddress = "True";
        $('#Pickup_disclaimer').css('display', 'block');
    } else {
        $("#pickupInfo").css('display', 'none');
        $("#PickUpAdvisoryMsg").css('display', 'none');
        $('#Pickup_disclaimer').css('display', 'none');
    }

    if (valueSelected === 'C') {
        $('#pickUpFromCourierAddressSelected').css('display', 'inline-block');
        $("#pickupInfoFromCourier").css('display', '');
        $('#pickUpAddressSelected').css('display', 'none');
        var pickUpFromCourierSelected = $("#PickupFromCourierAddress_SelectedOption").val();
        PickupFromCourier.SetPickupAddressBinding(pickUpFromCourierSelected);
    } else {
        $("#pickupInfoFromCourier").css('display', 'none'); 
    }

    var isShipping = valueSelected === 'S'  ? "True" : "False";
    var isFedex = valueSelected === 'F' ? "True" : "False";
    var isPickup = valueSelected === 'P' ? "True" : "False";
    var isPickupFromCourier = valueSelected === 'C' ? "True" : "False"; 
    $("#IsShippingSelected").val(isShipping);
    $("#IsFedexPickupSelected").val(isFedex);
    $("#IsPickUpSelected").val(isPickup); 
    $("#IsPickUpFromCourierSelected").val(isPickupFromCourier);
    $("#ShippingAddress_SectionRequired").val(isShipping);
    $("#FedexPickupAddress_SectionRequired").val(isFedex);
    $("#FedexPickupAddress_FedexAlternatives_SectionRequired").val(isFedex);
    $("#PickupAddress_SectionRequired").val(isPickup); 

    $('input[name="HmpDetails.SkuOptions"]').change(function () {
        $('#gralErroShippingMessage').css('display', 'none');
    });
}

Shipping.LoadPickupAddressBinding = function (address) {
    var pickupAddress = '';
    var pickuplist = [];
    if (address) {
        var hidePickupInfo = Shipping.HidePickupInfo;

        if (AddressInfo.CountryCode == "PA") {
            pickuplist = ["CourierStoreName", "CountyDistrict <,>", "Line4 <,>", "Line2 <,><br>", "Line1 <,>", "Line3 <,><br>", "State"];
        }
        else if (AddressInfo.CountryCode == "GH") {
            pickuplist = ["PickupAddressTitle", "CourierStoreName", "Line1 <br>", "Line2 <br>", "CountyDistrict <br>", "Line3 <br>", "PostalCode <,>", "City <,>", "State <br>"];
        } else {
            pickuplist = ["CourierStoreName", "Line1 <br>", "Line2 <br>", "CountyDistrict <br>", "Line3 <br>", "PostalCode <,>", "City <,>", "State"];
        }


        if (AddressInfo.CountryCode == "ID" && (hidePickupInfo.indexOf("Province") === -1 && address.Address.Province != null && $.trim(address.Address.Province) != "")) {
            pickupAddress = pickupAddress + address.Address.Province + '<br/>';
        }

        // For PA - The format should be as mentioned above. So skipping this logic
        if (AddressInfo.CountryCode != "PA" && hidePickupInfo.indexOf("Line3") === -1 && address.Address.Line3 != null && $.trim(address.Address.Line3) != "") {
            pickupAddress = pickupAddress + address.Address.Line3 + '<br/>';
        }


        pickuplist.forEach(function (field) {
            if (field.includes("PickupAddressTitle")) {
                pickupAddress = $("#pickupAddressSelectedTxt").text() + ': <br/>';
            }

            if (field.includes("CourierStoreName")) {
                pickupAddress += '<div class="col12 margin-t-20">' + ($.isEmptyObject(address.CourierStoreName) ? "" : address.CourierStoreName + '<br/>');
            }

            var items = field.split(" ");
            if (items[0] != null && address.Address.hasOwnProperty(items[0])) {
                if (hidePickupInfo.indexOf(items[0]) === -1 && address.Address[items[0]] != null && $.trim(address.Address[items[0]]) != "") {
                    pickupAddress += address.Address[items[0]];
                }
                else {
                    field = items[1] != null ? field.replace(items[1], '') : field;
                }
            }

            if (field.includes("<,>")) {
                pickupAddress = pickupAddress + ', ';
            }
            if (field.includes("<br>")) {
                pickupAddress = pickupAddress + '<br/>';
            }
        });

        if (hidePickupInfo.indexOf("Information") === -1 && address.Information != null && $.trim(address.Information) != "") {
            pickupAddress = pickupAddress + "<br/>" + address.Information + "<br/>";
        }

        if (hidePickupInfo.indexOf("Distance") === -1 && address.Distance != null && $.trim(address.Distance) != "") {
            pickupAddress = pickupAddress + "<br/>" + address.Distance;
            if (hidePickupInfo.indexOf("DistanceUnit") === -1) {
                pickupAddress = pickupAddress + " " + (address.DistanceUnit == null || address.Distance === "null" ? "" : address.DistanceUnit);
            }
            pickupAddress = pickupAddress + " <br/>";
        }
        if (hidePickupInfo.indexOf("ContactInfo") === -1 && address.ContactInfo != null && $.trim(address.ContactInfo) != "") {
            pickupAddress = pickupAddress + address.ContactInfo + "<br/>";
        }

        if (hidePickupInfo.indexOf("Availability") === -1 && address.Availability != null && $.trim(address.Availability) != "") {
            pickupAddress += '<br/><strong>' + Fedex.FedexHeadAvailable + '</strong>';
            pickupAddress += "<br/>" + address.Availability.split("|").join("<br/>");
        }
        if (!$.isEmptyObject(address.Latitude)) {
            var locale = $("#Locale").val();
            pickupAddress += '<a target="_blank" href="/Contract/' + locale + '/SignUp/SelectedMapView?CourierStoreName=' + encodeURIComponent(address.CourierStoreName + ' #' + address.CourierStoreNumber) + '&addressLine1=' + encodeURIComponent(address.Address.Line1) + '&contactInfo=' + encodeURIComponent(address.ContactInfo) +
                '&latitude=' + address.Latitude + '&longitude=' + address.Longitude + '">' + Fedex.ViewMap + '</a>'
        }
    }
    var pickuplbl = $("[id$=pickUpAddressSelected]");
    if (pickuplbl.length) {
        pickuplbl.get(0).innerHTML = pickupAddress;
    }
}

Shipping.LoadPickupFromCourierAddressBinding = function (address) {
    var pickupAddress = '';
    if (address) {
        pickupAddress = '<div class="col12 margin-t-20"><strong>' + Fedex.FedexHeadLocation + '</strong><br/>';

        if (address.Address.address !== null && $.trim(address.Address.address) !== "") {
            pickupAddress = pickupAddress + address.Address.address + '<br/>';
        }

        if (address.Address.colony !== null && $.trim(address.Address.colony) !== "") {
            pickupAddress = pickupAddress + address.Address.colony + '<br/>';
        }

        if (address.Address.postalCode !== null && $.trim(address.Address.postalCode) !== "") {
            pickupAddress = pickupAddress + address.Address.postalCode + ', ';
        }

        if (address.Address.city !== null && $.trim(address.Address.city) !== "") {
            pickupAddress = pickupAddress + address.Address.city + ', ';
        }

        if (address.Address.state !== null && $.trim(address.Address.state) !== "") {
            pickupAddress = pickupAddress + address.Address.state;
        }

        if (address.Information !== null && $.trim(address.Information) !== "") {
            pickupAddress = pickupAddress + "<br/>" + address.Information + "<br/>";
        }
    }
    var pickuplbl = $("[id$=pickUpFromCourierAddressSelected]");
    if (pickuplbl.length) {
        pickuplbl.get(0).innerHTML = pickupAddress;
    }
}


Shipping.SelectedMapLocation = function (address) {
    var marker = { lat: parseFloat(address.Latitude), lng: parseFloat(address.Longitude) };
    var mapOptions = {
        center: marker,
        zoom: 12
    };

    var map = new google.maps.Map(document.getElementById('FedexSelectedMapWrapper'), mapOptions);
    if (marker) {
        var contentString = '<div id="fedexContent">'
            + '<h4 class="fedexHeading">' + address.CourierStoreName + '</h4>'
            + '<div id="bodyContent">'
            + '<p class="margin-b-0">' + address.Address.Line1 + '<br>'
            + address.ContactInfo + '<br>'
            + '</p>'
            + '</div>';
        var infowindow = new google.maps.InfoWindow({
            content: contentString
        });

        // Place a draggable marker on the map
        var markerSingle = new google.maps.Marker({
            position: marker,
            map: map,
            title: "Selectd Fedex Location"
        });

        google.maps.event.addListener(markerSingle, 'click', function () {
            infowindow.open(map, markerSingle);
        });
    }
}
;
var ImageUpload = {};
ImageUpload.CompressImage = false;
ImageUpload.Base64Image = false;
ImageUpload.IgnoreHandler = false;

function changeEventHandlerUpload(event) {

    if (!ImageUpload.CompressImage && !ImageUpload.Base64Image) {
        return;
    }
}

function changeEventHandlerUpload(event) {
    var input = $(event.target);
    var file = event.target.files[0];
    var fileType = file.type;
    var maxFileSize = 0;
    var maxSize = 0;
    if (ImageUpload.IgnoreHandler)
    {
        var size = file.size;
        var fileSize = Math.round((size / 1024));
        var fileTypeAllowed = input.attr("accept");
        var fileExtension = fileType.split('/').pop();
        maxFileSize = isNaN(parseInt(input.attr("max-file-size"))) ? 4194304 : parseInt(input.attr("max-file-size"));
        maxSize = Math.round((maxFileSize / 1024));
        if (fileSize >= maxSize || fileTypeAllowed.indexOf(fileExtension) === -1) {
            input.val("");
        }
        return;
    }

    var documentType = input.parents("div").siblings('.document-type:first').val();
    var loader = $("#document_" + documentType + "Loader");
    loader.css('display', 'block');
    if (!ImageUpload.CompressImage || fileType.split("/")[0] != "image") {
        var successElement = input.parents("div").siblings('.valid-file:first');
        var failElement = input.parents("div").siblings('.invalid-file:first');
        var flagElement = input.parents("div").siblings('.document-flag');
        var route = input.parents("div").siblings('.fileRoute:first');
        input.val("");
        sendData(file, documentType, successElement, failElement, flagElement, route);
        return;
    }
    maxFileSize = 4194304;
    maxSize = Math.round((maxFileSize / 1024));
    var reader = new FileReader();

    reader.onload = function (event) {
        // blob stuff
        var blob = new Blob([event.target.result]); // create blob...
        window.URL = window.URL || window.webkitURL;
        var blobUrl = window.URL.createObjectURL(blob); // and get it's URL

        var image = new Image();
        image.src = blobUrl;
        image.onload = function () {
            input.val("");
            var docType = input.parents("div").siblings('.document-type:first').val();
            var docRoute = input.parents("div").siblings('.fileRoute:first');
            var success = input.parents("div").siblings('.valid-file:first');
            var fail = input.parents("div").siblings('.invalid-file:first');
            var compressedFile = dataURLtoFile(resizeImage(image, fileType, maxSize), file.name);
            var flag = input.parents("div").siblings('.document-flag');
            sendData(compressedFile, docType, success, fail, flag, docRoute);
            return;
        };
    };

    reader.readAsArrayBuffer(file);
}

function sendData(file, type, successElement, failElement, flagElement, routeElement)
{
    var formData = new FormData();
    formData.append("IdentityFile", file);
    formData.append("DocumentType", type);
    formData.append("FileRoute", "dummy/dummy.file");
    var loader = $("#document_" + type + "Loader");
    var url = window.location.href.split("SignUp")[0] + "//SignUp//ProofOfIdentityUpload"

    if (!formData) return;
    var request = new XMLHttpRequest();
    successElement.css('display', 'none');
    failElement.css('display', 'none');
    request.onreadystatechange = function () {
        if (request.readyState === 4) {
            try {
                var response = JSON.parse(request.responseText);
                if (request.status === 200 && response) {
                    flagElement.val("True");
                    successElement.css('display', 'block');
                } else {
                    routeElement.val("");
                    flagElement.val("False");
                    failElement.css('display', 'block');
                }
            } catch (err)
            {
                routeElement.val("");
                flagElement.val("False");
                failElement.css('display', 'block');
            }
            loader.css('display', 'none');
        }
    }
    request.open('POST', url);
    request.send(formData);
}

function dataURLtoFile(dataurl, filename) {

    var arr = dataurl.split(','),
        mime = arr[0].match(/:(.*?);/)[1],
        bstr = atob(arr[1]),
        n = bstr.length,
        u8arr = new Uint8Array(n);

    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }

    return new File([u8arr], filename, { type: mime });
}

// === RESIZE ====
function resizeImage(img, fileType, maxSize) {

    var canvas = document.createElement('canvas');

    var width = img.width;
    var height = img.height;

    // Calculate the width and height if one of them are bigger than max size
    if (width > maxSize || height > maxSize) {
        if (width > height) {
            if (width > maxSize) {
                height = Math.round(height *= maxSize / width);
                width = maxSize;
            }
        } else {
            if (height > maxSize) {
                width = Math.round(width *= maxSize / height);
                height = maxSize;
            }
        }
    }

    // Resize the canvas and draw the image data into it
    canvas.width = width;
    canvas.height = height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0, width, height);

    return canvas.toDataURL("image/jpeg", 0.7); // get the data from canvas as 70% JPG (can be also PNG, etc.)

};
var HmpOptions = {};
HmpOptions.DisplayDefaultSkuOnly = false;

var HmpOptionsModule = (function () {
    function Init() {
        $('div#hmpMini input[type="radio"]').change(function () {
            updateSKU($(this));
        });
        if ($('select#HmpDetails_SkuOptions').find('option').length > 0) {
            // when sku is selected as default
            var defaultSKU = $('select#HmpDetails_SkuOptions option:selected').val();
            if (defaultSKU !== "" && defaultSKU !== undefined) {
                var def = $("div.product-info[id^='sku-" + defaultSKU + "']");
                def.closest("#hmpMini").css('display', 'block');
                def.addClass('selected');
            }

            $('select#HmpDetails_SkuOptions').change(function () {
                updateSKUDropdown();
            });
        }
    }

    function updateSKUDropdown() {
        var currentSKU = $('select#HmpDetails_SkuOptions option:selected');

        if (HmpOptions.DisplayDefaultSkuOnly === "False") {
            $('.product-option').css('display', 'none');
            $('.product-info').removeClass('selected');

            if (currentSKU.val() !== "" && currentSKU.val() !== undefined) {
                var current = $("div.product-info[id^='sku-" + currentSKU.val() + "']");
                current.closest("#hmpMini").css('display', 'block');
                current.addClass('selected');
            }
        }

        $("#HmpDetails_Sku").val(currentSKU.attr('value'));
        $("#HmpDetails_ImagePath").val(currentSKU.attr('image-path'));
        $("#HmpDetails_Name").val(currentSKU.attr('data-name'));
        $("#HmpDetails_Description").val(currentSKU.attr('description'));
        $("#HmpDetails_ListPrice").val(currentSKU.attr('list-price'));
    }

    function updateSKU(radio) {
        var dataProduct, title, language;
        $("#HmpDetails_Sku").val(radio.attr('value'));
        $("#HmpDetails_ImagePath").val(radio.attr('image-path'));
        $("#HmpDetails_Name").val(radio.attr('data-name'));
        $("#HmpDetails_Description").val(radio.attr('description'));
        // get list price from hidden field instead of radio button list price
        $("#HmpDetails_ListPrice").val($('#' + radio.val()).val());

        if (HmpInfo.SelectedGroup === "") {
            dataProduct = radio.data('product');
            title = radio.closest('.product-info').find('h4').text();
            language = $("label[for='" + radio.attr("id") + "']").text();
            $('.product-option').removeClass('selected').find('.half').removeClass('selected');
            if (!isEmpty(language)) {
                $('#' + dataProduct).addClass('selected').find('.' + language).addClass('selected');
            }
            else {
                $('#' + dataProduct).addClass('selected');
            }

        } else {
            var skuNumber = radio.attr('value');
            $('div#hmpMini').find(".selected").css("display", "none");
            $('.product-info').removeClass('selected');
            var selectedSku = $("div.product-info[id^='sku-" + skuNumber + "']");
            selectedSku.css("display", "block");
            selectedSku.addClass("selected");
            title = selectedSku.find("h4").text();
        }

        // Toggles the visibility of the Shipping page's address section if the selected Hmp option is
        // a digital Hmp or not.
        if (radio.attr('is-digital-hmp') === "True") {
            $("#address").css("display", "none");
            $("#HasDigitalHmp").val(true);
            $("#ShippingAddress_SectionRequired").val(false);
        }
        else {
            $("#address").css("display", "");
            $("#HasDigitalHmp").val(false);
            $("#ShippingAddress_SectionRequired").val(true);

            if (AddressInfo.UseShippingHandler === "True") {
                $("#ShippingMethodsOptions").css("display", "");
            }
        }

        $('#hmpTotal').slideDown();
        $('#hmpTotal').find('.title').html(title);
    }

    return {
        Init: Init,
        updateSKU: updateSKU
    };
})();

HmpOptions.Init = function () {
    HmpOptionsModule.Init();
};

;
var Pickup = {};
Pickup.PickupOptionsData = '';
Pickup.PartnerPickupOptionsData = '';
Pickup.HasPartnerPickupPoint = 'False';
Pickup.IsCombinePhoneValidation = false;


Pickup.Init = function () {
    $(document).ready(function () {
        ready();

        BindingEvents();
    });
    $('#PickupAddress_PickUpSelectedOption').blur(pickUpOptionOnBlurHandler);

    if (Pickup.HasPartnerPickupPoint == 'True') {
        $('#PickupAddress_PartnerPickUpSelectedOption').blur(pickUpOptionOnBlurHandler);
    }

}

Pickup.SetPickupAddressBinding = function (valueSelected, clearPartnerPickup) {
    $('#partnerPickupPoint').css('display', 'none');
    if (clearPartnerPickup == undefined || clearPartnerPickup == null) {
        clearPartnerPickup = false;
    }
    if ($('#PickupAddress_PickUpSelectedOption').val() == "") {
        $('#pickUpAddressSelected').css('display', 'none');
    } else if ($('#PickupAddress_PickUpSelectedOption').val() == "PPP") {
        $('#pickUpAddressSelected').css('display', 'none');
        $('#partnerPickupPoint').css('display', '');

        if (clearPartnerPickup) {
            $('#PickupAddress_PartnerPickUpSelectedOption').val("");
        } else {
            var partnerValue = $('#PickupAddress_PartnerPickUpSelectedOption').val();
            if (!isEmpty(partnerValue)) {
                Pickup.SetPartnerPickupAddressBinding(partnerValue);
            }
        }
    }
    else {
        for (var i = 0; i < Pickup.PickupOptionsData.length; i++) {

            if (valueSelected === Pickup.PickupOptionsData[i].Key) {
                Shipping.LoadPickupAddressBinding(Pickup.PickupOptionsData[i]);
                $('#pickUpAddressSelected').css('display', 'inline-block');
                break;
            }
        }
    }
}

Pickup.SetPartnerPickupAddressBinding = function (valueSelected) {

    if ($('#PickupAddress_PartnerPickUpSelectedOption').val() == "") {
        $('#pickUpAddressSelected').css('display', 'none');
    }
    else {
        for (var i = 0; i < Pickup.PartnerPickupOptionsData.length; i++) {

            if (valueSelected === Pickup.PartnerPickupOptionsData[i].Key) {
                Shipping.LoadPickupAddressBinding(Pickup.PartnerPickupOptionsData[i]);
                $('#pickUpAddressSelected').css('display', 'inline-block');
                break;
            }
        }
    }
}

Pickup.PickupFilterDropdownEventHandler = function () {
    var valueSelected = this.value;

    Pickup.GetFilteredPickupOptions(valueSelected);

    return false;
}

Pickup.GetFilteredPickupOptions = function () {   

    var uri = String.format("{0}//{1}/contract/api/pickup/GetFilteredPickupOptions", window.location.protocol, window.location.host);

    $.get({
        url: uri,
        data: { locale: Pickup.Locale, state: $("#PickupAddress_State").val(), city: $("#PickupAddress_City").val() },
        dataType: 'json',
        success: setFilteredPickupOptions,
        error: function (jqXHR, textStatus, err) {
            $('#PickupAddressSelected').css('display', 'none');
        }
    });
    return false;
};

function ready() {
    $('#PickupAddress_PickUpSelectedOption').change(method);
    $('#PickupAddress_PartnerPickUpSelectedOption').change(partnerPickupChange);

    $('#PickupAddress_State')
        .change(Pickup.PickupFilterDropdownEventHandler)
        .change(function () {
            return AddressInfo.StateEventHandler("PickupAddress");
        });

    $('#PickupAddress_City').change(Pickup.PickupFilterDropdownEventHandler);
}

function BindingEvents() {
    if (Pickup.IsCombinePhoneValidation) {
        //listening to form validate event
        $('form').addTriggersToJqueryValidate().triggerElementValidationsOnFormValidation();
    }

    $('#PickupAddress_PickupCustomPhoneAreaCode').elementValidAndInvalid(function (elem) {
        DisplayValidationMessage(elem);
    }, function (elem) {
        DisplayValidationMessage(elem);
    });

    $('#PickupAddress_PickupCustomPhoneNumber').elementValidAndInvalid(function (elem) {
        DisplayValidationMessage(elem);
    }, function (elem) {
        DisplayValidationMessage(elem);
    });
}

function method() {
    var valueSelected = $('#PickupAddress_PickUpSelectedOption').val();
    Pickup.SetPickupAddressBinding(valueSelected, true);
    return false;
}

function partnerPickupChange() {
    if (!isEmpty($('#PickupAddress_PickUpSelectedOption').val())) {

        var valueSelected = $('#PickupAddress_PartnerPickUpSelectedOption').val();
        Pickup.SetPartnerPickupAddressBinding(valueSelected);
    }

    return false;
}

function pickUpOptionOnBlurHandler(event) {
    $(this).valid();
    return false;
}

function DisplayValidationMessage(elem) {
    var errors = $(elem).closest('.input-field').find('.field-validation-error');
    errors.show();
    if (errors.length != 1) {
        errors.each(function () {
            if ($(elem).prop('name') != $(this).data('valmsg-for')) {
                $(this).hide();
            }
        });
    }
    else if ($(errors[0]).data("valmsg-for") != $(elem).prop('name')) {
        $('[name="' + $(errors[0]).data("valmsg-for") + '"]').valid();
    }
}

function setFilteredPickupOptions(response) {
        $("#PickupAddress_PickUpSelectedOption").empty().append('<option value="" selected>' + Pickup.SelectOne + '</option>').change();

        $("#PickupAddress_PickUpSelectedOption").prop("disabled", "disabled");

        $.each(response, function (index) {
            var option = String.format("<option value='{0}'>{1}</option>", response[index].Value, response[index].Text);
            $("#PickupAddress_PickUpSelectedOption").append(option);
        });

    $("#PickupAddress_PickUpSelectedOption").removeAttr('disabled');

        Pickup.IsValid = "True";    
}

;
var PickupFromCourier = {
    PickupBy: "",
    OptionsData: "",
    CountryCode: "",
    IsValid: ""
};

PickupFromCourier.Init = function () {
    $(document).ready(initializePickup);
};

var initializePickup = function () {

    switch (PickupFromCourier.PickupBy) {
        case "ZipCode":
            $("#PickupFromCourierAddress_PostalCode").on("change", _pickupFromCourierZipCodeOnChange);
        default:
            $("#PickupFromCourierAddress_State").on("change", _pickupFromCourierStateOnChange);
    }

    $("#PickupFromCourierAddress_City").blur(_cityOnBlurHandler);

    $('#PickupFromCourierAddress_SelectedOption').on("change", _pickupFromCourierOptionOnChange);

    if (!isEmpty(PickupFromCourier.OptionsData)) {
        $('#PickupFromCourierAddress_SelectedOption').trigger("change");
    }

    $("#PickupFromCourierAddress_State").blur(stateOnBlurHandler);
    $("#PickupFromCourierAddress_SelectedOption").blur(stateOnBlurHandler);
};

function _pickupFromCourierStateOnChange(event) {
    var valueSelected = $(this).val();
    if (valueSelected != "") {
        if (AddressInfo.PopulateCities === "True") {
            _setCityFromCourierOptions(valueSelected);
            $('#PickupFromCourierAddress_City').on("change", _pickupFromCourierCityOnChange);
        }
        else {
            PickupFromCourier.SetPickupFromCourierOptions(valueSelected);
        }
    } else {
        var courierSelect = $("#PickupFromCourierAddress_SelectedOption");
        courierSelect.find("option").remove();
        courierSelect.append('<option value="" selected>' + PickupFromCourier.SelectOne + '</option>');
        $('#PickupFromCourierAddress_SelectedOption option:eq(0)').attr('selected', 'selected');
        var citySelect = $("#PickupFromCourierAddress_City");
        citySelect.find("option").remove();
        citySelect.append('<option value="" selected>' + PickupFromCourier.SelectOne + '</option>');
        $('#PickupFromCourierAddress_City option:eq(0)').attr('selected', 'selected');
    }
    return false;
}

function _pickupFromCourierCityOnChange(event) {
    var state = $('#PickupFromCourierAddress_State').val();
    var city = $('#PickupFromCourierAddress_City').val();
    if (state != "" && city != "") {
        PickupFromCourier.SetPickupFromCourierOptions(state, city);
    } else {
        var courierSelect = $("#PickupFromCourierAddress_SelectedOption");
        courierSelect.find("option").remove();
        courierSelect.append('<option value="" selected>' + PickupFromCourier.SelectOne + '</option>');
        $('#PickupFromCourierAddress_SelectedOption option:eq(0)').attr('selected', 'selected');
    }
    return false;
}

function _pickupFromCourierZipCodeOnChange(event) {
    var value = $(this).val();
    PickupFromCourier.SetPickupFromCourierOptions("", "", value);
    return false;
}

function _pickupFromCourierOptionOnChange(event) {
    var valueSelected = $(this).val();
    PickupFromCourier.SetPickupAddressBinding(valueSelected);
    return false;
}

function _cityOnBlurHandler(event) {
    $(this).valid();
    return false;
}


function _setCityFromCourierOptions(state, city) {
    if (state === "" && city === "") {
        return false;
    }

    ToggleAjaxOnLoad(false); // Display loader
    var uri = String.format(window.location.protocol + "//" + window.location.host + "/contract/api/Pickup/GetCityFromCourier?locale={0}&state={1}", PickupFromCourier.Locale, state);
    var citySelect = $("#PickupFromCourierAddress_City");
    var courierSelect = $("#PickupFromCourierAddress_SelectedOption");
    var stateValue = state;
    citySelect.prop("disabled", "disabled");
    courierSelect.prop("disabled", "disabled");
    jQuery.support.cors = true;
    $.ajax({
        url: uri,
        type: 'GET',
        dataType: 'text',
        contentType: 'application/json; charset=utf-8',
        success: function (data) {
            var response = JSON.parse(data);
            if (response !== null && response !== undefined) {
                citySelect.find("option").remove();
                courierSelect.find("option").remove();
                citySelect.append('<option value="" selected>' + PickupFromCourier.SelectOne + '</option>');
                courierSelect.append('<option value="" selected>' + PickupFromCourier.SelectOne + '</option>');
                $.each(response, function (index) {
                    var option = String.format("<option value='{0}'>{1}</option>", response[index].Value, response[index].Text);
                    citySelect.append(option);
                });
                citySelect.removeAttr('disabled');
                courierSelect.removeAttr('disabled');
                var length = $('#PickupFromCourierAddress_City > option').length;
                if (length === 2) {
                    $('#PickupFromCourierAddress_City option:eq(1)').attr('selected', 'selected');
                    var valueSelected = $('#PickupFromCourierAddress_City').val();
                    PickupFromCourier.SetPickupFromCourierOptions(stateValue, valueSelected);
                } else {
                    $('#PickupFromCourierAddress_City option:eq(0)').attr('selected', 'selected');
                    $('#pickUpFromCourierAddressSelected').css('display', 'none');
                }

                PickupFromCourier.IsValid = "True";
            } else {
                PickupFromCourier.HandleNoResults();
            }
        },
        error: function (jqXHR, textStatus, err) {
            $('#pickUpFromCourierAddressSelected').css('display', 'none');
        },
        complete: function (jqHXR, status) {
            ToggleAjaxOnLoad(true);
        }
    });
    return false;
}

PickupFromCourier.SetPickupAddressBinding = function (valueSelected) {
    for (var i = 0; i < PickupFromCourier.OptionsData.length; i++) {
        if (valueSelected !== "" && valueSelected === PickupFromCourier.OptionsData[i].Key) {
            Shipping.LoadPickupFromCourierAddressBinding(PickupFromCourier.OptionsData[i]);
            $('#pickUpFromCourierAddressSelected').css('display', 'inline-block');
            break;
        }
    }
};

PickupFromCourier.SetPickupFromCourierOptions = function (state, city, zipCode) {
    if (state === "" && city === "" && zipCode === "") {
        return false;
    }

    ToggleAjaxOnLoad(false); // Display loader
    var uri = String.format(window.location.protocol + "//" + window.location.host + "/contract/api/Pickup/GetPickUpFromCourier?locale={0}&state={1}&city={2}&zipCode={3}", PickupFromCourier.Locale, state, city, zipCode);
    var courierSelect = $("#PickupFromCourierAddress_SelectedOption");
    courierSelect.prop("disabled", "disabled");
    jQuery.support.cors = true;
    $.ajax({
        url: uri,
        type: 'GET',
        dataType: 'text',
        contentType: 'application/json; charset=utf-8',
        success: function (data) {
            var response = JSON.parse(data);
            if (response !== null && response !== undefined) {
                var dataOptions = response.Items;
                courierSelect.find("option").remove();
                courierSelect.append('<option value="" selected>' + PickupFromCourier.SelectOne + '</option>');
                PickupFromCourier.OptionsData = response.DeliveryOptions;
                $.each(dataOptions, function (index) {
                    var option = String.format("<option value='{0}'>{1}</option>", dataOptions[index].Value, dataOptions[index].Text);
                    courierSelect.append(option);
                });
                courierSelect.removeAttr('disabled');
                var length = $('#PickupFromCourierAddress_SelectedOption > option').length;
                if (length === 2) {
                    $('#PickupFromCourierAddress_SelectedOption option:eq(1)').attr('selected', 'selected');
                    var valueSelected = $('#PickupFromCourierAddress_SelectedOption').val();
                    PickupFromCourier.SetPickupAddressBinding(valueSelected);
                } else {
                    $('#PickupFromCourierAddress_SelectedOption option:eq(0)').attr('selected', 'selected');
                    $('#pickUpFromCourierAddressSelected').css('display', 'none');
                }

                PickupFromCourier.IsValid = "True";
            } else {
                PickupFromCourier.HandleNoResults();
            }
        },
        error: function (jqXHR, textStatus, err) {
            $('#pickUpFromCourierAddressSelected').css('display', 'none');
        },
        complete: function (jqHXR, status) {
            ToggleAjaxOnLoad(true);
        }
    });
    return false;
};

PickupFromCourier.HandleNoResults = function () {
    var courierSelect = $('#PickupFromCourierAddress_SelectedOption');
    courierSelect.find('option').remove();
    courierSelect.prop('disabled', 'disabled');
    $('#pickUpFromCourierAddressSelected').css('display', 'none');
    PickupFromCourier.IsValid = "False";
};;
var Fedex = {};

Fedex.PostalCode = '';
Fedex.City = '';
Fedex.State = '';
Fedex.CountryCode = '';
Fedex.Locale = '';
Fedex.HidePickupInfo = '';
Fedex.HerbalifeAddress = '';
Fedex.SelectText = '';
Fedex.IsValid = '';
Fedex.ViewMap = '';
Fedex.LoadFromServer = '';

var zipCode = "";
var distance = "";
var FedexAlternativesJSON;

Fedex.Init = function () {

    $("#distanceOptions input:radio").on("change", distanceOptionsChange);
    Fedex.GetAndDisplayAlternatives(Fedex.PostalCode, $("#distanceOptions input:radio:checked").val());
    Fedex.LoadFromServer = "True";
    $("#FedexMapAllLocations").click(fedexMapAllLocationsClick);
    $('#fedexChoOther').click(fedexChoOtherClick);
    $("#newZipCode").focus(newZipCodeFocus);
}

Fedex.SelectFedexLocation = function (index) {
    $('#FedexMapTrigger').hide();
    $('#FedexMapAllLocations').hide();
    $('#FedexSingleMapWrapper').css('display', 'none');
    $("#fedexAlternativesOptionsTable").css('display', 'none');
    Fedex.SetUpPickUpFedexOffice(FedexAlternativesJSON[index]);
    return false;
}

Fedex.LoadAlternatives = function () {
    Fedex.GetAndDisplayAlternatives(Fedex.PostalCode, $("[name=distance]:checked").val());
    return false;
}

Fedex.ChangeZipCode = function () {
    Fedex.PostalCode = $("#newZipCode").val();
    Fedex.GetAndDisplayAlternatives(Fedex.PostalCode, $("#distanceOptions input:radio:checked").val());
    return false;
}

Fedex.GetAndDisplayAlternatives = function (newZipCode, newDistance) {
    if (newZipCode === "" || newDistance === "") {
        return false;
    }

    if (newZipCode === zipCode && newDistance === distance) {
        return false;
    } else {
        zipCode = newZipCode;
        distance = newDistance;
    }

    if (Fedex.City === undefined || Fedex.City === "" || Fedex.State === undefined || Fedex.State === "") {
        return false;
    }

    $('#showMoreFedex, #fedexFreightOptionsWrapper, #fedexChoOther, #fedexHeaderData, #pickUpAddressSelected, #pickUpFromCourierAddressSelected').hide(); //Hide Show more button
    $(".wrapper").append($("#FedexSingleMapWrapper").hide());
    $('#fedexAlternativesOptionsList').html('').show(); //Clean teh results and look for other results                        
    $('#FedexMapTrigger').hide(); //Hide map link 

    ToggleAjaxOnLoad(false); // Display loader

    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Pickup/GetFedexAlternatives/"
        + Fedex.CountryCode + "/" + Fedex.City + "/" + Fedex.State + "/" + $.trim(newZipCode) + "/"
        + newDistance + "/" + Fedex.Locale;

    jQuery.support.cors = true;
    $.ajax({
        url: uri,
        type: 'GET',
        dataType: 'text',
        contentType: 'application/json; charset=utf-8',
        success: function (data) {
            var viewModel = JSON.parse(data);
            FedexAlternativesJSON = viewModel;
            if (viewModel.length > 0 && viewModel[0].CourierStoreName !== "No offices available") {
                Fedex.PopulateResults();
                $("#NewPostalCodeEntered").html(newZipCode);
                if (Fedex.LoadFromServer === "True") {
                    Fedex.SetUpPickUpFedexOffice(Fedex.CurrentItem);
                    Fedex.LoadFromServer = "False";
                }
            } else {
                Fedex.HandleNoResults();
            }
        },
        error: function (jqXHR, textStatus, err) {
            freezeElements(['#DeliveryOptionSelected', '#newZipCode'], false);
            $('#FedexMapTrigger, #fedexFreightOptionsWrapper, #fedexHeaderData, #pickUpAddressSelected, #pickUpFromCourierAddressSelected').css('display', 'none');
        },
        complete: function (jqHXR, status) {
            ToggleAjaxOnLoad(true);
        }
    });

    return false;
}

Fedex.PopulateMap = function () {

    var markers = [];
    var infoWindowMarker = [];
    $.each(FedexAlternativesJSON, function (index) {
        markers.push({
            lat: parseFloat(FedexAlternativesJSON[index].Latitude),
            lng: parseFloat(FedexAlternativesJSON[index].Longitude)
        });
        infoWindowMarker.push(Fedex.CreateMarker(FedexAlternativesJSON[index]));
    });
    if (markers.length) {
        Fedex.InitializeMapAllLocations(markers[0].lat, markers[0].lng, markers, infoWindowMarker);
    }
}

Fedex.PopulateResults = function () {
    var markers = [];
    var infoWindowMarker = [];
    $.each(FedexAlternativesJSON, function (index) {

        FedexAlternativesJSON[index].currentIndex = index;

        markers.push({ lat: parseFloat(FedexAlternativesJSON[index].Latitude), lng: parseFloat(FedexAlternativesJSON[index].Longitude) });
        infoWindowMarker.push(Fedex.CreateMarker(FedexAlternativesJSON[index]));

        var line2 = FedexAlternativesJSON[index].Address.Line2;
        FedexAlternativesJSON[index].Address.Line2 = line2 || '';

        var contactInfo = FedexAlternativesJSON[index].Address.ContactInfo;
        FedexAlternativesJSON[index].Address.ContactInfo = contactInfo || '';

        var $row = $('<tr class="dynamicRows"/>');
        //create location office column
        var $td1 = $('<td/>').css('border-bottom', 'none').addClass("fedexTd1");

        var location = FedexAlternativesJSON[index].CourierStoreName + '#' + FedexAlternativesJSON[index].CourierStoreNumber + "<br/>";
        location += FedexAlternativesJSON[index].Address.Line1 + "<br/>";
        location += (FedexAlternativesJSON[index].Address.Line2 ? FedexAlternativesJSON[index].Address.Line2 + "<br/>" : "");
        location += FedexAlternativesJSON[index].Address.City + "<br/>";
        location += FedexAlternativesJSON[index].Address.PostalCode + "<br/>";
        location += (FedexAlternativesJSON[index].Address.ContactInfo ? FedexAlternativesJSON[index].Address.ContactInfo + "<br/>" : "");
        location += parseFloat(FedexAlternativesJSON[index].Distance).toFixed(2) + ' ' + FedexAlternativesJSON[index].DistanceUnit + "<br/>";
        location += '<a href="#TB_inline?inlineId=FedexSingleMapWrapper" targetRow="FedexSingleMapWrapper' + index + '" class="FedexSingleMaptrigger" lat="' + FedexAlternativesJSON[index].Latitude + '" lng="' + FedexAlternativesJSON[index].Longitude + '" currentindex="' + index + '">' + Fedex.ViewMap + '  </a>';
        $('<p/>').html(location).appendTo($td1).css("margin", "0");
        $td1.appendTo($row);

        //create availability column
        var availability = FedexAlternativesJSON[index].Availability.split("|").join("<br/>") +
            "<div id='selectDone'>" +
            "<br />" +
            "<a class='btn hide-tablet' data-target='fedexPickup' fedex-store-val='" + FedexAlternativesJSON[index].CourierStoreNumber + "'" +
            "currentindex='" + FedexAlternativesJSON[index].currentIndex + "'" +
            "onclick='return Fedex.SelectFedexLocation(" + FedexAlternativesJSON[index].currentIndex + ")'>" + Fedex.SelectText + "</a>" +
            "</div>";

        $('<td/>').html(availability).css('border-bottom', 'none').appendTo($row);

        //create select column
        var content = "<div id='selectDone'>" +
            "<a class='btn hide-mobile' data-target='fedexPickup' fedex-store-val='" + FedexAlternativesJSON[index].CourierStoreNumber + "'" +
            "currentindex='" + FedexAlternativesJSON[index].currentIndex + "'" +
            "onclick='return Fedex.SelectFedexLocation(" + FedexAlternativesJSON[index].currentIndex + ")'>" + Fedex.SelectText + "</a>" +
            "</div>";

        $('<td/>').html(content).css('border-bottom', 'none').appendTo($row);

        var mapRow = "<tr class='dynamicRows'><td colspan='3'><div id='FedexSingleMapWrapper'" + index + "'></div>";
       
        $('#fedexAlternativesOptionsTable tbody').append($row);
        $('#fedexAlternativesOptionsTable tbody').append(mapRow);
    });

    freezeElements(['#DeliveryOptionSelected', '#newZipCode'], false);
    $('#FedexMapTrigger').css('display', 'inline-block');
    ToggleAjaxOnLoad(true);
    Fedex.SetupGoogleMapsClick(infoWindowMarker);
    $('#pickupLocationsCount').html(FedexAlternativesJSON.length);
}

Fedex.HandleNoResults = function () {
    freezeElements(['#DeliveryOptionSelected', '#newZipCode'], false);
    ToggleAjaxOnLoad(true);
    $("#pickupLocationsCount").html("0");
    var newZipCode = $("#newZipCode").val();
    $("#NewPostalCodeEntered").html(newZipCode);
    Fedex.IsValid = "False";
}

Fedex.CreateMarker = function (office) {
    return {
        address: office.Address.Line1 + ',<br>' + office.Address.City + ', ' + office.Address.StateProvinceTerritory + ', ' + office.Address.PostalCode,
        contactInfo: office.ContactInfo,
        storeTitle: office.CourierStoreName === "" || office.CourierStoreName == null ? "" : office.CourierStoreName
    };
}

function distanceOptionsChange() {
    var valueSelected = $("#distanceOptions input:radio:checked").val();
    return Fedex.GetAndDisplayAlternatives(Fedex.PostalCode, valueSelected);
}

function fedexMapAllLocationsClick() {
    Fedex.PopulateMap();
    $("#FedexMapAll").reveal();
    return false;
}

function fedexChoOtherClick(event) {
    event.preventDefault();
    var rows = $('table.results tr');
    rows.show();
    $('#fedexChoOther').hide();
    $('#FedexMapTrigger').show();
    $('#FedexMapAllLocations').show();
    $("#fedexAlternativesOptionsTable").show();
    $('#showMoreFedex').show();
    $('#fedexFreightOptionsWrapper').css('display', 'none');
    $('#fedexHeaderData').css('display', 'none');
    $('#pickUpAddressSelected').css('display', 'none');
    $('#pickUpFromCourierAddressSelected').css('display', 'none');
    $("#fedexSearchOptions").css('display', '');
    Fedex.IsValid = "False";
    return false;
}

function newZipCodeFocus() {
    var country = $('#FedexPickupAddressData_FedexAlternatives_Address_Country').val();
        
    if(country && country == 'CA'){
        $(this).mask("+9+ 9+9", {
            placeholder: "___ ___",
            clearIfNotMatch: true,
            selectOnFocus: true
        });
    }
    else{
        $(this).mask("99999-0000", {
            placeholder: "_____-____",
            clearIfNotMatch: true,
            selectOnFocus: true
        });
    }
}

function ToggleAjaxOnLoad(isReady) {
    if (isReady) {
        $('#ajax-loader').fadeOut();
        $('input[name="distance"]').removeAttr("disabled");
    } else {
        $('#ajax-loader').fadeIn();
        $('input[name="distance"]').attr("disabled", "disabled");
    }
}

function freezeElements(selectorsArray, shouldBeFreezed) {
    $.each(selectorsArray, function (i) {
        ToggleControlDisabled(selectorsArray[i].id, shouldBeFreezed);
    });
}

function ToggleControlDisabled(controlId, shouldBeDisabled) {
    if (controlId && controlId != "") {
        var control = $get(controlId);
        if (control) {
            control.disabled = shouldBeDisabled;
        }
    }
}

function singleMapClick(event) {
    event.preventDefault();
    var lat = $.trim($(this).attr('lat'));
    var lng = $.trim($(this).attr('lng'));
    var currentIndex = $.trim($(this).attr('currentIndex'));
    var currentRow = $.trim($(this).attr('targetRow'));
    var markers = event.data.markers;
    var marker;

    marker = markers.length > 1 ? markers[currentIndex] :  marker = markers;

    Fedex.SetupMapLocation(lat, lng, true, marker);
    $('#FedexSingleMapWrapper').detach().appendTo('#'+currentRow);
    return false;
}

Fedex.SetupGoogleMapsClick = function (markers) {
    $('.FedexSingleMaptrigger').click({  data: markers }, singleMapClick);
}

Fedex.SetupMapLocation = function (lat, lng, bool, marker) {
    $('#FedexSingleMapWrapper').css('display', 'inline-block');
    Fedex.InitializeMapSingleLocation(parseFloat(lat), parseFloat(lng), bool, marker);
}

Fedex.InitializeMapAllLocations = function (lat, lng, markers, infoWindowMarker) {
    var mapOptions = {
        center: { lat: parseFloat(lat), lng: parseFloat(lng) },
        zoom: 12
    };
    var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
    if (markers) {
        $.each(markers, function (index) {
            var contentString = '<div id="fedexContent">'
                + '<h4 class="fedexHeading">' + infoWindowMarker[index].storeTitle + '</h4>'
                + '<div id="bodyContent">'
                + '<p class="margin-b-0">' + infoWindowMarker[index].address + '<br>'
                + infoWindowMarker[index].contactInfo + '<br>'
                + '</p>'
                + '</div>';
            var infowindow = new google.maps.InfoWindow({
                content: contentString
            });

            var marker = new google.maps.Marker({
                position: markers[index],
                map: map,
                title: "Fedex Location"
            });

            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });
        });
    }
}

Fedex.InitializeMapSingleLocation = function (lat, lng, marker, infoWindowMarker) {
    var mapOptions = {
        center: { lat: lat, lng: lng },
        zoom: 12
    };
    var map = new google.maps.Map(document.getElementById('map-canvas-single'), mapOptions);
    if (marker) {
        var contentString = '<div id="fedexContent">'
            + '<h4 class="fedexHeading">' + infoWindowMarker.storeTitle + '</h4>'
            + '<div id="bodyContent">'
            + '<p class="margin-b-0">' + infoWindowMarker.address + '<br>'
            + infoWindowMarker.contactInfo + '<br>'
            + '</p>'
            + '</div>';
        var infowindow = new google.maps.InfoWindow({
            content: contentString
        });

        // Place a draggable marker on the map
        var markerSingle = new google.maps.Marker({
            position: { lat: lat, lng: lng },
            map: map,
            title: "Fedex Location"
        });

        google.maps.event.addListener(markerSingle, 'click', function () {
            infowindow.open(map, markerSingle);
        });
    }
}

Fedex.SetUpPickUpFedexOffice = function (address) {
    if (typeof address !== 'undefined' && address !== null && address.CourierStoreNumber !== null) {
        var courierStoreNumber = $('#FedexPickupAddressData_FedexAlternatives_CourierStoreNumber');
        if (courierStoreNumber) {
            courierStoreNumber.val(address.CourierStoreNumber);
        }
        var courierStoreName = $('#FedexAlternativesData_FedexAlternatives_CourierStoreName');
        if (courierStoreName) {
            courierStoreName.val(address.CourierStoreName);
        }
        var line1 = $('#FedexPickupAddressData_FedexAlternatives_Address_Line1');
        if (line1) {
            line1.val(address.Address.Line1);
        }
        var line2 = $('#FedexPickupAddressData_FedexAlternatives_Address_Line2');
        if (line2) {
            line2.val(address.Address.Line2);
        }
        var line3 = $('#FedexPickupAddressData_FedexAlternatives_Address_Line3');
        if (line3) {
            line3.val(address.Address.Line3);
        }
        var line4 = $('#FedexPickupAddressData_FedexAlternatives_Address_Line4');
        if (line4) {
            line4.val(address.Address.Line4);
        }
        var city = $('#FedexPickupAddressData_FedexAlternatives_Address_City');
        if (city) {
            city.val(address.Address.City);
        }
        var county = $('#FedexPickupAddressData_FedexAlternatives_Address_Colony');
        if (county) {
            county.val(address.Address.Colony);
        }
        var state = $('#FedexPickupAddressData_FedexAlternatives_Address_StateProvinceTerritory');
        if (state) {
            state.val(address.Address.StateProvinceTerritory);
        }
        var postalCode = $('#FedexPickupAddressData_FedexAlternatives_Address_PostalCode');
        if (postalCode) {
            postalCode.val(address.Address.PostalCode);
        }
        var country = $('#FedexPickupAddressData_FedexAlternatives_Address_Country');
        if (country) {
            country.val(address.Address.Country);
        }
        var careOf = $('#FedexPickupAddressData_FedexAlternatives_Address_CareOf');
        if (careOf) {
            careOf.val(address.Address.CareOf);
        }
        var addressType = $('#FedexPickupAddressData_FedexAlternatives_Address_AddressType');
        if (addressType) {
            addressType.val(address.Address.AddressType);
        }
        var contactInfo = $('#FedexPickupAddressData_FedexAlternatives_ContactInfo');
        if (contactInfo) {
            contactInfo.val(address.ContactInfo);
        }
        var availability = $('#FedexPickupAddressData_FedexAlternatives_Availability');
        if (availability) {
            availability.val(address.Availability);
        }
        var distance = $('#FedexPickupAddressData_FedexAlternatives_Distance');
        if (distance) {
            distance.val(address.Distance);
        }
        var googleMapsUrl = $('#FedexPickupAddressData_FedexAlternatives_GoogleMapsUrl');
        if (googleMapsUrl) {
            googleMapsUrl.val(address.GoogleMapsUrl);
        }
        var distanceUnit = $('#FedexPickupAddressData_FedexAlternatives_DistanceUnit');
        if (distanceUnit) {
            distanceUnit.val(address.DistanceUnit);
        }
        var latitude = $('#FedexPickupAddressData_FedexAlternatives_Latitude');
        if (latitude) {
            latitude.val(address.Latitude);
        }
        var longitude = $('#FedexPickupAddressData_FedexAlternatives_Longitude');
        if (longitude) {
            longitude.val(address.Longitude);
        }

        var rows = $('table.results tr');
        rows.filter('.dynamicRows').hide();
        $('#fedexFreightOptionsWrapper').css('display', 'inline-block');
        $('#fedexHeaderData').css('display', 'inline-block');
        $('#pickUpAddressSelected').css('display', 'inline-block');
        $('#pickUpFromCourierAddressSelected').css('display', 'inline-block');
        $('#fedexChoOther').show();
        Fedex.IsValid = "True";
        $("#fedexSearchOptions").css('display', 'none');
        $("#NoFedexOption").css('display', 'none');

    } else {
        address = null;
    }

    Fedex.CurrentItem = address;
    if ((address !== null && $("#IsPickUpSelected").val() === 'True') || $("#IsFedexPickupSelected").val() === 'True') {
        Shipping.LoadPickupAddressBinding(address);
    }

    return false;
};
// ReSharper disable InconsistentNaming

var _resx = {
    invalidTin: "",
    serviceInvalidTin: "",
    duplicatedTin: "",
    invalidDate: "",
    fileRequired: "",
    aadharValidationMessage: "",
    docExtractValidationMessage: ""
};
var _currentDisplayTins = [];
var _keyUpElements = [];

function redirecttoaadhar(selectedTinCode){
    document.getElementById('AadharRedirection').value = true;
    document.getElementById('SelectedTinCode').value = selectedTinCode;
    $('#GeneralInfoForm')[0].submit();
}

// restore general information page when redirected back from aadhar msite or 
// when come back from step 2 to step1  . Added for india ds signup flow
function RestoreGeneralInfoPageOnKycRefresh(dsType) {
    var selectedTin = $("#SelectedTinCode").val(); 
    if (dsType === 'Distributor' && (!isEmpty(selectedTin) || $('#SkipClearGeneralInfoFields').val() === "True")) {
        var multiplTinCombos = $(".MultipleTinOptions select");
        multiplTinCombos.each(function () { 
            ShowKycButtons($("option:selected", this));
            if (!MultipleTins.IsBcpFlow) {
                // poi & poa validation 
                ValidatePOAAndPOI($("option:selected", this)); 
            }      
        })
        $("#SelectedTinCode").val("");
        $('#SkipClearGeneralInfoFields').val("False");
    }
}

function ValidatePOAAndPOI (selector) {
    var customId = selector.attr("customid");
    var parentId = selector.attr("parentid");

    var isMsite = $("input[id$='KycAPIType']", selector.closest(".MultipleTinOptions")).val() === "KYC_REDIRECT";
    var isSelectedOptionAadharMsite = (!isEmpty(customId) && customId.includes('Aadhar') ||
        !isEmpty(parentId) && parentId.includes('Aadhar')) && isMsite;
    var tinValue = $("input[id$='Value']", selector.closest(".MultipleTinOptions"));
    var kycButtons = $(".btn-upld", selector.closest('.MultipleTinOptions'));

    if (!isEmpty(parentId)) {
        $('#Tins_IsPOASameAsPOI').prop('checked', false);
        var poaSection = selector.closest('.input-field');
        $(poaSection).css("display", "block");
    } 

    // msite validation for aadhar card
    if (isSelectedOptionAadharMsite) {
        // if tin value not empty , aadhar verification is done succesfully
        if (!isEmpty(tinValue.val())) {
            tinValue.attr('readonly', 'true');
            if (!isEmpty(customId)) {
                BasicInfoDetailsModule.SetBasicInfoFieldsReadOnlyKycSuccess("BasicInfoDetails");
                // TFS Bug : 575068
                if ($('#Tins_IsPOASameAsPOI').is(':checked')) {
                    AddressInfo.SetAddressFieldsReadOnlyKycSuccess("AddressInfo");
                }
            }
            if (!isEmpty(parentId)) {
                AddressInfo.SetAddressFieldsReadOnlyKycSuccess("AddressInfo");
            }
            // HTM Bug 1164124 -Residential Address Tooltip to be removed when addhar verification sucessful
            $("#msgAddressRules").hide();
            if (!isEmpty(kycButtons)) {
                var selectedOption = kycButtons.filter("div[id^='Aadhar']");
                var kycUploadSection = kycButtons.filter("div[id^='Upload']");
                if (!isEmpty(selectedOption)) {  
                    $('input[type="button"],.tooltip,.otp_dis', selectedOption).hide();
                    $('.messages-container', selectedOption).show();
                    $('.sms-sucess', selectedOption).html(_resx.aadharValidationMessage);
                    $('.sms-sucess', selectedOption).fadeIn();
                }
                if (!isEmpty(kycUploadSection)) {
                    kycUploadSection.hide();
                }
            }
        }
    }
    // doc extract validation
    else if (!isEmpty(tinValue.val()) && (!isEmpty(parentId) || !isEmpty(customId))) {
        tinValue.attr('readonly', 'true');
        var kycUploadSection = kycButtons.filter("div[id^='Upload']");
        if (!isEmpty(kycUploadSection)) {
            $('input[type="button"],.upload_dis', kycUploadSection).hide();
            $('.messages-container', kycUploadSection).show();
            $('.sms-sucess', kycUploadSection).html(_resx.docExtractValidationMessage);
            $('.sms-sucess', kycUploadSection).fadeIn();
            $(".displayFileA,.displayFileB,.tooltip,div[id^='Aadhar']", selector.closest(".MultipleTinOptions")).hide();      
        }    
    }

}

function init(resx) {

    _resx = resx;
    var combos = $(".MultipleTinOptions select");
    var inputs = $("input[data-tin-config]");
    var datePickers = $("#tinDetails").find("[data-toggle='datepicker']");
    var dateStringPickers = $(".input-date").children().filter("[id*='DateString']").filter("[data-toggle!='datepicker']");
    dateStringPickers.each(function () {
        $(this).off("blur");
        $(this).on('blur change', function () {
            var issueDateString = $(".input-date").children().filter("[id*='IssueDateString']").val();
            var expiryDateString = $(".input-date").children().filter("[id*='ExpiryDateString']").val();
            CompareDates(issueDateString, expiryDateString, dateFormat);
        });
    });

    //Initialize masks
    inputs.each(function () {
        var config = $(this).data("tin-config");
        if (!isEmpty(config.mask)) {
            $(this).mask(config.mask, { placeholder: config.maskPlaceholder, clearIfNotMatch: config.clearIfNotMatch, selectOnFocus: true });
        } else
        {
            $(this).unmask();
        }
        //Events.SetEvents($(this), config.events);

        // do not have tin option
        if (combos.length < 1) {
            _toggleDatePicker($('#' + $(this).prop('id').replace('Value', 'IssueDateString')).parent(".input-date"), config.enableIssueDate, config.issueDateRequired, MultipleTins.IsInitialized, config.minExpiryDateMonth);
            _toggleDatePicker($('#' + $(this).prop('id').replace('Value', 'ExpiryDateString')).parent(".input-date"), config.enableExpiryDate, config.expiryDateRequired, MultipleTins.IsInitialized, config.minExpiryDateMonth);
        }

        $(this).blur(function () {
            $('#tinRequiredHide').slideUp();
        });

        if (config.code == "JPBL" && $('#SvcInvalidTin_JPBL').length > 0) {
            $('#SvcInvalidTin_JPBL').css("display", "none");
        }
    });

    combos.each(function () {

        var targetInput = $("option:selected", this).attr("target-input");
        var customValue = $("option:selected", this).val();

        if (targetInput) {
            var isReadOnly = customValue.trim() === "";
            $("#" + targetInput).attr("readonly", isReadOnly);
        }

        $(this).change(_tinSelectChangeEventHandler);
        $(this).on('blur', function () {
            $(this).valid();
        });
    });

    datePickers.on('hide.datepicker', function (e) {
        $(this).valid();
    });
    datePickers.on('pick.datepicker', function () {
        $(this).validate().resetForm();
        $(this).valid();
    });


    datePickers.each(function () {
        if ($(this).prop('id').indexOf('ExpiryDateString') > 0) {
            $(this).on('change', function () {
                //TODO: revise to non specific to expiration date field only and refactor code
                var invalidDateMessage = $(this).parent().parent().next('[id^="InvalidTin_ExpiryDate"]');
                invalidDateMessage.css("display", "none");

                if (!ValidateMinDate($(this))) {
                    MultipleTins.HasInvalidTins = "True";
                    invalidDateMessage.css("display", "");
                }
            });

            //remove invalid message on keyup
            $(this).on('keyup', function () {
                var invalidDateMessage = $(this).parent().parent().next('[id^="InvalidTin_ExpiryDate"]');
                invalidDateMessage.css("display", "none");
                if (!ValidateMinDate($(this))) {
                    MultipleTins.HasInvalidTins = "True";
                    invalidDateMessage.css("display", "");
                }
                //ValidateMinDate($(this));
            });
        } else if ($(this).prop('id').includes('IssueDateString') > 0) {
            $(this).on('change', function () {
                var invalidDateMessage = $(this).parent().parent().next('[id^="InvalidTin_IssueDate"]');
                var invalidDateRangeMessage = $('[id^="InvalidTin_IssueDateRange"]');
                invalidDateMessage.css("display", "none");
                invalidDateRangeMessage.css("display", "none");

                if (!ValidateIssueDate($(this))) {
                    invalidDateMessage.css("display", "");
                } else if (!ValidateIssueDateRange($(this))) {
                    invalidDateRangeMessage.css("display", "");
                }

            });

            //remove invalid message on keyup
            $(this).on('keyup', function () {
                var invalidDateMessage = $(this).parent().parent().next('[id^="InvalidTin_IssueDate"]');
                var invalidDateRangeMessage = $('[id^="InvalidTin_IssueDateRange"]');
                invalidDateMessage.css("display", "none");
                invalidDateRangeMessage.css("display", "none");

                if (!ValidateIssueDate($(this))) {
                    invalidDateMessage.css("display", "");
                } else if (!ValidateIssueDateRange($(this))) {
                    invalidDateRangeMessage.css("display", "");
                }
            });
        }
    });
    datePickers.mask("99/99/9999", { clearIfNotMatch: true, selectOnFocus: true });
}

function CheckTinRadioButton() {
    if ($("#BasicInfoDetails_TinDetails_1__Value").val() === "" ||
        $("#BasicInfoDetails_TinDetails_1__Value").val() === undefined) {
        $("#hasActiveRUCRequiredCheckFalse").prop("checked", true);
    } else {
        if ($("#hasActiveRUCRequiredCheckTrue") != undefined &&
            $("#hasActiveRUCRequiredCheckTrue").is(":checked")) {
            CreateTinValidationEventBlur($("#BasicInfoDetails_TinDetails_1__Value"));
        }
    }

    $("input[name='BasicInfoDetails.TinDetails[1].HasActiveRUC']").click(activeRUCRequiredChanged);
}

function activeRUCRequiredChanged() {
    if ($("#hasActiveRUCRequiredCheckTrue").prop("checked")) {
        $("#BasicInfoDetails_TinDetails_1__Value").val($("#BasicInfoDetails_TinDetails_0__Value").val());
        CreateTinValidationEventBlur($("#BasicInfoDetails_TinDetails_1__Value"));
    } else {
        $("#BasicInfoDetails_TinDetails_1__Value").val('');
    }
}

function CompareDates(issueDateString, expiryDateString, dateFormat) {
    var invalidDateMessage = $('[id^="InvalidTin_ExpiryDate"]');
    if (issueDateString && issueDateString.trim() != "" && expiryDateString && expiryDateString.trim() != "") {
        var issueDate = stringToDate(issueDateString, dateFormat, "/");
        var expiryDate = stringToDate(expiryDateString, dateFormat, "/");
        if (issueDate >= expiryDate) {
            invalidDateMessage.css("display", "");
        }
    }
    else {
        invalidDateMessage.css("display", "none");
    }
}

function ValidateMinDate(element) {
    var validDate = true;
    var format = DatepickerFormat();
    var minDate = new Date(element.data('min-date'));
    if (element.val().length !== 10 || !element.valid()) {
        element.datepicker('setDate', minDate, true);
        MultipleTins.HasInvalidTins = "False";
        return true;
    }

    var formatLowerCase = format.toLowerCase();
    var formatItems = formatLowerCase.split("/");
    var dateItems = element.val().split("/");

    var monthIndex = formatItems.indexOf("mm");
    var dayIndex = formatItems.indexOf("dd");
    var yearIndex = formatItems.indexOf("yyyy");

    //display invalid messagee if day 00
    if (dateItems[dayIndex] === "00") {
        validDate = false;
    }

    //get days in specific month
    var daysOfMonth = BasicInfoDetailsModule.DaysInMonth(dateItems[monthIndex], dateItems[yearIndex]);

    //display invalid message if entered invalid date
    if (dateItems[dayIndex] > daysOfMonth || dateItems[monthIndex] > 12 || dateItems[monthIndex] < 1) {
        validDate = false;
    }

    var dateSelected = BasicInfoDetailsModule.FormatDate(element.val(), format, "/");
    var startDate = BasicInfoDetailsModule.FormatDate(minDate.toISOString().substring(0, 10).replace(/-/g, "/"), "yyyy/mm/dd", "/");

    //display invalid message if selected or entered date < min date
    if (dateSelected < startDate) {
        validDate = false;
    }
    if (!validDate) {
        element.datepicker('setDate', minDate, true);
    }

    if (validDate == true)
        MultipleTins.HasInvalidTins = "False";
    else
        MultipleTins.HasInvalidTins = "True";

    return validDate;
}

function ValidateIssueDate(element) {
    var validDate = true;
    var format = DatepickerFormat();
    var minDate = new Date();

    if (element.val().length !== 10 || !element.valid()) {
        element.datepicker('setDate', minDate, true);
        MultipleTins.HasInvalidTins = "False";
        return true;
    }

    var formatLowerCase = format.toLowerCase();
    var formatItems = formatLowerCase.split("/");
    var dateItems = element.val().split("/");

    var monthIndex = formatItems.indexOf("mm");
    var dayIndex = formatItems.indexOf("dd");
    var yearIndex = formatItems.indexOf("yyyy");

    //display invalid messagee if day 00
    if (dateItems[dayIndex] === "00") {
        validDate = false;
        MultipleTins.HasInvalidTins = "True";
        element.datepicker('setDate', minDate, true);
        return validDate;
    }

    //get days in specific month
    var daysOfMonth = BasicInfoDetailsModule.DaysInMonth(dateItems[monthIndex], dateItems[yearIndex]);

    //display invalid message if entered invalid date
    if (dateItems[dayIndex] > daysOfMonth || dateItems[monthIndex] > 12 || dateItems[monthIndex] < 1) {
        validDate = false;
        MultipleTins.HasInvalidTins = "True";
    }

    if (!validDate) {
        element.datepicker('setDate', minDate, true);
        MultipleTins.HasInvalidTins = "True";
    }
    else {
        MultipleTins.HasInvalidTins = "False";
    }

    return validDate;
}

function ValidateIssueDateRange(element) {
    var validDate = true;
    var format = DatepickerFormat();
    var minDate = new Date();

    var dateSelected = BasicInfoDetailsModule.FormatDate(element.val(), format, "/");
    var maxDate = BasicInfoDetailsModule.FormatDate(new Date().toISOString().substring(0, 10).replace(/-/g, "/"), "yyyy/mm/dd", "/");

    if (element.val().length !== 10 || !element.valid()) {
        element.datepicker('setDate', minDate, true);
        MultipleTins.HasInvalidTins = "False";
        return true;
    }

    //display invalid message when dateSelected is later than current date
    if (dateSelected >= maxDate) {
        validDate = false;
    }

    if (!validDate) {
        element.datepicker('setDate', minDate, true);
        MultipleTins.HasInvalidTins = "True";
    }
    else {
        MultipleTins.HasInvalidTins = "False";
    }

    return validDate;
}

function DatepickerFormat() {
    return $.fn.datepicker.languages[Object.keys($.fn.datepicker.languages)[0]].format;
}

function _createTinValidationEvents() {
    $("input[data-tin-config]").blur(function () {      
        CreateTinValidationEventBlur(this);
        if ($(this).attr("tin-for") == "PYID" && $("#hasActiveRUCRequiredCheckTrue").is(":checked")) {
            $("#BasicInfoDetails_TinDetails_1__Value").val($("#BasicInfoDetails_TinDetails_0__Value").val());
            CreateTinValidationEventBlur($("#BasicInfoDetails_TinDetails_1__Value"));
        }
    });
    $("input[data-tin-config]").keypress(function (e) {
        var control = $(this);
        var config = {};

        if (!isEmpty(control.data("tin-config"))) {
            config = control.data("tin-config");
            if (jQuery.isEmptyObject(config.events)) {
                return;
            }
            if (config.events["DigitVerificator"] != undefined) {
                var val = control.val();
                if (val.length < config.maxLength) {
                    control.unmask();
                    control.mask(config.mask, {
                        placeholder: config.maskPlaceholder,
                        clearIfNotMatch: config.clearIfNotMatch,
                        selectOnFocus: true
                    });
                }
            }
        }
    });

    $("input[data-tin-config]").keyup(function (e) {
        var control = $(this);
        var config = {};

        if (!isEmpty(control.data("tin-config"))) {
            config = control.data("tin-config");
            if (jQuery.isEmptyObject(config.events)) {
                return;
            }
            if (config.events["FillWithStartingZero"] != undefined) {
                control.unmask();
                control.mask(config.mask, {
                    placeholder: config.maskPlaceholder,
                    clearIfNotMatch: config.clearIfNotMatch,
                    selectOnFocus: true
                });
            }
        }
    });

    $("*[data-type^=basicInfoTinDetails_]").keyup(function () {
        var code = $(this).attr("tin-for");
        ClearTinMessage(code);
    });
    $("*[data-type^=basicInfoTinDetails_]").on('blur focusout', function (e) {
        switch (AddressInfo.CountryCode.toUpperCase()) {
            case 'SE':
                if ($('#BasicInfoDetails_TinDetails_0__Value').val() == "") {
                    $("#EmptyTin-error").parent().css("display", "");
                } else {
                    $("#EmptyTin-error").parent().css("display", "none");
                }
                break;
            default:
                return false;
        }
    });
}

function CreateTinValidationEventBlur(element) {
    var control = $(element);
    var config = {};

    if (!isEmpty(control.data("tin-config"))) {
        config = control.data("tin-config");
        control.unmask();
        if (!isEmpty(config.mask))
        {
            control.mask(config.mask, {
                placeholder: config.maskPlaceholder,
                clearIfNotMatch: config.clearIfNotMatch,
                selectOnFocus: true
            });
        }
    }

    return ValidateTinEventHandler(element);
};

function _tinSelectChangeEventHandler(event) {
    return TinSelectChangeEventHandler(this);
}

function TinSelectChangeEventHandler(element) {
    var control = $(element);
    var id = control[0].id;
    var selected = control.find("option:selected");
    var targetInput = selected.attr("target-input");
    var customValue = selected.val();
    var customId = selected.attr("customid");
    var parentId = selected.attr("parentid");
    var tinFor = control.attr("tin-for");
    var target = $("#" + targetInput);
    var issueDateInput = $("#" + id.replace("SelectedTin", "IssueDateString")).parent(".input-date");
    var expiryDateInput = $("#" + id.replace("SelectedTin", "ExpiryDateString")).parent(".input-date");

    var config = { hasValidation: false, maskPlaceholder: " ", mask: "", tooltip: "" };

    if (!isEmpty(selected.data("tin-config"))) {
        config = selected.data("tin-config");
        target.data("tin-config", config);
    }
    else {
        target.data("tin-config", "");
    }

    target.applyDataChars(config.dataChars);
    _setMask(target, config);
    _toggleTinInput(target, control.val(), MultipleTins.IsInitialized);
    _toggleTinInputLabel(target, selected.text());

    var tooltip = $("#TinTooltipChild_" + tinFor);
    tooltip.html(config.tooltip);

    $("#IssueDate_TinTooltipChild_" + tinFor).html(config.issueDateTooltip);
    $("#ExpiryDate_TinTooltipChild_" + tinFor).html(config.expiryDateTooltip);

    _toggleDatePicker(issueDateInput, config.enableIssueDate, config.issueDateRequired, MultipleTins.IsInitialized, config.minExpiryDateMonth);
    _toggleDatePicker(expiryDateInput, config.enableExpiryDate, config.expiryDateRequired, MultipleTins.IsInitialized, config.minExpiryDateMonth);


    if (targetInput) {
        var isReadOnly = customValue.trim() === "";
        target.attr('readonly', isReadOnly);
    }

    if (config.displayTins == undefined) {
        config.displayTins = [];
    }

    // get kyc verification buttons
    var kycButtons = $(".btn-upld", selected.closest('.MultipleTinOptions'));
    kycButtons.each(function () { $(this).hide() });

    // attribute custom_button_id now exists only in MultipleTins_Upload view for india ds signup flow India
    if (!isEmpty(selected.attr("custom_button_id")) && isEmpty($("#SelectedTinCode").val())
        && $('#SkipClearGeneralInfoFields').val() === "False") {

        if (!isEmpty(customId)) {
            if ($('#Tins_IsPOASameAsPOI').is(':checked')) { 
                ClearFieldsTinSelectChange({ Address: "AddressInfo", BasicInfo: "BasicInfoDetails" });
            } else {
                ClearFieldsTinSelectChange({ BasicInfo: "BasicInfoDetails" });
            }
        }

        if (!isEmpty(parentId)) {
            ClearFieldsTinSelectChange({ Address: "AddressInfo" });
        }

        ClearFilesTinSelectChange(selected.closest('.MultipleTinOptions')) 
        ShowKycButtons(selected);
    } 

    if (_currentDisplayTins.length > 0) {
        var tinsToHide = _currentDisplayTins.filter(function (item) { return !config.displayTins.includes(item); });
        _toggleDisplayTins(tinsToHide, false, MultipleTins.IsInitialized);
    }

    _toggleDisplayTins(config.displayTins, true, MultipleTins.IsInitialized);
    _currentDisplayTins = config.displayTins;

    //Events.SetEvents(target, config.events);

    var blurBinding = false;

    UnbindEvents();

    if (parentId && parentId !== "") {

        var parent = $(".MultipleTinOptions option[customid='" + parentId + "']");

        if (parent && parent.is(":selected")) {

            var parentInputCtrl = $("#" + parent.attr("target-input"));

            if (customValue === parent.val() && parentId !== "Default") {

                var previousValue = parentInputCtrl.val();
                target.val(previousValue);

                InputsBindingEvents(targetInput, parent.attr("target-input"));
                blurBinding = true;

            } else {
                $("#" + parent.attr("target-input")).off("keyup");
                target.off("keyup");
            }

        } else {

            $("#" + parent.attr("target-input")).off("keyup");
            target.off("keyup");
        }

    } else if (customId && customId !== "") {

        var custom = $(".MultipleTinOptions option[parentid='" + customId + "']");
        var customInputCtrl = $("#" + custom.attr("target-input"));

        if (custom && custom.is(":selected") && customValue === custom.parent().val()) {

            var customInputValue = customInputCtrl.val();
            target.val(customInputValue);

            target.unbind("keyup");
            $("#" + custom.attr("target-input")).unbind("keyup");

            InputsBindingEvents(targetInput, custom.attr("target-input"));
            blurBinding = true;

        } else {

            $("#" + custom.attr("target-input")).off("keyup");
            target.off("keyup");
        }
    }

    if (!blurBinding) {
        target.off("blur");
        target.blur(function () { return ValidateTinEventHandler(this); });
    }

    if (!target.data("val")) {
        $(target).rules("remove", "required");
    }

    control.valid();
}

// show hide poa section india ds signup flow
function IsPOASameAsPOIOnChangeHandler(event) { 
    var poaSection = $(".input-field option[parentid='" + event.data.customId + "']").closest('.input-field'); 
    if ($(this).is(":checked")) {
        $('input[id$="IsPOASameAsPOI"]', event.data.selected).val(true);
        poaSection.css("display", "none");
    } else {
        $('input[id$="IsPOASameAsPOI"]', event.data.selected).val(false);
        poaSection.css("display", "block");
    }
}

function ShowKycButtons(selector) { 
    var customId = selector.attr("customid");
    var parentId = selector.attr("parentid"); 
    var tinconfig = selector.data("tin-config");

    // get kyc verification buttons
    var kycButtons = $(".btn-upld", selector.closest('.MultipleTinOptions'));
    kycButtons.each(function () { $(this).hide() });

    // show/hide kyc buttons
    if (!isEmpty(kycButtons)) {
        var kycUploadSection = kycButtons.filter("div[id^='Upload']");
        if (!isEmpty(tinconfig) && !tinconfig.showUploadButton) {
            var kycAadharSection = kycButtons.filter("div[id^='Aadhar']");
            if (!isEmpty(kycAadharSection)) {
                kycAadharSection.show();
                $('.messages-container', kycAadharSection).css("display", "none");
                $('input[type="button"]', kycAadharSection).unbind("click");
                $('input[type="button"]', kycAadharSection).click(function () {
                    var tinFor = $("select", selector.closest('.MultipleTinOptions')).attr("tin-for");
                    redirecttoaadhar(tinFor);
                });
            }
        }  
        else {
            kycUploadSection.show();
            $(".upload_dis").show();
            $('.messages-container', kycUploadSection).css("display", "none");
            if (customId && customId.includes('Default') || (isEmpty(customId) && isEmpty(parentId))) {
                setFileAttributes(kycUploadSection, true, false);
            } else {
                setFileAttributes(kycUploadSection, true, true);
            }
            $('input[type="button"]', kycUploadSection).unbind("click");
            $('input[type="button"]', kycUploadSection).click(function (event) {
                InvokeKycDocExtract(event);
            });
        }
    }

    // show fssai checkbox
    if ((isEmpty(customId) && isEmpty(parentId))) {
        var fssaicheckbox = $(".input-field .check-fssai");
        if (!isEmpty(selector.data("tin-config"))) {
            config = selector.data("tin-config");
            var showfssaicheckbox = config.showFssaiCheckbox;
            if (!isEmpty(showfssaicheckbox) && showfssaicheckbox) {
                fssaicheckbox.css("display", "block");
                $("#msgFssaiTooltip").hide();
                $('#Tins_AcceptFSSAI').prop('checked', true);
            } else {
                fssaicheckbox.css("display", "none");
                $("#msgFssaiTooltip").show();
                $('#Tins_AcceptFSSAI').prop('checked', false);
            }
        }
    }

    // show hide poa section checkbox based on selected dropdown & clear fields for POI section
    if (!isEmpty(customId)) {
        var poacheckbox = $(".input-field .check-poa");
        $('#Tins_IsPOASameAsPOI').change({ customId: customId, selected: selector.closest('.MultipleTinOptions') }, IsPOASameAsPOIOnChangeHandler);
        // show hide poa check box
        if (customId === "Default") {
            poacheckbox.css("display", "none");
            // poa section mandatory  for pan card
            var poa = $(".MultipleTinOptions select option[parentid]:not([parentid=''])").closest('.input-field');
            poa.css("display", "block");
        } else {
            poacheckbox.css("display", "block")
        }

        // poa checked
        var poa = $(".MultipleTinOptions option[parentid='" + customId + "']").closest('.input-field');
        if ($('#Tins_IsPOASameAsPOI').is(':checked')) {
            if (customId === "Default") {
                $('input[id$="IsPOASameAsPOI"]', selector.closest('.MultipleTinOptions')).val(false);
            } else {
                $('input[id$="IsPOASameAsPOI"]', selector.closest('.MultipleTinOptions')).val(true);
            }
            poa.css("display", "none");
        } else { 
            $('input[id$="IsPOASameAsPOI"]', selector.closest('.MultipleTinOptions')).val(false);
            poa.css("display", "block");
        }
    }
}

function ClearFieldsTinSelectChange(prefixes) {
    if (!isEmpty(prefixes.Address)) {
        $("#msgAddressRules").show(); 
        AddressInfo.IsDocExtractEnabledForAddressFields = false;
        $("#" + prefixes.Address + "_PostalCode").data('originalPostalCode', "");
        AddressInfo.ClearAddressFieldsKyc(prefixes.Address);
    }
    if (!isEmpty(prefixes.BasicInfo)) {
        BasicInfoDetailsModule.ClearBasicInfoFieldsKyc(prefixes.BasicInfo);
    }
}

function InvokeKycDocExtract(event) {
    const uri = window.location.protocol + "//" + window.location.host + "/contract/api/KycValidation/DocInfoExtract";
    const uploadButton = $(event.target);
    const option = uploadButton.closest(".MultipleTinOptions"); 

    const docExtract = {
        uploadButton: uploadButton,
        kycContainer: option.find('.btn-upload'),
        messageContainer: uploadButton.parent().find(".messages-container"),
        loader: option.find(".loader-m"),
        error: option.find(".error-m"),
        message: option.find(".sms-sucess"),
        files: option.find('input[type=file]'),
        compressedfiles: option.find('.compressed'),
        config: option.find("option:selected"),
    }

    const dict = {
        documenttype: docExtract.config.data("tin-config").documentSubType,
        countryCode: $("#CurrentCountry").val(),
        referenceId: $("#ReferenceId").val(),
        emailId: $("input[id$='EmailAddress']").val()
    };

    const promises = []; 

    docExtract.files.each(function() {
        if (!isEmpty($(this).val())) {
            promises.push(fileToBase64($(this)));
        }
    })

    Promise.all(promises).then(result => {
        docExtract.compressedfiles.each(function() {
            if (!isEmpty($(this).val())) {
                dict[$(this).attr('identity-file')] = $(this).val();
            }
        });
        InvokeKycDocExtractApi(uri, dict, docExtract);
    });
  
}

function InvokeKycDocExtractApi(uri,dict,docExtract) {
    $.ajax({
        url: uri,
        contentType: "application/json",
        data: JSON.stringify(dict),
        type: 'POST',
        success: docExtractresponse => {
            KycDocExtractSuccess(docExtractresponse, docExtract);
        },
        beforeSend: () => {
            docExtract.loader.css('display', 'block');
            docExtract.loader.fadeIn("slow");
            docExtract.messageContainer.hide();
            docExtract.error.hide();
            docExtract.message.hide();
            docExtract.uploadButton.hide();
            $(".upload_dis").hide(); 
        },
        error: (jqXhr, textStatus, errorThrown) => {
            docExtract.loader.css('display', 'none');
            docExtract.loader.fadeOut();
        },
        complete: () => {
            docExtract.loader.css('display', 'none');
            docExtract.loader.fadeOut();
        }
    });
}

function KycDocExtractSuccess(docExtractresponse, docExtract) {

    const kycElements = {
        kycXMLResponseFile: $('input[id$="KycXMLFile"]', docExtract.kycContainer),
        kycTinValue: $('input[id^="BasicInfoDetails_TinDetails"][id$="Value"]', docExtract.kycContainer),
        kycPhoto: $('input[id$="KycDocumentImage"]', docExtract.kycContainer),
        kycApiType: $('input[id$="KycAPIType"]', docExtract.kycContainer)
    }; 

    const selected = docExtract.uploadButton.closest('.MultipleTinOptions');
    const customId = $("select option:selected", selected).attr("customid");
    const parentId = $("select option:selected", selected).attr("parentid"); 

    if (!isEmpty(customId)) {
        ClearFieldsTinSelectChange({ BasicInfo: "BasicInfoDetails" });
        if ($('#Tins_IsPOASameAsPOI').is(':checked')) {
            ClearFieldsTinSelectChange({ Address: "AddressInfo" });
        }
    } else if (!isEmpty(parentId)) {
        ClearFieldsTinSelectChange({ Address: "AddressInfo" });
    }

    if (!docExtractresponse.success) {
        docExtract.uploadButton.show();
        docExtract.uploadButton.attr("disabled", false);
        docExtract.messageContainer.show();
        docExtract.error.html(docExtractresponse.message);
        docExtract.error.slideDown();
        $(".upload_dis").show(); 
    } else {
        if (docExtractresponse.data) {
            kycElements.kycXMLResponseFile.val(btoa(JSON.stringify(docExtractresponse.data)));
            if (docExtractresponse.data.original_kyc_info) {
                kycElements.kycTinValue.val(docExtractresponse.data.original_kyc_info.document_id.replace(/-/g, ' '))
                if (!isEmpty(kycElements.kycTinValue.val())) {
                    kycElements.kycTinValue.attr('readonly', true);
                    $(".displayFileA,.displayFileB,.tooltip,div[id^='Aadhar'],.upload_dis", selected).hide(); 
                    kycElements.kycApiType.val('DOC_EXTRACT');
                    if ((!isEmpty(customId) && $('#Tins_IsPOASameAsPOI').is(':checked')) || !isEmpty(parentId)) {
                        AddressInfo.SetAddressFieldsKyc("AddressInfo", docExtractresponse.data.original_kyc_info.address);
                        AddressInfo.SetAddressFieldsEditableDocUpload("AddressInfo"); 
                    }
                }          
            }
            if (docExtractresponse.data.photo) {
                kycElements.kycPhoto.val(docExtractresponse.data.photo.document_image);
            }
        } else {
            kycElements.kycPhoto.val('');
            kycElements.kycXMLResponseFile.val('');
            kycElements.kycTinValue.val('');
            AddressInfo.IsDocExtractEnabledForAddressFields = false;
        }
        docExtract.uploadButton.hide();
        docExtract.messageContainer.show();
        docExtract.message.html(docExtractresponse.message);
        docExtract.message.fadeIn();
        $(".upload_dis").hide(); 
    }

}

function fileToBase64(element){
    return new Promise(resolve => {
        var file = element.prop('files')[0];
        var reader = new FileReader();
        // Read file content on file loaded event
        reader.onload = function (event) {
            var result = event.target.result.split(",")[1];
            var compressed = element.closest('.file-container').find('.compressed');
            compressed.val(result); 
            resolve(result);
        };

        // Convert data to base64 
        reader.readAsDataURL(file);
    });
};

function setFileAttributes(element, fileARequired, fileBRequired) {
    if (fileARequired && fileBRequired) {
        var fileA = element.find('.displayFileA .fileRoute');
        fileA.parent().css("display", "block");
        var mandatory = element.find('.displayFileA h4');
        fileA.rules("add", {
            required: true,
            messages: {
                required: _resx.fileRequired
            }
        });
        $('#' + fileA.attr('id') + '-error').remove();
        mandatory.find("span.mandatory").remove();
        mandatory.append($("<span>").addClass("mandatory").text(" *"));


        var fileB = element.find('.displayFileB .fileRoute');
        fileB.parent().css("display", "block");
        mandatory = element.find('.displayFileB h4');
        fileB.rules("add", {
            required: true,
            messages: {
                required: _resx.fileRequired
            }
        });
        $('#' + fileB.attr('id') + '-error').remove();
        mandatory.find("span.mandatory").remove();
        mandatory.append($("<span>").addClass("mandatory").text(" *"));
    }
    else if (fileARequired) {
        var fileA = element.find('.displayFileA .fileRoute');
        fileA.parent().css("display", "block");
        var mandatory = element.find('.displayFileA h4');
        fileA.rules("add", {
            required: true,
            messages: {
                required: _resx.fileRequired
            }
        });
        $('#' + fileA.attr('id') + '-error').remove();
        mandatory.find("span.mandatory").remove();
        mandatory.append($("<span>").addClass("mandatory").text(" *"));

        var fileB = element.find('.displayFileB .fileRoute');
        fileB.parent().css("display", "none");
        mandatory = element.find('.displayFileB h4');
        fileB.removeAttr("required");
        fileB.removeAttr("data-val");
        fileB.removeAttr("data-val-required");
        $('#' + fileB.attr('id') + '-error').remove();
        mandatory.find("span.mandatory").remove();

    } else if (fileBRequired) {

        var fileB = element.find('.displayFileB .fileRoute');
        fileB.parent().css("display", "block");
        var mandatory = element.find('.displayFileB h4');
        fileB.rules("add", {
            required: true,
            messages: {
                required: _resx.fileRequired
            }
        });
        $('#' + fileB.attr('id') + '-error').remove();
        mandatory.find("span.mandatory").remove();
        mandatory.append($("<span>").addClass("mandatory").text(" *"));

        var fileA = element.find('.displayFileA .fileRoute');
        fileA.parent().css("display", "none");
        mandatory = element.find('.displayFileA h4');
        fileA.removeAttr("required");
        fileA.removeAttr("data-val");
        fileA.removeAttr("data-val-required");
        $('#' + fileA.attr('id') + '-error').remove();
        mandatory.find("span.mandatory").remove();

    } else {

        var fileA = element.find('.displayFileA .fileRoute');
        fileA.parent().css("display", "none");
        var mandatory = element.find('.displayFileA h4');
        fileA.removeAttr("required");
        fileA.removeAttr("data-val");
        fileA.removeAttr("data-val-required");
        $('#' + fileA.attr('id') + '-error').remove();
        mandatory.find("span.mandatory").remove();

        var fileB = element.find('.displayFileB .fileRoute');
        fileB.parent().css("display", "none");
        mandatory = element.find('.displayFileB h4');
        fileB.removeAttr("required");
        fileB.removeAttr("data-val");
        fileB.removeAttr("data-val-required");
        $('#' + fileB.attr('id') + '-error').remove();
        mandatory.find("span.mandatory").remove();
    }
}

function ClearFilesTinSelectChange(element) {
    if (!isEmpty(element)) {
        var fileInputs = element.find(".file-container");
        $('input[type="button"],.tooltip,.messages - container', element).show();
        element.find('.messages-container .error-m.error-large').text('')
        element.find('.messages-container .sms-sucess').text('')
        fileInputs.each(function () {
            $(this).val(null);
            $(this).find('.compressed:first').val(null);
            $(this).find('input[type="file"]').val(null);
            $(this).find('.fileRoute').val(null);
            $(this).find('span.input-file-span').text('');
        })
    }
}

function _setMask(target, config) {
    if (target == undefined) {
        return;
    }
    target.unmask();
    target.mask(config.mask, {
        placeholder: config.maskPlaceholder,
        clearIfNotMatch: config.clearIfNotMatch, selectOnFocus: true
    });
    
}

function _toggleTinInputLabel(element, selectedTinText) {
    if (element.data('tin-config').isDisplayTinLabel && element.data("tin-config").isMandatory) {
        var label = $('#TinLabelFor_' + element.attr("tin-for"));
        var child = label.children();

        label.show();
        label.text('').html(child);
        label.prepend(selectedTinText);
    }
}

function _toggleTinInput(element, selectedTin, erase) {

    if (erase) {
        element.val("");
        element.validate().resetForm();
        element.parent(".tin-input").find("[data-valmsg-replace]").removeClass("field-validation-error").addClass("field-validation-valid").empty();
    }
    if (selectedTin === "" || element.attr("maxLength") == 0) {
        element.parent(".tin-input").slideUp();
    } else {
        element.attr('data-val-required', element.data("tin-config").requiredText);
        _resetForm(element);
        element.parent(".tin-input").slideDown();

        element.unmask();
        element.mask(element.data("tin-config").mask, {
            placeholder: element.data("tin-config").maskPlaceholder,
            clearIfNotMatch: element.data("tin-config").clearIfNotMatch,
            selectOnFocus: true
        });
    }
}

function _toggleDatePicker(element, enable, required, erase, minMonth) {

    if (element == undefined || element.length == 0) {
        return;
    }
    var input = element.find("input");
    var mandatoryLabel = element.find("label span");
    var inputValidation = $("[data-valmsg-for='" + input[0].name + "']").parent(".input-date");

    if (erase) {
        input.val("");
        element.validate().resetForm();
        inputValidation.find("[data-valmsg-replace]").removeClass("field-validation-error").addClass("field-validation-valid").empty();
    }

    if (required) {
        input.attr("required", "true");
        input.attr("data-val", "true");
        input.attr("data-val-required", _resx.invalidDate);
        mandatoryLabel.show();
        mandatoryLabel.addClass("mandatory");
    } else {
        input.removeAttr("required");
        input.removeAttr("data-val");
        input.removeAttr("data-val-required");
        mandatoryLabel.hide();
        mandatoryLabel.removeClass("mandatory");
    }

    var minDate = new Date();
    if (minMonth > 0) {
        minDate.setMonth(minDate.getMonth() + parseInt(minMonth), minDate.getDate());
    }
    else if (minMonth < 0) {
        minDate = new Date(1919, 11, 31);
    }
    input.attr('data-min-date', minDate.toISOString());

    _resetForm(input);

    if (enable) {
        if (!element.is(":visible")) {
            element.slideDown();
            inputValidation.show();
        }
    } else {
        element.slideUp();
        inputValidation.hide();
    }
}

function _toggleDisplayTins(displayTins, visible, erase) {

    if (displayTins === undefined || displayTins === null)
        return;

    displayTins.forEach(function (item, index) {
        var tinDiv = $("#" + item);
        var input = tinDiv.find("input");
        var dates = tinDiv.find("[data-toggle='datepicker']");

        if (erase) {
            input.val("");
            dates.val("");
            tinDiv.validate().resetForm();
            tinDiv.find("[data-valmsg-replace]").removeClass("field-validation-error").addClass("field-validation-valid").empty();
        }
        if (visible) {
            if (!tinDiv.is(":visible")) {
                tinDiv.slideDown();
            }
        } else {
            tinDiv.slideUp();
        }
    });
}

function ResetValidation(element) {
    var control = $(element);
    var tinFor = control.attr("tin-for");

    var validationMessage = $("#InvalidTin_" + tinFor);
    var validationMessageService = $("#SvcInvalidTin_" + tinFor);
    validationMessageService.css("display", "none");
    validationMessage.css("display", "none");

    MultipleTins.HasInvalidTins = "False";

    $("[id^=InvalidTin_").each(function () {
        if ($(this).is(":visible")) {
            MultipleTins.HasInvalidTins = "True";
        }
    });
}

    function ValidateTinEventHandler(element) {
    var control = $(element);
    var tin = control.val().replace(/_/g, "");
    var tinFor = control.attr("tin-for");
    var locale = $("#Locale").val();
    var countryCode = $("#CurrentCountry").val();

    var config = {};
    if (control.data("tin-config") !== undefined) {
        config = control.data("tin-config");
    }

    var validationMessage = $("#InvalidTin_" + tinFor);
    var text = $("[data-type=basicInfoTinDetails_" + tinFor + "]");
    var loader = $("#loadingTin_" + tinFor);
    var message = validationMessage.data("message");

    var WarningMessage = $("#WarningTin_" + tinFor);
    WarningMessage.css("display", "none");

    if (!config.hasValidation) {
        validationMessage.css("display", "none");

        MultipleTins.HasInvalidTins = "False";

        $("[id^=InvalidTin_").each(function () {
            if ($(this).is(":visible")) {
                MultipleTins.HasInvalidTins = "True";
            }
        });

        return;
    }

    var isTinValid = true;
    text.attr("readonly", true);
    loader.css("display", "block");

    ClearTinMessage(tinFor);

    if (config.isMandatory || !isEmpty(tin)) {
        $.each(config.events,
            function (index, event) {
                if (!isTinValid) {
                    return;
                }
                switch (index) {
                    case "ExpiryDateBehavior":
                        var expiryDateDiv = $($("#" + control[0].id.replace("Value", "ExpiryDateString")).parent()[0]);
                        var tooltip = $($("[id^=ExpiryDate_TinTooltipChild]")[0]);
                        var mandatoryLabel = expiryDateDiv.find("label span");
                        var match = tin.length == event.minLength;
                        if (match) {
                            mandatoryLabel.show();
                            mandatoryLabel.addClass("mandatory");
                            expiryDateDiv.slideDown();
                            tooltip.slideDown();
                        }
                        else {
                            mandatoryLabel.hide();
                            mandatoryLabel.removeClass("mandatory");
                            expiryDateDiv.slideUp();
                            tooltip.slideUp();
                        }
                        break;
                    case "Default":
                        if (isEmpty(tin) || !ConsecutiveNumberValidation(tin, config.maxConsNum, config.inverseConsNum) || !SameDigitsValidation(tin, config.maxSameDigitsAllowed)) {
                            isTinValid = false;
                        }
                        break;
                    case "Duplicity":
                        $.when(DuplicityValidation(tin, config.code, locale, countryCode)).done(function (data) {
                            if (!data) {
                                isTinValid = false;
                            }
                        });
                        break;
                    case "NoExist":
                        $.when(NoExistValidation(tin, config.code, locale, countryCode)).done(function (data) {
                            if (!data) {
                                isTinValid = false;
                            }
                        });
                        break;
                    case "UpperAndLowerCase":
                        $.when(ValidateTinUpperAndLowerCase(tin)).done(function (data) {
                            if (!data) {
                                isTinValid = false;
                            }
                        });
                        break;
                    case "MaxLength":
                        $.when(maxLengthValidation(tin)).done(function (data) {
                            if (!data) {
                                isTinValid = false;
                            }
                        });
                        break;
                    case "ConsecutiveNumber":
                        if (!ConsecutiveNumberValidation(tin, event.maxConsecutiveAllowed, event.checkInverseConsecutive)) {
                            isTinValid = false;
                        }
                        break;
                    case "SameDigits":
                        if (!SameDigitsValidation(tin, event.maxSameDigitsAllowed)) {
                            isTinValid = false;
                        }
                        break;
                    case "Midas":
                        if (!Midas.ValidateDataEventHandler()) {
                            isTinValid = false;
                        }
                        break;
                    case "MidasFormatValidation":
                        if (!Midas.FormatValidation(tin)) {
                            isTinValid = false;
                        }
                        break;
                    case "DigitVerificator":
                        if (tin.length !== 0) {
                            if (BasicInfo.CountryCode === "CL") {
                                isTinValid =
                                    tin[tin.length - 1].toUpperCase() ===
                                    DigitVerificator.Generate(tin, BasicInfo.CountryCode).toUpperCase();
                            } else {
                                tin = tin + DigitVerificator.Generate(tin, BasicInfo.CountryCode);
                                control.unmask();
                                control.val(tin);
                                var tinlength = tin.length;
                                var verificatormask = config.verificatorMask.filter(function (e) {
                                    if (parseInt(e.length) === tinlength) return e;
                                });
                                control.mask(verificatormask[0].vmask,
                                    {
                                        clearIfNotMatch: true,
                                        selectOnFocus: true
                                    });
                            }
                        }
                        break;
                    case "RegEx":
                        if (!RegExValidation(tin, config.regex)) {
                            isTinValid = false;
                        }
                        break;
                    case "RegExWarning":
                        if (!RegExValidation(tin, config.regex)) {
                            WarningMessage.css("display", "Block");
                        }
                        break;
                    case "FillWithStartingZero":
                        if (tin.length >= config.minLengthMask) {
                            while (tin.length < config.maxLength) {
                                tin = '0' + tin;
                                control.val(tin);
                            }
                        }
                        control.mask(config.mask,
                            {
                                placeholder: config.maskPlaceholder,
                                clearIfNotMatch: config.clearIfNotMatch,
                                selectOnFocus: true
                            });
                        break;
                    case "CompareWithDOB":
                        var formatDatePicker = DatepickerFormat();
                        var dob = $("#BasicInfoDetails_DateSelected").val();
                        if (!CompareWithDOBValidation(tin, dob, event.DateFormat, formatDatePicker, '/')) {
                            isTinValid = false;
                        }
                        break;
                }
                if (!isTinValid && index === "Default" && window.TinErrors[config.code] !== undefined) {
                    message = window.TinErrors[config.code];
                }
                else if (!isTinValid && window.TinErrors[config.code] !== undefined) {
                    message = window.TinErrors[config.code];
                }
                else if (!isTinValid && window.TinErrors[index] !== undefined) {
                    message = window.TinErrors[index];
                }
                else if (!isTinValid && index === "SameDigits" && window.TinErrors["sameDigits"] !== undefined) {
                    message = !window.TinErrors["sameDigits"].includes("Missing") ? window.TinErrors["sameDigits"] : window.TinErrors["Default"];
                }
                else if (!isTinValid && index === "ConsecutiveNumber" && window.TinErrors["consecutiveNumber"] !== undefined) {
                    message = !window.TinErrors["consecutiveNumber"].includes("Missing") ? window.TinErrors["consecutiveNumber"] : window.TinErrors["Default"];
                }
            });
    }

    if (isTinValid) {

        if (!isEmpty(tin)) {
            validationMessage.css("display", "none");
        }
    }
    else {

        if (!isEmpty(tin)) {
            validationMessage.find("span").html(message);
            validationMessage.css("display", "block");
        }
    }

    text.attr("readonly", false);
    loader.css("display", "none");

    MultipleTins.HasInvalidTins = "False";

    $("[id^=InvalidTin_").each(function () {
        if ($(this).is(":visible")) {
            MultipleTins.HasInvalidTins = "True";
        }
    });

    if (!control.data("val")) {
        $(control).rules("remove", "required");
    }

    control.valid();
}

function BlurBindingEvents(targetInput, childTargetInput) {

    $("#" + childTargetInput).off("blur");
    $("#" + targetInput).off("blur");

    _keyUpElements.push("#" + childTargetInput);
    _keyUpElements.push("#" + targetInput);

    $("#" + childTargetInput).blur(function (event) {
        var stt = $(this).val();
        $("#" + targetInput).val(stt);
        ValidateTinEventHandler(this);
        ValidateTinEventHandler($("#" + targetInput));
    });

    $("#" + targetInput).blur(function (event) {
        var stt = $(this).val();
        $("#" + childTargetInput).val(stt);
        ValidateTinEventHandler(this);
        ValidateTinEventHandler($("#" + childTargetInput));
    });


    if (isEmpty($("#" + childTargetInput).val()) && isEmpty($("#" + targetInput).val())) {

        ResetValidation($("#" + childTargetInput));
        ResetValidation($("#" + targetInput));
    } else {
        $("#" + childTargetInput).trigger("blur");
    }
}

function UnbindEvents() {

    if (_keyUpElements.length > 0) {

        $.each(_keyUpElements, function (index, element) {
            $(element).unbind("keyup");
            $(element).off("blur");
        });

        _keyUpElements = [];
    }
}

function InputsBindingEvents(targetInput, childTargetInput) {

    BlurBindingEvents(targetInput, childTargetInput);

    $("#" + childTargetInput).keyup(function (event) {
        var stt = $(this).val();
        $("#" + targetInput).val(stt);
    });

    $("#" + targetInput).keyup(function (event) {
        var stt = $(this).val();
        $("#" + childTargetInput).val(stt);
    });

}

function ClearTinMessage(tinCode) {
    var validationMessage = "#InvalidTin_" + tinCode;
    $(validationMessage).css("display", "none");
    var validationMessageService = $("#SvcInvalidTin_" + tinCode);
    validationMessageService.css("display", "none");
}

function _resetForm(element) {
    var validator = $("form").validate();
    validator.destroy();
    if ($.validator.unobtrusive != undefined) {
        $.validator.unobtrusive.parseElement(element.get(0));
    }
    window.Events.Init();
}

// #region Validations

function ConsecutiveNumberValidation(value, maxConsNum, checkInversedConsNum) {

    if (value != null && value.length > 0) {

        if (value === "999999999")
            return true;

        return !CheckConsecutiveDigits(value, maxConsNum, checkInversedConsNum);
    }
    return false;
}

function maxLengthValidation(value) {

    if (value.minLength == 0 && value.maxLength == 10) {
        return true;
    }
    return false;
}

function SameDigitsValidation(value, maxSameDigits) {

    if (value != null && value.length > 0) {

        if (value === "999999999")
            return true;

        return !CheckIdenticalDigits(value, maxSameDigits);
    }
    return false;
}

function CompareWithDOBValidation(tin, dob, formatTinDate, formatDatePicker, _delimiter) {

    var formatDatePickerLowerCase = formatDatePicker.toLowerCase();
    var formatDatePickerItems = formatDatePickerLowerCase.split(_delimiter);

    var monthDatePickerIndex = formatDatePickerItems.indexOf("mm");
    var dayDatePickerIndex = formatDatePickerItems.indexOf("dd");
    var yearDatePickerIndex = formatDatePickerItems.indexOf("yyyy");

    var formatLowerCase = formatTinDate.toLowerCase();
    var formatItems = formatLowerCase.split(_delimiter);

    var monthIndex = formatItems.indexOf("mm");
    var dayIndex = formatItems.indexOf("dd");
    var yearIndex = formatItems.indexOf("yy");

    if (tin != null && tin.length >= 6 && dob != null && dob.length > 9) {
        var replacedDOB = dob.split(_delimiter);

        var newFormatDate = new Array(3);
        newFormatDate[dayIndex] = replacedDOB[dayDatePickerIndex];
        newFormatDate[monthIndex] = replacedDOB[monthDatePickerIndex];
        newFormatDate[yearIndex] = replacedDOB[yearDatePickerIndex].substring(2, 4);

        var joinedDOB = newFormatDate[0] + newFormatDate[1] + newFormatDate[2];
        tin = tin.substring(0, 6);
        if (tin === joinedDOB) {
            return true;
        }
    }
    return false;
}

function DuplicityValidation(tin, tinCode, locale, countryCode) {
    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Tin/Validate";
    var requestData = { 'Code': tinCode, 'TinNumber': tin, 'Locale': locale, 'CountryCode': countryCode };

    return $.ajax({
        url: uri,
        type: "Post",
        dataType: "json",
        async: false,
        cache: false,
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify(requestData),
        success: function (data) {

            var response = JSON.parse(data);
            return response === true;
        },
        error: function (jqXhr, textStatus, err) {
            return false;
        }
    });
}

function TinDuplicate(tin, tinCode, locale, countryCode) {

    var uri = window.location.protocol + "//" + window.location.host + "/contract/api/Tin/Validate";

    var requestData = { 'Code': tinCode, 'TinNumber': tin, 'Locale': locale, 'CountryCode': countryCode };
    var response = "";
    $.ajax({
        url: uri,
        type: "Post",
        dataType: "json",
        async: false,
        cache: false,
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify(requestData),
        success: function (data) {
            response = JSON.parse(data);
            if (response == true) {
                response = true;
            } else {
                response = false;
            }
        }
    });
    return response;
}
function NoExistValidation(tin, tinCode, locale, countryCode) {

    var response = TinDuplicate(tin, tinCode, locale, countryCode);
    if (response == true) {
        $('#InvalidTin_JPBL').css("display", "none");
        $('#SvcInvalidTin_JPBL').css("display", "none");
    }
    else if (response == false) {
        $('#InvalidTin_JPBL').css("display", "block");
        $('#SvcInvalidTin_JPBL').css("display", "none");
    }
    return response;
}

// Numbers Validation
function ValidateTinNumbers(tin) {
    $('#MsgPasswordCharsValidation').css("display", "none");
    var isValid = /[0-9]+/.test(tin);

    return isValid;
}
// Upper Case Validation
function ValidateTinUpperCaseLetters(tin) {
    $('#MsgPasswordCharsValidation').css("display", "none");
    var isValid = /[A-Z]+/.test(tin);

    return isValid;
}
// Lower Case Validation
function ValidateTinLowerCaseLetters(tin) {
    $('#MsgPasswordCharsValidation').css("display", "none");
    var isValid = /[a-z]+/.test(tin);

    return isValid;
}

function ValidateTinUpperAndLowerCase(tin) {
    var Numbers = ValidateTinNumbers(tin) ? 1 : 0;
    var UpperCase = ValidateTinUpperCaseLetters(tin) ? 1 : 0;
    var LowerCase = ValidateTinLowerCaseLetters(tin) ? 1 : 0;

    var isValid = UpperCase + Numbers + LowerCase;
    // A value of 3 of more means the requirements are accomplished.
    if (isValid > 2) {
        return true;
    }
}

function RegExValidation(value, regex) {
    if (regex) {
        var reg = new RegExp(regex);
        return reg.test(value);
    }
    return false;
}

// #endregion

window.MultipleTins = {
    init: init,
    CreateTinValidationEvents: _createTinValidationEvents,
    CheckTinRadioButton: CheckTinRadioButton,
    CreateTinValidationEventBlur: CreateTinValidationEventBlur,
    TinSelectChangeEventHandler: TinSelectChangeEventHandler,
    IsInitialized: false,
    HasInvalidTins: false, 
    IsBcpFlow: false,
    KeyUpElements: _keyUpElements,
    InputsBindingEvents: InputsBindingEvents,
    UnbindEvents: UnbindEvents,
    BlurBindingEvents: BlurBindingEvents,
    ResetValidation: ResetValidation,
    ValidateTinEventHandler: ValidateTinEventHandler,
    ClearTinMessage: ClearTinMessage,
    ConsecutiveNumberValidation: ConsecutiveNumberValidation,
    SameDigitsValidation: SameDigitsValidation,
    DuplicityValidation: DuplicityValidation,
    RegExValidation: RegExValidation,
    DatepickerFormat: DatepickerFormat,
    ValidateTinUpperAndLowerCase: ValidateTinUpperAndLowerCase,
    maxLengthValidation: maxLengthValidation,
    NoExistValidation: NoExistValidation,
    CompareWithDOBValidation: CompareWithDOBValidation,
    RestoreGeneralInfoPageOnKycRefresh: RestoreGeneralInfoPageOnKycRefresh,
    ShowKycButtons,
    InvokeKycDocExtract
};;
var Survey = {};

Survey.Init = function () {
    $("#surveyOptions input:radio[name='Survey.PrincipalQuestions']").on("change", principalQuestionsChange);

    $("#surveyOptions input:radio[name='Survey.InnerQuestion']").on("change", innerQuestionChange);

    $(".surveyQuestion").change(function() {
        $('.checkAgreements').change();
    });

    $(".OtherSurveyQuestion").keyup(function () {
        $('.checkAgreements').change();
    });

}
Survey.isCompleted = function () {

    if (($('#Option1').is(':checked') && !$('#surveyOptionsQuestionOne').length)
        || ($('#Option2').is(':checked') && !$('#surveyOptionsQuestionTwo').length)) {
        return true;
    }
    
    if ($("#Option1").is(":checked") &&
        ($("#SurveyYes").is(":checked") || $("#SurveyNo").is(":checked"))) {
        return true;
    }

    if ($("#Option2").is(":checked") &&
        ($("#ExtraMoney").is(":checked") || $("#PartTime").is(":checked") || $("#FullTime").is(":checked"))) {
        return true;
    }

    if (($("#Option3").is(":checked") && $("#Survey_OtherText").val())) {
        return true;
    }

    return false;
}

function principalQuestionsChange() {
    var selectedRadio = $("#surveyOptions input:radio[name='Survey.PrincipalQuestions']:checked");
    $("#Survey_QuestionDescription").val(selectedRadio.val());
    $("#Survey_QuestionIndex").val(selectedRadio.attr("questionIndex"));

    $("#Survey_InnerQuestionDescription").val("");
    $("#Survey_InnerQuestionIndex").val(0);
    $("#surveyOptions input:radio[name='Survey.InnerQuestion']").prop("checked", false);
    $("#Survey_OtherText").val("");

    var id = $("#surveyOptions input:radio[name='Survey.PrincipalQuestions']:checked").attr("id");

    $("#surveyOptionsQuestionOne, #surveyOptionsQuestionTwo, #otherSurveyValue").hide();
    switch (id) {
        case "Option1":
            $("#surveyOptionsQuestionOne").show();
            break;
        case "Option2":
            $("#surveyOptionsQuestionTwo").show();
            break;
        case "Option3":
            $("#otherSurveyValue").show();
            break;
    }
}

function innerQuestionChange() {
    var selectedRadio = $("#surveyOptions input:radio[name='Survey.InnerQuestion']:checked");
    $("#Survey_InnerQuestionDescription").val(selectedRadio.val());
    $("#Survey_InnerQuestionIndex").val(selectedRadio.attr("questionIndex"));
};
var CustomSurvey = {};

CustomSurvey.Init = function() {

    $("#CustomSurveyOptions input[type='checkbox']").each(function() {
        if ($(this).attr("targetinput")) {
            $(this).change(function () {
                if ($(this).is(":checked")) {
                    $("#" + $(this).attr("targetinput")).show();
                }
                else {
                    $("#" + $(this).attr("targetinput")).hide();
                }
            });
        }
    });

    $("#CustomSurveyOptions input[type='radio']").each(function() {
        var hasOtherInput = $("input[name='" + $(this).prop("name") + "']").filter(function() { return $(this).attr("targetinput"); });
        if (hasOtherInput.length) {
            var otherInput = $("#" + hasOtherInput.attr("targetinput"));
            $(this).change(function () {
                if (hasOtherInput.is(":checked")) {
                    otherInput.show();
                }
                else {
                    otherInput.hide();
                }
            });
        }
    });
    
    CustomSurvey.questions = []; 
    $("input[type='radio'],input[type='checkbox']").each(function(i, e) {
        if ($(this).attr("targetinput")) {
            var eleminput = {};
            eleminput.type = "text";
            eleminput.name = $(this).attr("targetinput");
            eleminput.id = $(this).attr("id");
            CustomSurvey.questions.push(eleminput);
            if ($(this).is(":checked")) {
                $("#" + $(this).attr("targetinput")).show();
            }
        }
        else
            if (CustomSurvey.questions.indexOf(e.name) < 0) {
                var elem = {};
                elem.type = e.type;
                elem.id = $(this).attr("id");
                elem.name = e.name.substr(0, 33);
                CustomSurvey.questions.push(elem);
            }
    });

    $("#CustomSurveyOptionsForm input[type='button'].btn-submit").click(function(e) {
        if (CustomSurvey.isCompleted()) {
            $("#CustomSurveyMissingAnswers").hide();
            $("#CustomSurveyOptionsForm").submit();
        }
        else {
            $("#CustomSurveyMissingAnswers").show();
        }
    });
}

CustomSurvey.isCompleted = function() {
    var isComplete = true;
    $("label").removeClass("mandatory");

    $.each(CustomSurvey.questions, function(i, e) {
        switch (e.type) {
            case "radio":
                if ($("input[name='" + e.name + "']:checked").length === 0) {
                    $("#" + e.id).parents("li").children("label").addClass("mandatory");
                    isComplete = false;
                }
                break;
            case "checkbox":
                if ($($("input[name^='" + e.name + "']:checked").length).length === 0) {
                    $("#" + e.id).parents("li").children("label").addClass("mandatory");
                    isComplete = false;
                }
                break;
            case "text":
                if ($("#" + e.name).is(":visible")) {
                    if ($("input[id='" + e.name + "']").val().length === 0) {
                        $("#" + e.id).parents("li").children("label").addClass("mandatory");
                        isComplete = false;
                    }
                }
        }
    });

    return isComplete;
};
var HmpPurchased = {};

HmpPurchased.HasPurchasedHmp = '';
HmpPurchased.SubmitButtonLocalized = '';
HmpPurchased.NextButtonLocalized = '';
HmpPurchased.IsOptionADisabled = '';

HmpPurchased.Init = function () {
    if (HmpPurchased.HasPurchasedHmp == true) {
        $("#isHmpRequiredCheckTrue").prop('checked', true);
    } else {
        $("#isHmpRequiredCheckFalse").prop('checked', true);
    }

    var val = $("#isHmpRequiredCheckTrue").is(':checked');
    if (val == true || HmpPurchased.IsOptionADisabled == true) {
        $("#previousHmpYes").show();
    }
    else {
        $("#previousHmpYes").hide();
    }

    $("input[name='HmpPurchased.HasPurchasedHmp']").on('click', HmpRequiredClicked);
    $('#HmpPurchased_ApplicationId').blur(function () {
        $('#HmpPurchasedApplicationIdMessage').slideUp();
    });
    $('#HmpPurchased_OnlineCode').blur(function () {
        $('#HmpPurchasedOnlineCodeMessage').slideUp();
    });

    $("#HmpPurchased_ApplicationId, #HmpPurchased_OnlineCode").each(function () {
        $(this).on("change", function () {
            $("#HmpPurchasedError").hide();
        }); 
    });
    toggleHmpOptionB();
}

function toggleHmpOptionB(){
    if($("#HmpPurchased_HmpOptionBCondition") && $("#HmpPurchased_HmpOptionBCondition").val() == "SPONSOR_TIN"){
        if($("#SponsorInfo_ConditionedTinExists").val() == "True"){
            $("#PrevHmpPurchased").show()
        }else{
            $("#PrevHmpPurchased").hide()
        }
    }else{
        $("#PrevHmpPurchased").show()
    }
}

function HmpRequiredClicked() {
    var val = $("#isHmpRequiredCheckTrue").is(':checked');
    var button = $('#nextStep');
    if (val == true) {
        $('#previousHmpYes').slideDown();
        button.val(HmpPurchased.SubmitButtonLocalized);
    } else {
        $("#HmpPurchasedError").hide();
        $('#previousHmpYes').slideUp();
        button.val(HmpPurchased.NextButtonLocalized);

        $('#HmpPurchased_ApplicationId').val("");
        $('#HmpPurchased_OnlineCode').val("");
        $('#HmpPurchased_InvoiceNumber').val("");
        $('#HmpPurchased_Invoice').val("");
        $('#HmpPurchased_InvoiceRoute').val("");
        $('#HmpPurchased_CompressedFile').val("");
        $('#HmpPurchased_IsValid').val("False");
    }
};
var Complete = {};

Complete.InstantMyHLRedirection = false;

Complete.Init = function () {

    if (Complete.InstantMyHLRedirection) {
        $("#redirectToMyHlLink")[0].click();
    }
}

var CompleteBehaviorStyler = function (locale) {

    this.Countries = ['pl-PL', 'es-EC', 'ja-JP', 'es-AR', 'es-BO', 'ru-KZ', 'hr-HR', 'es-VE', 'el-GR', 'es-NI', 'es-DO', 'es-PA', 'es-GT', 'ru-KZ', 'ro-MD', 'pl-PL', 'pt-PT'];
    this.Locale = locale;
};

CompleteBehaviorStyler.prototype.SearchApplyMethod = function () {
    var nameMethod = 'styleRibbonFor' + this.Locale.replace('-', '');
    return CompleteBehaviorStyler.prototype[nameMethod];
};

CompleteBehaviorStyler.prototype.CanApplyStyle = function () {
    return (this.Locale);
};

CompleteBehaviorStyler.prototype.ApplyStyle = function () {
    if (this.CanApplyStyle()) {
        if (this.ArrayContains(this.Locale)) {
            var func = this.SearchApplyMethod();
            func();
        }
    }
};

CompleteBehaviorStyler.prototype.ArrayContains = function () {
    return (this.Countries.indexOf(this.Locale) > -1);
};

//Custom methods for different countries and locale. eg
//CompleteBehaviorStyler.prototype.styleRibbonForesMX
CompleteBehaviorStyler.prototype.styleRibbonForplPL = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '26px');
        } else {
            $("#congratsHeader h1").css('font-size', '38px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForesEC = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '26px');
        } else {
            $("#congratsHeader h1").css('font-size', '30px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForjaJP = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '26px');
        } else {
            $("#congratsHeader h1").css('font-size', '20px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForesAR = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '20px');
        } else {
            $("#congratsHeader h1").css('font-size', '30px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForelGR = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '20px');
        } else {
            $("#congratsHeader h1").css('font-size', '26px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForesPA = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '20px');
        } else {
            $("#congratsHeader h1").css('font-size', '26px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};


CompleteBehaviorStyler.prototype.styleRibbonForesBO = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '26px');
        } else {
            $("#congratsHeader h1").css('font-size', '20px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForruKZ = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '26px');
        } else {
            $("#congratsHeader h1").css('font-size', '21px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForhrHR = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '22px');
        } else {
            $("#congratsHeader h1").css('font-size', '20px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForesVE = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '32px');
        } else {
            $("#congratsHeader h1").css('font-size', '31px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForesNI = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '32px');
        } else {
            $("#congratsHeader h1").css('font-size', '31px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForesDO = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '21px');
        } else {
            $("#congratsHeader h1").css('font-size', '30px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForesGT = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '21px');
        } else {
            $("#congratsHeader h1").css('font-size', '30px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForruKZ = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '22px');
        } else {
            $("#congratsHeader h1").css('font-size', '20px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};


CompleteBehaviorStyler.prototype.styleRibbonForroMD = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '21px');
        } else {
            $("#congratsHeader h1").css('font-size', '30px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForplPL = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '22px');
        } else {
            $("#congratsHeader h1").css('font-size', '32px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};

CompleteBehaviorStyler.prototype.styleRibbonForptPT = function () {
    var myFunction = function (size) {
        if (size.matches) { // If media query matches
            $("#congratsHeader h1").css('font-size', '22px');
        } else {
            $("#congratsHeader h1").css('font-size', '32px');
        }
    }

    var matchMediaEvent = window.matchMedia("(max-width: 1000px)");
    myFunction(matchMediaEvent); // Call listener function at run time
    matchMediaEvent.addListener(myFunction); // Attach listener function on state changes
};;
